<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Coding N Concepts</title><link>https://codingnconcepts.com/categories/java/</link><description>Recent content in Java on Coding N Concepts</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://codingnconcepts.com/categories/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Ping Pong using Threads in Java</title><link>https://codingnconcepts.com/java/ping-pong-using-threads-in-java/</link><pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/ping-pong-using-threads-in-java/</guid><description>&lt;p>This problem is frequently asked in the interview to check your understanding on threads and your programming skills. Problem statement might change for e.g.&lt;/p>
&lt;ul>
&lt;li>Print ping pong using two threads.&lt;/li>
&lt;li>Print alternate number using two threads.&lt;/li>
&lt;li>Print even numbers by one thread and odd numbers by another thread.&lt;/li>
&lt;/ul></description></item><item><title>Initialize List with Values in Java</title><link>https://codingnconcepts.com/java/initialize-list-with-values-in-java/</link><pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/initialize-list-with-values-in-java/</guid><description>&lt;p>In this tutorial, we&amp;rsquo;ll learn different ways to initialize List, ArrayList and LinkedList with values in single line in Java.&lt;/p></description></item><item><title>Convert Roman to Integer in Java</title><link>https://codingnconcepts.com/java/roman-to-integer/</link><pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/roman-to-integer/</guid><description>&lt;p>&lt;strong>Problem:&lt;/strong> Given a Roman numeral, convert it to an Integer.&lt;/p></description></item><item><title>Convert Integer to Roman in Java</title><link>https://codingnconcepts.com/java/integer-to-roman/</link><pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/integer-to-roman/</guid><description>&lt;p>&lt;strong>Problem:&lt;/strong> Given an Integer input, convert it to a Roman numeral. Input is within the range from 1 to 3999.&lt;/p></description></item><item><title>Transform JSON-LD in Java</title><link>https://codingnconcepts.com/java/transform-json-ld-in-java/</link><pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/transform-json-ld-in-java/</guid><description>&lt;p>In this tutorial, we&amp;rsquo;ll learn how to transform a Java Object to JSON-LD and vice versa. Also learn how to verify the schema of JSON-LD.&lt;/p></description></item><item><title>Builder Design Pattern In Java</title><link>https://codingnconcepts.com/java/builder-design-pattern-java/</link><pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/builder-design-pattern-java/</guid><description>&lt;p>&lt;em>Builder Design Pattern&lt;/em> is one of the commonly used design patterns. It falls under the category of &lt;em>Creational Design Patterns&lt;/em>.&lt;/p></description></item><item><title>Top Java 8 Interview Questions</title><link>https://codingnconcepts.com/top-java-8-interview-questions/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/top-java-8-interview-questions/</guid><description>&lt;p>These Java interview questions are based on my personal interview experience. Topics are in the order of recent interview trends. Keep following this post link for regular updates.&lt;/p></description></item><item><title>Factory Design Pattern In Java</title><link>https://codingnconcepts.com/java/factory-design-pattern-java/</link><pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/factory-design-pattern-java/</guid><description>&lt;p>&lt;em>Factory Design Pattern&lt;/em> is one of the most commonly used design patterns. It falls under the category of &lt;em>Creational Design Patterns&lt;/em>.&lt;/p></description></item><item><title>How to Compare two Strings in Java</title><link>https://codingnconcepts.com/java/compare-two-strings-in-java/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/compare-two-strings-in-java/</guid><description>&lt;p>In this tutorial, we&amp;rsquo;ll learn different ways to compare two strings in Java&lt;/p></description></item><item><title>How to Iterate over a List in Java</title><link>https://codingnconcepts.com/java/iterate-list-in-java/</link><pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/iterate-list-in-java/</guid><description>&lt;p>In this tutorial, we&amp;rsquo;ll learn different ways to iterate over a list in Java.&lt;/p></description></item><item><title>Find Middle Element of Linked List in Java</title><link>https://codingnconcepts.com/java/middle-element-of-linked-list-java/</link><pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/middle-element-of-linked-list-java/</guid><description>&lt;p>In this article, we&amp;rsquo;ll learn how to find middle element of a linked list using multiple approach in Java.&lt;/p></description></item><item><title>Java Math.pow() method Usage</title><link>https://codingnconcepts.com/java/math-pow-in-java/</link><pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/math-pow-in-java/</guid><description>&lt;p>In this quick article, We&amp;rsquo;ll see usage of Java &lt;em>Math.pow()&lt;/em> method which takes two arguments, a and b, and &lt;em>returns a to the power of b i.e. a&lt;sup>b&lt;/sup>&lt;/em>&lt;/p></description></item><item><title>Java Regex to Validate Phone Number</title><link>https://codingnconcepts.com/java/java-regex-to-validate-phone-number/</link><pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/java-regex-to-validate-phone-number/</guid><description>&lt;p>In this article, we&amp;rsquo;ll learn how to validate mobile phone number of different country&amp;rsquo;s format using Java Regex (Regular Expressions)&lt;/p></description></item><item><title>Java String.format() method Usage</title><link>https://codingnconcepts.com/java/string-format-in-java/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/string-format-in-java/</guid><description>&lt;p>This article demonstrate use of &lt;code>String.format()&lt;/code> in Java with many examples&amp;hellip;&lt;/p></description></item><item><title>Double Colon (::) Operator in Java 8</title><link>https://codingnconcepts.com/java/double-colon-operator-in-java-8/</link><pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/double-colon-operator-in-java-8/</guid><description>&lt;p>The double colon &lt;code>::&lt;/code> operator is introduced in Java 8 for method reference. It is a shorthand syntax for lambda expression that executes one method. You can write more compact and readable code using double colon operator as compare to anonymous classes and lambda expression. We are going to understand its usage with lots of examples.&lt;/p></description></item><item><title>M power N Using Recursive function</title><link>https://codingnconcepts.com/java/m-power-n-using-recursive/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/m-power-n-using-recursive/</guid><description>&lt;p>This is one of the example of using recursive function in Java to find M power N&lt;/p></description></item><item><title>Print All String Combinations Using Recursive function</title><link>https://codingnconcepts.com/java/print-all-string-combinations-using-recursive/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/print-all-string-combinations-using-recursive/</guid><description>&lt;p>Print all the possible combinations of a given String using Recursive function in Java&lt;/p></description></item><item><title>Streams in Java 8</title><link>https://codingnconcepts.com/java/streams-in-java-8/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/streams-in-java-8/</guid><description>&lt;p>One of the major feature of Java 8 is addition of Stream. It also has introduced the functional programming in Java. We will discuss different stream operations available in Collection, Array, IntStream with examples. We will also discuss the difference between Intermediate and Terminal operations.&lt;/p></description></item><item><title>Decorator Design Pattern Using Java</title><link>https://codingnconcepts.com/java/decorator-design-pattern-using-java/</link><pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/decorator-design-pattern-using-java/</guid><description>&lt;p>Decorator design pattern is used to add a new feature on the existing object by wrapping it with a decorator class.&lt;/p></description></item><item><title>Top Java Interview Questions</title><link>https://codingnconcepts.com/top-java-interview-questions/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/top-java-interview-questions/</guid><description>&lt;p>Comprehensive List of Java Interview Questions based on my personal interview experience over the last few years. Sequence of Questions in each section are in the order of recent interview trends. Keep following this post link for regular updates.&lt;/p></description></item><item><title>Singleton Design Pattern Using Java</title><link>https://codingnconcepts.com/java/singleton-design-pattern-using-java/</link><pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/singleton-design-pattern-using-java/</guid><description>&lt;p>This problem is frequently asked in the interview to check your understanding on singleton design pattern. This program answers following artefacts of singleton design pattern:-&lt;/p>
&lt;ol>
&lt;li>How to make singleton class thread safe?
&lt;ul>
&lt;li>using double checked locking&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>How to prevent deserialization to create new object of singleton class?
&lt;ul>
&lt;li>using readResolve method to return same instance&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>How to prevent cloning to create a new object of singleton class?
&lt;ul>
&lt;li>override clone method to return same instance&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>How to prevent reflexion to create a new object of singleton class?
&lt;ul>
&lt;li>check instance exist in private constructor and throw exception if already exist
You can find the singleton pattern implementation here.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Kafka Consumer Using Java</title><link>https://codingnconcepts.com/post/apache-kafka-consumer-using-java/</link><pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/post/apache-kafka-consumer-using-java/</guid><description>&lt;p>Implementation of Kafka Consumer using Java&lt;/p></description></item><item><title>Kafka Producer Using Java</title><link>https://codingnconcepts.com/post/apache-kafka-producer-using-java/</link><pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/post/apache-kafka-producer-using-java/</guid><description>&lt;p>Implementation of Kafka Producer using Java&lt;/p></description></item><item><title>Immutable Class in Java</title><link>https://codingnconcepts.com/java/immutable-class-using-java/</link><pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/immutable-class-using-java/</guid><description>&lt;p>In this tutorial, we&amp;rsquo;ll learn about &lt;em>Immutable Class&lt;/em> and its benefits in thread-safety, caching and collections. We will also look at rules to create immutable classes and eventually we&amp;rsquo;ll write an &lt;em>Immutable Class&lt;/em> from scratch in Java.&lt;/p></description></item><item><title>Fibonacci Series Using Recursive function</title><link>https://codingnconcepts.com/java/fibonacci-series-using-recursive/</link><pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/fibonacci-series-using-recursive/</guid><description>&lt;p>Fibonacci series implementation in java is frequently asked question in interview at fresher level. Moreover, it is a very famous example to show how to use recursive function in java.&lt;/p></description></item><item><title>Bubble Sort</title><link>https://codingnconcepts.com/java/bubble-sort-using-java/</link><pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/bubble-sort-using-java/</guid><description>&lt;h3 id="why-it-is-called-bubble-sort-">Why it is called bubble sort ?&lt;/h3>
&lt;p>Bubble Sort is nothing but a comparison algorithm where -&lt;/p>
&lt;ul>
&lt;li>At the end of first iteration, largest element in the array get placed at last index&lt;/li>
&lt;li>At the end of second iteration, second largest element in the array get placed at second last index and so on&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>This way large elements are moving towards the last indexes and hence small elements are moving towards the starting indexes which is also termed as smaller elements &amp;ldquo;bubble&amp;rdquo; to the top of the list that is why it is called bubble sort.&lt;/p></description></item><item><title>Design Elevator (Lift) in Java</title><link>https://codingnconcepts.com/java/elevator-implementation-using-java/</link><pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/java/elevator-implementation-using-java/</guid><description>&lt;p>Implementation of Elevator or Lift has been asked in many interviews. I have tried to implement it using muti-threading and TreeSet. TreeSet is used to store incoming request. It is a good choice here as it removes the duplicate requests and implements NavigableSet which provide you methods such as floor and ceiling.&lt;/p>
&lt;p>Elevator in this program implements following features -&lt;/p>
&lt;ul>
&lt;li>If elevator is going up or down, it checks for nearest floor request to process first in that direction.&lt;/li>
&lt;li>If there is no request to process, it waits at last processed floor.&lt;/li>
&lt;li>If a new request comes while elevator is processing a request. It process the new request first if it is nearest than the processing floor in same direction.&lt;/li>
&lt;/ul></description></item></channel></rss>