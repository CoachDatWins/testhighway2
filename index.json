[{"categories":["Javascript"],"contents":"In this tutorial, we\u0026rsquo;ll learn error handling using try, catch, finally and throw. We\u0026rsquo;ll also learn about Error object, different built-in JavaScript errors and how we can create our own custom errors.\nUsing try...catch...finally...throw We use try, catch, finally and throw keywords in error handling in JavaScript.\n The try block wrap your code to check for errors. The throw keyword is used to throw custom errors. The catch block handle the caught errors. You chain catch block with try block. The finally block of code is always executed regardless of the result. You chain finally block with try and catch block.   try Every try block must be chained with at least one of the catch or finally block otherwise SyntaxError will be thrown.\nLet\u0026rsquo;s use try block alone to verify:\ntry { throw new Error(\u0026#39;Error while executing the code\u0026#39;); } ⓧ Uncaught SyntaxError: Missing catch or finally after try \ntry...catch It is recommended to use try with catch block which handles the error gracefully thrown by try block.\ntry { throw new Error(\u0026#39;Error while executing the code\u0026#39;); } catch (err) { console.error(err.message); } ➤ ⓧ Error while executing the code \ntry...finally It is not recommended to use try with finally (without using catch block in between). Let\u0026rsquo;s see what happens:\ntry { throw new Error(\u0026#39;Error while executing the code\u0026#39;); } finally { console.log(\u0026#39;finally\u0026#39;); } finally ➤ ⓧ Uncaught Error: Error while executing the code We should note two things here:\n The finally block is executed even after error is thrown from try block Error is not handled gracefully without catch block resulting in Uncaught Error  \ntry...catch...finally It is recommended to use try with catch block and optional finally block.\ntry { console.log(\u0026#34;Start of try block\u0026#34;); throw new Error(\u0026#39;Error while executing the code\u0026#39;); console.log(\u0026#34;End of try block -- never reached\u0026#34;); } catch (err) { console.error(err.message); } finally { console.log(\u0026#39;Finally block always run\u0026#39;); } console.log(\u0026#34;Code execution outside try-catch-finally block continue...\u0026#34;); Start of try block ➤ ⓧ Error while executing the code Finally block always run Code execution outside try-catch-finally block continue... We should note two things here as well:\n The code after throwing error in try block never reached. Error is handled gracefully this time by catch block. The finally block is executed even after error is thrown from try block.  The finally block is generally used for cleaning up resources or closing the streams such as below:\ntry { openFile(file); readFile(file); } catch (err) { console.error(err.message); } finally { closeFile(file); } \nNested try...catch We can also use nested try and catch blocks and throw an error upwards like this:\ntry { try { throw new Error(\u0026#39;Error while executing the inner code\u0026#39;); } catch (err) { throw err; } } catch (err) { console.log(\u0026#34;Error caught by outer block:\u0026#34;); console.error(err.message); } Error caught by outer block: ➤ ⓧ Error while executing the code The Error Object JavaScript has built-in Error Object which is generally thrown by try block and caught in catch block.\nError Object consist of following properties:\n name: returns an error name message: returns an error message stack returns the stack trace  Let\u0026rsquo;s create an Error Object and look at its name and message property:\nconst err = new Error(\u0026#39;Error while executing the code\u0026#39;); console.log(\u0026#34;name:\u0026#34;, err.name); console.log(\u0026#34;message:\u0026#34;, err.message); console.log(\u0026#34;stack:\u0026#34;, err.stack); name: Error message: Error while executing the code stack: Error: Error while executing the code at \u0026lt;anonymous\u0026gt;:1:13 Built-In JavaScript Errors JavaScript has 6 built-in errors which are inherited from the Error Object. They are as follows:\nEvalError The EvalError indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore and it exist for backward compatibility.\nRangeError The RangeError is thrown when a value out of range.\n➤ [].length = -1 ⓧ Uncaught RangeError: Invalid array length ReferenceError The ReferenceError is thrown when a variable is referenced which does not exist.\n➤ x = x + 1; ⓧ Uncaught ReferenceError: x is not defined SyntaxError The SyntaxError is thrown when you have used any wrong syntax in JavaScript code.\n➤ function() { return 'Hi!' } ⓧ Uncaught SyntaxError: Function statements require a function name ➤ 1 = 1 ⓧ Uncaught SyntaxError: Invalid left-hand side in assignment TypeError The TypeError is thrown when the value is not of the expected type.\n➤ 1(); ⓧ Uncaught TypeError: 1 is not a function ➤ null.name; ⓧ Uncaught TypeError: Cannot read property \u0026#39;name\u0026#39; of null URIError The URIError is thrown when global URI handling function was used in a wrong way.\n➤ decodeURI(\u0026quot;%%%\u0026quot;); ⓧ Uncaught URIError: URI malformed Custom Error We can also define our custom error in this way:\nclass CustomError extends Error { constructor(message) { super(message); this.name = \u0026#34;CustomError\u0026#34;; } }; const err = new CustomError(\u0026#39;Custom error while executing the code\u0026#39;); console.log(\u0026#34;name:\u0026#34;, err.name); console.log(\u0026#34;message:\u0026#34;, err.message); name: CustomError message: Custom error while executing the code We can further enhance our CustomError object to include error code as well:\nclass CustomError extends Error { constructor(message, code) { super(message); this.name = \u0026#34;CustomError\u0026#34;; this.code = code; } }; const err = new CustomError(\u0026#39;Custom error while executing the code\u0026#39;, \u0026#34;ERROR_CODE\u0026#34;); console.log(\u0026#34;name:\u0026#34;, err.name); console.log(\u0026#34;message:\u0026#34;, err.message); console.log(\u0026#34;code:\u0026#34;, err.code); name: CustomError message: Custom error while executing the code code: ERROR_CODE Let\u0026rsquo;s use this in try...catch block:\ntry{ try { null.name; }catch(err){ throw new CustomError(err.message, err.name); //message, code  } }catch(err){ console.log(err.name, err.code, err.message); } CustomError TypeError Cannot read property 'name' of null ","permalink":"https://codingnconcepts.com/javascript/error-handling-in-javascript/","tags":["Javascript Core"],"title":"Error Handling in JavaScript"},{"categories":["Converter"],"contents":" .form-label, .form-input { display: block; margin-bottom: 0.5rem; } .form-input { padding: 10px; font-size: 16px; } .form-group { margin: auto; min-width: 50%; } .input-group { position: relative; display: -webkit-box; display: -ms-flexbox; display: flex; -ms-flex-wrap: wrap; flex-wrap: wrap; -webkit-box-align: stretch; -ms-flex-align: stretch; align-items: stretch; width: 100%; } .input-group-prepend { margin-right: -1px; display: flex; } .input-group-text { display: -webkit-box; display: -ms-flexbox; display: flex; -webkit-box-align: center; -ms-flex-align: center; align-items: center; padding: .375rem .75rem; margin-bottom: 0; font-size: 1rem; font-weight: 400; line-height: 1.5; color: #495057; text-align: center; white-space: nowrap; background-color: #e9ecef; border: 1px solid #ced4da; border-radius: .25rem; min-width: 60px; } .form-control { display: block; width: 100%; padding: .375rem .75rem; font-size: 1rem; line-height: 1.5; color: #495057; background-color: #fff; background-clip: padding-box; border: 1px solid #ced4da; border-radius: .25rem; transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out; } .input-group.form-control:not(:first-child) { border-top-left-radius: 0; border-bottom-left-radius: 0; } .input-group.input-group-prepend.input-group-text { border-top-right-radius: 0; border-bottom-right-radius: 0; } .input-group.form-control { position: relative; -webkit-box-flex: 1; -ms-flex: 1 1 auto; flex: 1 1 auto; width: 1%; margin-bottom: 0; padding: 10px; } .input-group { padding-bottom: 20px; }  Enter root element font-size (default 16px)* px   Enter font-size in pixel*  px   Converted rem rem   ","permalink":"https://codingnconcepts.com/converter/pixel-to-rem/","tags":["CSS Font Size"],"title":"Pixel to Rem Converter"},{"categories":["Converter"],"contents":" .form-label, .form-input { display: block; margin-bottom: 0.5rem; } .form-input { padding: 10px; font-size: 16px; } .form-group { margin: auto; min-width: 50%; } .input-group { position: relative; display: -webkit-box; display: -ms-flexbox; display: flex; -ms-flex-wrap: wrap; flex-wrap: wrap; -webkit-box-align: stretch; -ms-flex-align: stretch; align-items: stretch; width: 100%; } .input-group-prepend { margin-right: -1px; display: flex; } .input-group-text { display: -webkit-box; display: -ms-flexbox; display: flex; -webkit-box-align: center; -ms-flex-align: center; align-items: center; padding: .375rem .75rem; margin-bottom: 0; font-size: 1rem; font-weight: 400; line-height: 1.5; color: #495057; text-align: center; white-space: nowrap; background-color: #e9ecef; border: 1px solid #ced4da; border-radius: .25rem; min-width: 60px; } .form-control { display: block; width: 100%; padding: .375rem .75rem; font-size: 1rem; line-height: 1.5; color: #495057; background-color: #fff; background-clip: padding-box; border: 1px solid #ced4da; border-radius: .25rem; transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out; } .input-group.form-control:not(:first-child) { border-top-left-radius: 0; border-bottom-left-radius: 0; } .input-group.input-group-prepend.input-group-text { border-top-right-radius: 0; border-bottom-right-radius: 0; } .input-group.form-control { position: relative; -webkit-box-flex: 1; -ms-flex: 1 1 auto; flex: 1 1 auto; width: 1%; margin-bottom: 0; padding: 10px; } .input-group { padding-bottom: 20px; }   Enter color code in RGB R   G   B   Converted Hex value Hex     Note: You can also enter Hex value to convert to RGB\n\nFrequently used color codes    Color Name #RRGGBB (Hex Code) R,G,B (Decimal code)    \u0026nbsp; maroon #800000 (128,0,0)   \u0026nbsp; dark red #8B0000 (139,0,0)   \u0026nbsp; brown #A52A2A (165,42,42)   \u0026nbsp; firebrick #B22222 (178,34,34)   \u0026nbsp; crimson #DC143C (220,20,60)   \u0026nbsp; red #FF0000 (255,0,0)   \u0026nbsp; tomato #FF6347 (255,99,71)   \u0026nbsp; coral #FF7F50 (255,127,80)   \u0026nbsp; indian red #CD5C5C (205,92,92)   \u0026nbsp; light coral #F08080 (240,128,128)   \u0026nbsp; dark salmon #E9967A (233,150,122)   \u0026nbsp; salmon #FA8072 (250,128,114)   \u0026nbsp; light salmon #FFA07A (255,160,122)   \u0026nbsp; orange red #FF4500 (255,69,0)   \u0026nbsp; dark orange #FF8C00 (255,140,0)   \u0026nbsp; orange #FFA500 (255,165,0)   \u0026nbsp; gold #FFD700 (255,215,0)   \u0026nbsp; dark golden rod #B8860B (184,134,11)   \u0026nbsp; golden rod #DAA520 (218,165,32)   \u0026nbsp; pale golden rod #EEE8AA (238,232,170)   \u0026nbsp; dark khaki #BDB76B (189,183,107)   \u0026nbsp; khaki #F0E68C (240,230,140)   \u0026nbsp; olive #808000 (128,128,0)   \u0026nbsp; yellow #FFFF00 (255,255,0)   \u0026nbsp; yellow green #9ACD32 (154,205,50)   \u0026nbsp; dark olive green #556B2F (85,107,47)   \u0026nbsp; olive drab #6B8E23 (107,142,35)   \u0026nbsp; lawn green #7CFC00 (124,252,0)   \u0026nbsp; chart reuse #7FFF00 (127,255,0)   \u0026nbsp; green yellow #ADFF2F (173,255,47)   \u0026nbsp; dark green #006400 (0,100,0)   \u0026nbsp; green #008000 (0,128,0)   \u0026nbsp; forest green #228B22 (34,139,34)   \u0026nbsp; lime #00FF00 (0,255,0)   \u0026nbsp; lime green #32CD32 (50,205,50)   \u0026nbsp; light green #90EE90 (144,238,144)   \u0026nbsp; pale green #98FB98 (152,251,152)   \u0026nbsp; dark sea green #8FBC8F (143,188,143)   \u0026nbsp; medium spring green #00FA9A (0,250,154)   \u0026nbsp; spring green #00FF7F (0,255,127)   \u0026nbsp; sea green #2E8B57 (46,139,87)   \u0026nbsp; medium aqua marine #66CDAA (102,205,170)   \u0026nbsp; medium sea green #3CB371 (60,179,113)   \u0026nbsp; light sea green #20B2AA (32,178,170)   \u0026nbsp; dark slate gray #2F4F4F (47,79,79)   \u0026nbsp; teal #008080 (0,128,128)   \u0026nbsp; dark cyan #008B8B (0,139,139)   \u0026nbsp; aqua #00FFFF (0,255,255)   \u0026nbsp; cyan #00FFFF (0,255,255)   \u0026nbsp; light cyan #E0FFFF (224,255,255)   \u0026nbsp; dark turquoise #00CED1 (0,206,209)   \u0026nbsp; turquoise #40E0D0 (64,224,208)   \u0026nbsp; medium turquoise #48D1CC (72,209,204)   \u0026nbsp; pale turquoise #AFEEEE (175,238,238)   \u0026nbsp; aqua marine #7FFFD4 (127,255,212)   \u0026nbsp; powder blue #B0E0E6 (176,224,230)   \u0026nbsp; cadet blue #5F9EA0 (95,158,160)   \u0026nbsp; steel blue #4682B4 (70,130,180)   \u0026nbsp; corn flower blue #6495ED (100,149,237)   \u0026nbsp; deep sky blue #00BFFF (0,191,255)   \u0026nbsp; dodger blue #1E90FF (30,144,255)   \u0026nbsp; light blue #ADD8E6 (173,216,230)   \u0026nbsp; sky blue #87CEEB (135,206,235)   \u0026nbsp; light sky blue #87CEFA (135,206,250)   \u0026nbsp; midnight blue #191970 (25,25,112)   \u0026nbsp; navy #000080 (0,0,128)   \u0026nbsp; dark blue #00008B (0,0,139)   \u0026nbsp; medium blue #0000CD (0,0,205)   \u0026nbsp; blue #0000FF (0,0,255)   \u0026nbsp; royal blue #4169E1 (65,105,225)   \u0026nbsp; blue violet #8A2BE2 (138,43,226)   \u0026nbsp; indigo #4B0082 (75,0,130)   \u0026nbsp; dark slate blue #483D8B (72,61,139)   \u0026nbsp; slate blue #6A5ACD (106,90,205)   \u0026nbsp; medium slate blue #7B68EE (123,104,238)   \u0026nbsp; medium purple #9370DB (147,112,219)   \u0026nbsp; dark magenta #8B008B (139,0,139)   \u0026nbsp; dark violet #9400D3 (148,0,211)   \u0026nbsp; dark orchid #9932CC (153,50,204)   \u0026nbsp; medium orchid #BA55D3 (186,85,211)   \u0026nbsp; purple #800080 (128,0,128)   \u0026nbsp; thistle #D8BFD8 (216,191,216)   \u0026nbsp; plum #DDA0DD (221,160,221)   \u0026nbsp; violet #EE82EE (238,130,238)   \u0026nbsp; magenta / fuchsia #FF00FF (255,0,255)   \u0026nbsp; orchid #DA70D6 (218,112,214)   \u0026nbsp; medium violet red #C71585 (199,21,133)   \u0026nbsp; pale violet red #DB7093 (219,112,147)   \u0026nbsp; deep pink #FF1493 (255,20,147)   \u0026nbsp; hot pink #FF69B4 (255,105,180)   \u0026nbsp; light pink #FFB6C1 (255,182,193)   \u0026nbsp; pink #FFC0CB (255,192,203)   \u0026nbsp; antique white #FAEBD7 (250,235,215)   \u0026nbsp; beige #F5F5DC (245,245,220)   \u0026nbsp; bisque #FFE4C4 (255,228,196)   \u0026nbsp; blanched almond #FFEBCD (255,235,205)   \u0026nbsp; wheat #F5DEB3 (245,222,179)   \u0026nbsp; corn silk #FFF8DC (255,248,220)   \u0026nbsp; lemon chiffon #FFFACD (255,250,205)   \u0026nbsp; light golden rod yellow #FAFAD2 (250,250,210)   \u0026nbsp; light yellow #FFFFE0 (255,255,224)   \u0026nbsp; saddle brown #8B4513 (139,69,19)   \u0026nbsp; sienna #A0522D (160,82,45)   \u0026nbsp; chocolate #D2691E (210,105,30)   \u0026nbsp; peru #CD853F (205,133,63)   \u0026nbsp; sandy brown #F4A460 (244,164,96)   \u0026nbsp; burly wood #DEB887 (222,184,135)   \u0026nbsp; tan #D2B48C (210,180,140)   \u0026nbsp; rosy brown #BC8F8F (188,143,143)   \u0026nbsp; moccasin #FFE4B5 (255,228,181)   \u0026nbsp; navajo white #FFDEAD (255,222,173)   \u0026nbsp; peach puff #FFDAB9 (255,218,185)   \u0026nbsp; misty rose #FFE4E1 (255,228,225)   \u0026nbsp; lavender blush #FFF0F5 (255,240,245)   \u0026nbsp; linen #FAF0E6 (250,240,230)   \u0026nbsp; old lace #FDF5E6 (253,245,230)   \u0026nbsp; papaya whip #FFEFD5 (255,239,213)   \u0026nbsp; sea shell #FFF5EE (255,245,238)   \u0026nbsp; mint cream #F5FFFA (245,255,250)   \u0026nbsp; slate gray #708090 (112,128,144)   \u0026nbsp; light slate gray #778899 (119,136,153)   \u0026nbsp; light steel blue #B0C4DE (176,196,222)   \u0026nbsp; lavender #E6E6FA (230,230,250)   \u0026nbsp; floral white #FFFAF0 (255,250,240)   \u0026nbsp; alice blue #F0F8FF (240,248,255)   \u0026nbsp; ghost white #F8F8FF (248,248,255)   \u0026nbsp; honeydew #F0FFF0 (240,255,240)   \u0026nbsp; ivory #FFFFF0 (255,255,240)   \u0026nbsp; azure #F0FFFF (240,255,255)   \u0026nbsp; snow #FFFAFA (255,250,250)   \u0026nbsp; black #000000 (0,0,0)   \u0026nbsp; dim gray / dim grey #696969 (105,105,105)   \u0026nbsp; gray / grey #808080 (128,128,128)   \u0026nbsp; dark gray / dark grey #A9A9A9 (169,169,169)   \u0026nbsp; silver #C0C0C0 (192,192,192)   \u0026nbsp; light gray / light grey #D3D3D3 (211,211,211)   \u0026nbsp; gainsboro #DCDCDC (220,220,220)   \u0026nbsp; white smoke #F5F5F5 (245,245,245)   \u0026nbsp; white #FFFFFF (255,255,255)  ","permalink":"https://codingnconcepts.com/converter/rgx-to-hex/","tags":["CSS Color"],"title":"RGB to HEX Converter"},{"categories":["CSS"],"contents":"In this tutorial, we\u0026rsquo;ll learn different units to measure font-size in CSS i.e. px, em, and rem, their differences, and which one to use when.\nDefault font-size Let\u0026rsquo;s understand the browser\u0026rsquo;s font-size first which is a key concept in difference between px, em, and rem.\nMost browsers provide an ability to change the font-size from the settings. Default font-size is 16px, which user can always change according to their preference as below:\n Font Size Setting in Chrome Browser\n  You can override the default font-size setting of the browser using CSS in this way:\nhtml { font-size: 32px; } or\nhtml { font-size: 200%; } Though it is not recommended to override default behavior of the browser otherwise it won\u0026rsquo;t honor user preference which is not a good idea.\nPX  The pixel px is an absolute and fixed-size unit in CSS.\n Pixels are easily translatable. For example using below CSS, font-size of p (paragraph) element will always remain 12px on all devices and screens regardless of changing the browser font-size setting, or any of its parent element\u0026rsquo;s font-size.\np { font-size: 12px; } Although the size of a pixel isn’t always the same across devices and screens, means the actual width of the block having width: 120px on laptop is not same as on iPad.\nWhat is the problem with px? The problem arises, when user changes the default font-size of the browser say they want to see bigger font-size. In that case p (paragraph) element with above CSS will still be displayed as font-size: 12px since its an absolute value. User preference is not reflected which is not considered as a good user experience.\nWhen to use px? Pixel px is still a good choice for fixed layout measurement and fixed spacing (padding, margin, etc.) but not a good choice for flexible layouts and font-size measurement.\nAlternate of px? The em and rem are the relative (or flexible) units as oppose to px, which is an absolute (or fixed) unit. Both em and rem are translated by the browser into pixel (px) values, depending on the default font-size setting of the browser. Say, if browser\u0026rsquo;s default font-size is 16px, then\n1em = 16px; 1rem = 16px; EM  The em unit is relative to its direct or nearest parent element.\n If font-size is not defined explicitly, that element will inherit it from the parent element. The inheritance continues to take place this way amongst ancestors up until the root element. Default font-size of the root element is provided by browser.\nWhen to use em? 1. Nested Structure\nWe can use the em where you want to apply font-size relative to the parent element such as menu structure.\n\u0026lt;style\u0026gt; .menu-container { font-size: 100px;  border: 1px solid black; } .menu-item { font-size: 0.5em;  padding-left: 20px; } .menu-item::before { content: \u0026#39;▾\u0026#39; } \u0026lt;/style\u0026gt; \u0026lt;div id=\u0026#34;container\u0026#34; class=\u0026#34;menu-container\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;menu\u0026#34; class=\u0026#34;menu-item\u0026#34;\u0026gt; Menu \u0026lt;div id=\u0026#34;submenu\u0026#34; class=\u0026#34;menu-item\u0026#34;\u0026gt; Submenu \u0026lt;div id=\u0026#34;subsubmenu\u0026#34; class=\u0026#34;menu-item\u0026#34;\u0026gt; Subsubmenu \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;another_subsubmenu\u0026#34;\u0026gt; Another Subsubmenu \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  .menu-container { font-size: 100px; border: 1px solid black; } .menu-item { font-size: 0.5em; padding-left: 20px; } .menu-item::before { content: '▾' }  Menu Submenu Subsubmenu  Another Subsubmenu     We see that font-size is reducing as we go to the nested levels of menu structure even though we have applied the same CSS class .menu-item to all nested menu items. Let\u0026rsquo;s break down how browser is calculating the the pixel (px) from rem relative values.\n The #menu item font-size: 0.5em is relative to the #container so font-size in pixel would be 100x0.5 = 50px The #submenu item font-size: 0.5em is relative to the #menu so font-size in pixel would be 50x0.5 = 25px The #subsubmenu item font-size: 0.5em is relative to the #submenu so font-size in pixel would be 25x0.5 = 12.5px The #another_subsubmenu item class and font-size is not defined so font-size in pixel would be same as its parent #submenu i.e. 25px  2. Media Queries\nThe em should be used to define screen width in media queries. Here is an interesting post which explains why em should be used for media queries.\nWhat is the problem with em? The main problem with em is that you need to do all mathematical calculation of font-size of child elements as we did. Moreover, if you want to apply a specific font-size to child element, you cannot do that using em.\nAlternate of em? The rem is the solution of our problem. It is a relative unit and not dependent on parent elements. Let\u0026rsquo;s look at it.\nREM  The rem unit is relative to the html (root) element.\n If the font-size of root html element is 16px i.e.\n:root { font-size: 16px; } then\n1rem = 16px for all the elements.\nIf font-size is not explicitly defined in root element then 1rem will be equal to the default font-size provided by the browser (usually 16px).\nWhen to use rem? It is recommended to use rem for spacing (margin, padding, etc.) and font size in CSS as it honors user\u0026rsquo;s preferences and provide better user experience.\npx to rem when root is 16px you can use the following table to convert from px to rem when root font-size is 16px:\n   px rem     10px 0.625rem   11px 0.6875rem   12px 0.75rem   13px 0.8125rem   14px 0.875rem   15px 0.9375rem   16px 1rem   17px 1.0625rem   18px 1.125rem   19px 1.1875rem   20px 1.25rem   21px 1.3125rem   22px 1.375rem   23px 1.4375rem   24px 1.5rem   25px 1.5625rem   26px 1.625rem   27px 1.6875rem   28px 1.75rem   29px 1.8125rem   30px 1.875rem   31px 1.9375rem   32px 2rem   33px 2.0625rem   34px 2.125rem   35px 2.1875rem   36px 2.25rem   37px 2.3125rem   38px 2.375rem   39px 2.4375rem   40px 2.5rem   41px 2.5625rem   42px 2.625rem   43px 2.6875rem   44px 2.75rem   45px 2.8125rem   46px 2.875rem   47px 2.9375rem   48px 3rem   49px 3.0625rem   50px 3.125rem   51px 3.1875rem   52px 3.25rem   53px 3.3125rem   54px 3.375rem   55px 3.4375rem   56px 3.5rem   57px 3.5625rem   58px 3.625rem   59px 3.6875rem   60px 3.75rem   61px 3.8125rem   62px 3.875rem   63px 3.9375rem   64px 4rem     You can also calculate rem using Pixel to Rem Converter\n Final Thoughts The best practice for the web developers is to:\n Use px for fixed size layout (width, height, etc.) or fixed spacing (margin, padding, etc.) Use em for nested elements (tree, menu, etc.) and media queries Use rem for flexible layout, spacing, and font-size ","permalink":"https://codingnconcepts.com/css/font-size-units-px-em-and-rem/","tags":["CSS Font-Size"],"title":"CSS units for font-size: px, em and rem"},{"categories":["Javascript"],"contents":"In this tutorial, we\u0026rsquo;ll see the difference between Array.forEach() and Array.map() methods in JavaScript Array.\nThe forEach() and map() method are mostly used to iterate through an Array elements but there are few differences, We\u0026rsquo;ll look at them one by one.\nReturned Value The forEach() method returns undefined whereas map() returns a new array with transformed elements.\nLet\u0026rsquo;s find out the square of each element in an Array using these two methods:\nconst numbers = [1, 2, 3, 4, 5]; // using forEach() const squareUsingForEach = []; numbers.forEach(x =\u0026gt; squareUsingForEach.push(x*x)); // using map() const squareUsingMap = numbers.map(x =\u0026gt; x*x); console.log(squareUsingForEach); // [1, 4, 9, 16, 25] console.log(squareUsingMap); // [1, 4, 9, 16, 25] Since forEach() returns undefined, we need to pass an empty array to create a new transformed array. There is no such issue with map() method which returns the new transformed array directly. It is recommended to use map() method in such cases.\nChaining other methods The map() method output can be chained with other methods such as reduce(), sort(), filter() to perform multiple operations in a single statement.\nOn the other hand, forEach() is a terminal method means it cannot be chained with other methods since it returns undefined.\nLet\u0026rsquo;s find out the sum of square of each element in an Array using these two methods:\nconst numbers = [1, 2, 3, 4, 5]; // using forEach() const squareUsingForEach = [] let sumOfSquareUsingForEach = 0; numbers.forEach(x =\u0026gt; squareUsingForEach.push(x*x)); squareUsingForEach.forEach(square =\u0026gt; sumOfSquareUsingForEach += square); // using map() const sumOfSquareUsingMap = numbers.map(x =\u0026gt; x*x).reduce((total, value) =\u0026gt; total + value); console.log(sumOfSquareUsingForEach); // 55 console.log(sumOfSquareUsingMap); // 55 It is such a tedious job to use forEach() method when multiple operations are required. We can use map() method in such cases.\nPerformance We have created an array with 1 million random numbers (ranging from 1 to 1000). Let\u0026rsquo;s check the performance of each method.\n// Array: var numbers = []; for ( var i = 0; i \u0026lt; 1000000; i++ ) { numbers.push(Math.floor((Math.random() * 1000) + 1)); } // 1. forEach() console.time(\u0026#34;forEach\u0026#34;); const squareUsingForEach = []; numbers.forEach(x =\u0026gt; squareUsingForEach.push(x*x)); console.timeEnd(\u0026#34;forEach\u0026#34;); // 2. map() console.time(\u0026#34;map\u0026#34;); const squareUsingMap = numbers.map(x =\u0026gt; x*x); console.timeEnd(\u0026#34;map\u0026#34;); Here is the result after running the above code on MacBook Pro\u0026rsquo;s Google Chrome v83.0.4103.106 (64-bit). I suggest to copy the above code and try yourself in console.\nforEach: 26.596923828125ms map: 21.97998046875ms Clearly map() method performs better then forEach() for transforming elements.\nBreak the iteration This is not the difference between these two methods but important to know that there is no way to stop or break; the iteration if you are using forEach() or map() methods. The only way is to throw an exception from the callback function which may not be desired in most of the cases.\nIf we use break; statement within the callback function of forEach() or map() method,\nconst numbers = [1, 2, 3, 4, 5]; // break; inside forEach() const squareUsingForEach = []; numbers.forEach(x =\u0026gt; { if(x == 3) break; // \u0026lt;- SyntaxError  squareUsingForEach.push(x*x); }); // break; inside map() const squareUsingMap = numbers.map(x =\u0026gt; { if(x == 3) break; // \u0026lt;- SyntaxError  return x*x; }); JavaScript throws SyntaxError as follows:\nⓧ Uncaught SyntaxError: Illegal break statement If you need such behavior then you should use simple for loop or for-of / for-in loop.\nconst numbers = [1, 2, 3, 4, 5]; // break; inside for-of loop const squareUsingForEach = []; for(x of numbers){ if(x == 3) break; squareUsingForEach.push(x*x); }; console.log(squareUsingForEach); // [1, 4] Final Thoughts It is recommended to use map() to transform elements of an array since it is having short syntax, it\u0026rsquo;s chainable and has better performance.\nYou shouldn\u0026rsquo;t use map() if you\u0026rsquo;re not using returned array or not transforming elements of an array. It\u0026rsquo;s an anti-pattern; instead you should use forEach() method.\nAt last, if you want to stop or break the iteration of an array based on some condition then you should use simple for loop or for-of / for-in loop.\n","permalink":"https://codingnconcepts.com/javascript/difference-between-foreach-and-map-in-javascript-array/","tags":["Javascript Array"],"title":"Difference Between forEach() and map() in JavaScript Array"},{"categories":["Javascript"],"contents":"In this tutorial, we\u0026rsquo;ll learn how to divide an Array in equal parts using Array.splice() method in JavaScript. We will also learn how it is different from Array.slice() method.\nDivide array in two equal parts We can divide an array in half in two steps:\n Find the middle index of the array using length/2 and Math.ceil() method, Get two equal parts of the array using this middle index and Array.splice() method  const list = [1, 2, 3, 4, 5, 6]; const middleIndex = Math.ceil(list.length / 2); const firstHalf = list.splice(0, middleIndex); const secondHalf = list.splice(-middleIndex); console.log(firstHalf); // [1, 2, 3] console.log(secondHalf); // [4, 5, 6] console.log(list); // []  Array.splice() method changes the content of an array by removing, replacing or adding elements. Do not confuse this method with Array.slice() method which is used to make a copy of an array.\n  list.splice(0, middleIndex) removes first 3 elements starting from 0 index from an array and returns it. list.splice(-middleIndex) removes last 3 elements from an array and returns it.  At the end of these two operations, since we have removed all the elements from the array, the original array is empty.\nAlso note that number of elements are even in the above case, in case of odd number of elements, first half will have one extra element.\nconst list = [1, 2, 3, 4, 5]; const middleIndex = Math.ceil(list.length / 2); list.splice(0, middleIndex); // returns [1, 2, 3] list.splice(-middleIndex); // returns [4, 5] Array.slice and Array.splice Sometime you wish not to alter the original array, this can also be done by chaining Array.slice() method with Array.splice()\nconst list = [1, 2, 3, 4, 5, 6]; const middleIndex = Math.ceil(list.length / 2); const firstHalf = list.slice().splice(0, middleIndex); const secondHalf = list.slice().splice(-middleIndex); console.log(firstHalf); // [1, 2, 3] console.log(secondHalf); // [4, 5, 6] console.log(list); // [1, 2, 3, 4, 5, 6]; We see that our original array remains the same since we make a copy of original array using Array.slice() before removing the elements using Array.splice().\nDivide array in three equal parts Let\u0026rsquo;s define an array and divide them in three equal parts using the Array.splice method.\nconst list = [1, 2, 3, 4, 5, 6, 7, 8, 9]; const threePartIndex = Math.ceil(list.length / 3); const thirdPart = list.splice(-threePartIndex); const secondPart = list.splice(-threePartIndex); const firstPart = list; console.log(firstPart); // [1, 2, 3] console.log(secondPart); // [4, 5, 6] console.log(thirdPart); // [7, 8, 9] Let\u0026rsquo;s break down how it happened:\n We have first extracted the thirdPart using list.splice(-threePartIndex), which removes last 3 elements [7, 8, 9], at this point list contain only first 6 elements [1, 2, 3, 4, 5, 6]. Now we have extracted the secondPart using list.splice(-threePartIndex), which removes last 3 elements from remaining list = [1, 2, 3, 4, 5, 6] which is [4, 5, 6], at this point list contain only first 3 elements [1, 2, 3] which is firstPart.  More about Array.splice Let\u0026rsquo;s look at more examples using Array.splice() method. Take note that Array.slice() has been used before Array.splice() because we do not want to alter the original array. You can omit the use of Array.slice() if you want to alter the original array in below examples.\n// Define an array const list = [1, 2, 3, 4, 5, 6, 7, 8, 9];  Get first element of an array list.slice().splice(0, 1); // [1]  Get first five elements of an array list.slice().splice(0, 5); // [1, 2, 3, 4, 5]  Get all elements after first five element of an array list.slice().splice(5); // [6, 7, 8, 9]  Get last element of an array list.slice().splice(-1); // [9]  Get last three elements of an array list.slice().splice(-3); // [7, 8, 9]  ","permalink":"https://codingnconcepts.com/javascript/how-to-divide-array-in-equal-parts-in-javascript/","tags":["Javascript Array"],"title":"How to Divide an Array in Equal Parts in JavaScript"},{"categories":["Javascript"],"contents":"In this tutorial, we\u0026rsquo;ll learn how to replace all occurrences of a string in JavaScript using String.replace() method. We will also look at String.split() and Array.join() approach.\nUsing String.replace Let\u0026rsquo;s take a quick look on the syntax:\nconst newStr = String.replace(\u0026#34;pattern\u0026#34;, \u0026#34;replacement\u0026#34;); The String.replace() method returns a new string after replacing the occurrences of matched pattern by replacement string.\nPattern can be String or RegEx Important point to note that the pattern can be a String or a RegEx.\n If pattern is String, then only the first occurrence is replaced. If pattern is RegEx, then all the occurrence are replaced if global flag /g is used. You can also enable the case insensitive replacement by using /i flag.  Let\u0026rsquo;s look at the example,\nconst lyrics = \u0026#34;Smelly cat, smelly cat what are they feeding you?\u0026#34;; console.log(lyrics.replace(\u0026#34;cat\u0026#34;, \u0026#34;kitty\u0026#34;)); //pattern is String console.log(lyrics.replace(/cat/, \u0026#34;kitty\u0026#34;)); //pattern is RegEx Output \u0026quot;Smelly kitty, smelly cat what are they feeding you?\u0026quot; \u0026quot;Smelly kitty, smelly cat what are they feeding you?\u0026quot; We see that pattern as String or RegEx both returned the same result and replaced only first occurrence.\nRegEx with global flag /g Let\u0026rsquo;s use the RegEx with global flag /g to replace all the occurrences.\nconst lyrics = \u0026#34;Smelly cat, smelly cat what are they feeding you?\u0026#34;; console.log(lyrics.replace(/cat/g, \u0026#34;kitty\u0026#34;)); Output \u0026quot;Smelly kitty, smelly kitty what are they feeding you?\u0026quot; RegEx with case insensitive flag /i Please note that above replacements are case sensitive, If we try this:\nconst lyrics = \u0026#34;Smelly cat, smelly cat what are they feeding you?\u0026#34;; console.log(lyrics.replace(/Smelly cat/g, \u0026#34;Sweet kitty\u0026#34;)); Output \u0026quot;Sweet kitty, smelly cat what are they feeding you?\u0026quot; We see that only first occurrence is replaced. We can enable case insensitive replacement by using /i flag in RegEx.\nconst lyrics = \u0026#34;Smelly cat, smelly cat what are they feeding you?\u0026#34;; console.log(lyrics.replace(/Smelly cat/gi, \u0026#34;Sweet kitty\u0026#34;)); Output \u0026quot;Sweet kitty, Sweet kitty what are they feeding you?\u0026quot; Yay! We are able to replace all occurrences of a string using Regex with global and case insensitive flag /\u0026lt;pattern\u0026gt;/gi\nUsing String.split and Array.join An alternative approach which is slower as compare to String.replace() is two step approach:-\n Split the string using String.split() to remove the occurrence of matched (case sensitive) pattern and returns array, Join the array again using Array.join() with replacement string  const newStr = String.split(\u0026#34;pattern\u0026#34;).join(\u0026#34;replacement\u0026#34;); Let\u0026rsquo;s look at the example.\nconst lyrics = \u0026#34;Smelly cat, smelly cat what are they feeding you?\u0026#34;; console.log(lyrics.split(\u0026#34;cat\u0026#34;).join(\u0026#34;kitty\u0026#34;)); Output \u0026quot;Smelly kitty, smelly kitty what are they feeding you?\u0026quot; ","permalink":"https://codingnconcepts.com/javascript/how-to-replace-all-occurrences-string-javascript/","tags":["Javascript Core"],"title":"How to Replace all Occurrences of a String in JavaScript"},{"categories":["Javascript"],"contents":"In this tutorial, we\u0026rsquo;ll learn how to reverse an Array in JavaScript using Array.reverse() method.\nArray.reverse The easiest way to reverse an array is to use reverse() method.\nconst list = [1, 2, 3, 4, 5]; list.reverse(); console.log(list); // prints [5, 4, 3, 2, 1] Here is the catch, it reversed the elements of your original array. Sometime you wish not to alter the original array, and assign it to a new variable instead.\nYou can do in two steps:\n First you have to make a copy of the original array Reverse the copy and assign it to a new variable  In Javascript, you can do this in multiple ways in a single statement.\nSpread Operator (\u0026hellip;) and Array.reverse It is recommended to use spread operator ... to make a copy of an array and chain it with reverse() method. It’s short syntax is very handy.\nconst list = [1, 2, 3, 4, 5]; const reversedList = [...list].reverse(); console.log(list); // prints [1, 2, 3, 4, 5]  console.log(reversedList); // prints [5, 4, 3, 2, 1] We see that our original array remains the same and reversed array is assigned to a new variable.\nArray.slice and Array.reverse You can also chain slice() method with reverse() method to make a new copy of reversed array.\nconst list = [1, 2, 3, 4, 5]; const reversedList = list.slice().reverse(); console.log(list); // prints [1, 2, 3, 4, 5]  console.log(reversedList); // prints [5, 4, 3, 2, 1] Array.from and Array.reverse Another way is to chain Array.from() method with reverse() method to make a new copy of reversed array.\nconst list = [1, 2, 3, 4, 5]; const reversedList = Array.from(list).reverse(); console.log(list); // prints [1, 2, 3, 4, 5]  console.log(reversedList); // prints [5, 4, 3, 2, 1] ","permalink":"https://codingnconcepts.com/javascript/how-to-reverse-array-in-javascript/","tags":["Javascript Array"],"title":"How to Reverse an Array in JavaScript"},{"categories":["Javascript"],"contents":"In this tutorial, we\u0026rsquo;ll learn about Math Object in JavaScript, which allows us to use mathematical constants such as π, e, √2 and perform mathematical operations on numbers such as pow(), sqrt(), max(), min(), random(), abs(), ceil(), floor(), round(), and truc().\nMath Constants Math Object in JavaScript provides 8 mathematical constants that can be used:\nMath.E // returns 2.718281828459045 (Euler\u0026#39;s number) Math.PI // returns 3.141592653589793 (PI) Math.SQRT2 // returns 1.4142135623730951 (square root of 2) Math.SQRT1_2 // returns 0.7071067811865476 (square root of 1/2) Math.LN2 // returns 0.6931471805599453 (natural logarithm of 2) Math.LN10 // returns 2.302585092994046 (natural logarithm of 10 Math.LOG2E // returns 1.4426950408889634 (base 2 logarithm of E) Math.LOG10E // returns 0.4342944819032518 (base 10 logarithm of E) Calculate circumference of a circle Let\u0026rsquo;s use Math.PI constant to calculate the circumference 2πr of a circle given the radius r:\nfunction calculateCircumference(radius) { return 2 * Math.PI * radius; } calculateCircumference(10); // returns 62.83185307179586 Math Pow The Math.pow(a, b) function returns the a (base) to the power of b (exponent), i.e. ab.\nMath.pow(4, 3); // returns 64 i.e. 4×4×4  Math.pow(-4, 3); // returns -64 i.e. (-4)×(-4)×(-4)  Math.pow(4, -3); // returns 0.015625 i.e. 1 ÷ (4 × 4 x 4)  Math.pow(64, 0.5); // returns 8 i.e. 2√64  Math.pow(-64, 0.5); // returns NaN i.e. 2√-64 square root number cannot be negative  Math.pow(64, -0.5); // returns 0.125 i.e. 1 ÷ 2√64 = 1/8 Let\u0026rsquo;s breakdown the result of above examples for clear understanding:\n   Math.pow(a, b) ab breakdown result     Math.pow(4, 3) 43 4 × 4 x 4 64   Math.pow(-4, 3) (-4)3 (-4) × (-4) x (-4) -64   Math.pow(4, -3) 4(-3) 1 ÷ (4 × 4 x 4) 0.015625   Math.pow(64, 0.5) 640.5 2√64 8   Math.pow(-64, 0.5) (-64)0.5 2√-64 NaN   Math.pow(64, -0.5) 64(-0.5) 1 ÷ 2√64 0.125    \nExponentiation Operator (**) It is very interesting to know that JavaScript ES6 provide shorthand syntax ** for Math power also known as exponentiation operator. So the above Math.pow examples are same as:\nconsole.log(4 ** 3); // returns 64 console.log((-4) ** 3); // returns -64 console.log(4 ** -3); // returns 0.015625 console.log(64 ** 0.5); // returns 8 console.log((-64) ** 0.5); // returns NaN console.log(64 ** -0.5); // returns 0.125 Please note that if you are using shorthand syntax with -ve base then you must wrap the base in parenthesis () to avoid SyntaxError.\n➤ -4 ** 3 Uncaught SyntaxError: Unary operator used immediately before exponentiation expression. Parenthesis must be used to disambiguate operator precedence ➤ (-4) ** 3 -64 Create square and cube methods using exponentiation operator Let\u0026rsquo;s create some math power methods using exponentiation operator **:\nconst square = x =\u0026gt; x ** 2; const cube = x =\u0026gt; x ** 3; square(4); // returns 16 cube(3); // returns 27 Math Sqrt The Math.sqrt(x) function returns the square root of the given number.\nMath.sqrt(0); // returns 0 Math.sqrt(null); // returns 0  Math.sqrt(25); // returns 5 Math.sqrt(1); // returns 1 Math.sqrt(0.5); // returns 0.7071067811865476  Math.sqrt(-5); // returns NaN as number cannot be negative Math.sqrt(NaN); // returns NaN as number cannot be NaN Create our own squareroot method Let\u0026rsquo;s create our own squareroot methods using ES6 exponentiation operator **:\nconst squareroot = x =\u0026gt; x ** 0.5; squareroot(0); // returns 0 squareroot(null); // returns 0 squareroot(25); // returns 5 squareroot(1); // returns 1 squareroot(0.5); // returns 0.707106781186547 squareroot(-5); // returns NaN as number cannot be negative squareroot(NaN); // returns NaN as number cannot be NaN Keep in mind that the square root of negative numbers doesn\u0026rsquo;t exist among the set of real numbers so JavaScript returns NaN. Square root of negative numbers is an imaginary number which is represented by i i.e. √-1 = i\nMath Max The Math.max(value1, value2, value3, ...) function returns the largest value out of given values.\nMath.max(1, 3, 2, 0, -1); // returns 3 If any argument cannot be converted to a number, NaN is returned.\nMath.max(1, 3, 2, \u0026#39;0\u0026#39;, -1); // returns 3 as \u0026#39;0\u0026#39; is converted to numeric 0  Math.max(1, 3, 2, \u0026#39;zero\u0026#39;, -1); // returns NaN as \u0026#39;zero\u0026#39; cannot be converted to numeric value Find the largest number from an array Let\u0026rsquo;s use Math.max function to find a largest number from an array in three ways:-\n① Using spread operator ...\nconst numbers = [1, 2, 3, 4, 5]; Math.max(...numbers); // returns 5 ② Using function prototype apply() method\nconst numbers = [1, 2, 3, 4, 5]; Math.max.apply(null, numbers); // returns 5 ③ Using Array.reduce() method\nconst numbers = [1, 2, 3, 4, 5]; numbers.reduce((a,b) =\u0026gt; Math.max(a,b)); // returns 5 However, both spread (...) and apply() will either fail or return the wrong result if the array has too many elements, because they try to pass the array elements as function parameters. The Array.reduce() method does not have this problem.\nMath Min The Math.min(value1, value2, value3, ...) function returns the smallest value out of given values.\nUsage example of Math.min is same as Math.max function.\nMath.min(1, 3, 2, 0, -1); // returns -1 Math.min(1, 3, 2, \u0026#39;0\u0026#39;, -1); // returns -1 Math.min(1, 3, 2, \u0026#39;zero\u0026#39;, -1); // returns NaN  const numbers = [1, 2, 3, 4, 5]; Math.min(...numbers); // returns 1 Math.min.apply(null, numbers); // returns 1 numbers.reduce((a,b) =\u0026gt; Math.min(a,b)); // returns 1 Math Random The Math.random() functions returns a floating point random number between 0 (inclusive) to 1 (exclusive)\n0 ≤ Math.random() \u0026lt; 1 Let\u0026rsquo;s create some useful methods using Math.random() function:\nGenerate a random integer given the max range Let\u0026rsquo;s first create a method getRandomInt, which returns a random integer given the max range\nconst getRandomInt = (max) =\u0026gt; Math.floor(Math.random() * max) + 1; Let\u0026rsquo;s use this method to find a random user name from the given array\nconst userList = [\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;, \u0026#34;David\u0026#34;, \u0026#34;Eric\u0026#34;, \u0026#34;Franklin\u0026#34;, \u0026#34;Gavin\u0026#34;, \u0026#34;Harry\u0026#34;, \u0026#34;Iris\u0026#34;, \u0026#34;Joey\u0026#34;, \u0026#34;Kate\u0026#34;, \u0026#34;Leo\u0026#34;, \u0026#34;Monica\u0026#34;, \u0026#34;Nancy\u0026#34;, \u0026#34;Oscar\u0026#34;, \u0026#34;Phoebe\u0026#34;, \u0026#34;Quinn\u0026#34;, \u0026#34;Ross\u0026#34;, \u0026#34;Sofia\u0026#34;, \u0026#34;Tyler\u0026#34;, \u0026#34;Umar\u0026#34;, \u0026#34;Victor\u0026#34;, \u0026#34;Wilson\u0026#34;, \u0026#34;Xena\u0026#34;, \u0026#34;Yasmine\u0026#34;, \u0026#34;Zara\u0026#34;]; const getRandomUser = () =\u0026gt; userList[getRandomInt(userList.length)]; console.log(getRandomUser()); // Wilson console.log(getRandomUser()); // Charlie console.log(getRandomUser()); // Leo console.log(getRandomUser()); // Joey console.log(getRandomUser()); // Gavin \nGenerate a random integer between two values (inclusive) Let\u0026rsquo;s first create a method getRandomIntInclusive, which returns a random integer between two values (inclusive)\nconst getRandomIntInclusive = (min, max) =\u0026gt; { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min + 1)) + min; }; Let\u0026rsquo;s use this method to generate an array of 10 elements with two-digits random numbers i.e. between 10 to 99\nvar numbers = []; var min = 10; var max = 99; for ( var i = 0; i \u0026lt; 10; i++ ) { numbers.push(getRandomIntInclusive(min, max)); } console.log(numbers); // [25, 55, 95, 51, 47, 10, 74, 86, 74, 77] \nShuffle the elements of an array This is very interesting use of Math.random() function with Array.sort() functions to shuffle elements of an array. Let\u0026rsquo;s create our shuffleElements method:\nconst shuffleElements = (list) =\u0026gt; list.sort(() =\u0026gt; Math.random() - 0.5); The idea here is generate random number using Math.random() between -0.5 to 0.5 and feed it to Array.sort() function which sort an array based on returned value is +ve, or 0, or -ve\nLet\u0026rsquo;s use this method:\nconst list = [1, 2, 3, 4, 5, 6, 7, 8, 9]; console.log(shuffleElements(list)); // [6, 1, 2, 4, 3, 9, 5, 8, 7]  console.log(shuffleElements(list)); // [9, 6, 8, 1, 2, 7, 4, 5, 3]  console.log(shuffleElements(list)); // [6, 7, 3, 1, 2, 5, 8, 9, 4] Math Abs The Math.abs(x) function returns the absolute of the a number i.e. |x|\nMath.abs(\u0026#39;-1\u0026#39;); // 1 Math.abs(-2); // 2 Math.abs(null); // 0 Math.abs(\u0026#39;\u0026#39;); // 0 Math.abs([]); // 0 Math.abs([2]); // 2 Math.abs([1,2]); // NaN Math.abs({}); // NaN Math.abs(\u0026#39;string\u0026#39;); // NaN Math.abs(); // NaN Find absolute difference between two numbers Let\u0026rsquo;s use Math.abs() to find the absolute difference between two given numbers:\nconst difference = (a, b) =\u0026gt; Math.abs(a-b); console.log(difference(3, 5)); // 2 console.log(difference(5, 3)); // 2 Math Ceil The Math.ceil(x) function is used to round off the given number towards ceiling means upward direction.\nx ≤ Math.ceil(x) ≤ x+1 Math.ceil(0.95); // 1 Math.ceil(45.95); // 46 Math.ceil(45.05); // 46 Math.ceil(-0.95); // -0 Math.ceil(-45.05); // -45 Math.ceil(-45.95); // -45  Math.ceil(null); // 0 Math Floor The Math.floor(x) function is used to round off the given number towards floor means downward direction.\nx-1 ≤ Math.floor(x) ≤ x Math.floor(0.95); // 0 Math.floor(45.95); // 45 Math.floor(45.05); // 45 Math.floor(-0.95); // -1 Math.floor(-45.05); // -46 Math.floor(-45.95); // -46  Math.floor(null); // 0 Get a fraction part of a number Let\u0026rsquo;s create a method fraction to get a fraction part of the number using Math.floor() and Math.abs() functions:\nconst fraction = (x) =\u0026gt; Math.abs(x) - Math.floor(Math.abs(x)); fraction(45.95); // 0.95 fraction(45.05); // 0.05 fraction(-45.95); // 0.95 fraction(-45.05); // 0.05 Get quotient and remainder of a division of two whole numbers The Math.floor() and % can be used find quotient and remainder of a division of two whole numbers respectively:\nvar dividend = 14; var divisor = 3; console.log(\u0026#34;quotient\u0026#34;, Math.floor(dividend/divisor)); console.log(\u0026#34;remainder\u0026#34;, dividend % divisor); // quotient 4 // remainder 2 Math Round The Math.round(x) function is used to round off the given number to the nearest integer in any direction, upward or downward.\nconsole.log(Math.round(0.9)); // 1  console.log(Math.round(5.95), Math.round(5.5), Math.round(5.05)); // 6 6 5  console.log(Math.round(-5.05), Math.round(-5.5), Math.round(-5.95)); // -5 -5 -6 Math Trunc The Math.trunc(x) function returns the integer part of a number by removing decimal part.\nMath.trunc(0.123); // 0 Math.trunc(12.34); // 12 Math.trunc(-0.123); // -0 Math.trunc(-12.34); // -12 Math.trunc(\u0026#39;foo\u0026#39;); // NaN Note that Math.trunc(x) function do not apply any rounding logic and simply truncate the dot and decimal part of the number.\nCreate our own truncate method Let\u0026rsquo;s create our own truncate methods using Math.ceil() and Math.floor() functions:\nconst truncate = (x) =\u0026gt; x \u0026lt; 0 ? Math.ceil(x) : Math.floor(x); truncate(0.123); // 0 truncate(12.34); // 12 truncate(-0.123); // -0 truncate(-12.34); // -12 truncate(\u0026#39;foo\u0026#39;); // NaN Remaining Math Functions We have covered most of the frequently used Math Object functions in JavaScript in details. These are the list of remaining Math functions which might be required in complex mathematical calculation.\n   Method Description     acos(x) Returns the arccosine of x, in radians   acosh(x) Returns the hyperbolic arccosine of x   asin(x) Returns the arcsine of x, in radians   asinh(x) Returns the hyperbolic arcsine of x   atan(x) Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians   atan2(y, x) Returns the arctangent of the quotient of its arguments   atanh(x) Returns the hyperbolic arctangent of x   cbrt(x) Returns the cubic root of x   cos(x) Returns the cosine of x (x is in radians)   cosh(x) Returns the hyperbolic cosine of x   exp(x) Returns the value of ex, where e is Euler\u0026rsquo;s number   expm1(x) Returns the value of (ex-1), where e is Euler\u0026rsquo;s number   log(x) Returns the natural logarithm (base e) of x   sin(x) Returns the sine of x (x is in radians)   sinh(x) Returns the hyperbolic sine of x   tan(x) Returns the tangent of an angle   tanh(x) Returns the hyperbolic tangent of a number   ","permalink":"https://codingnconcepts.com/javascript/math-constants-and-functions-in-javascript/","tags":["Javascript Core"],"title":"Math Constants and Functions in JavaScript"},{"categories":["Spring Boot"],"contents":"In this tutorial, we\u0026rsquo;ll learn how to map Jackson JSON request and response in Spring Boot Application with various Jackson configurations.\nJackson JSON Mapper When you create a @RestController in a Spring Boot application to define API endpoints then Jackson JSON ObjectMapper is default HTTP Converter of your REST application which does two things:\n Convert the incoming JSON Request Body to Java Object of your method @RequestBody argument. Generally used in POST HTTP methods. Convert the returned Java Object to JSON Response. Generally used in GET HTTP methods.  Its good to know that the process of converting:\n Java Object to JSON is known as Marshalling, or Serialization, and JSON to Java Object is called Unmarshalling, or Deserialization  Examples Let\u0026rsquo;s define a UserController with GET and POST HTTP methods:\npackage com.example.api.controller; @RestController @RequestMapping(\u0026#34;/users\u0026#34;) public class UserController { @Autowired private UserService userService; @GetMapping public Users getAllUsers() { return userService.getAllUsers(); } @GetMapping(\u0026#34;/{id}\u0026#34;) public User getUserById(@PathVariable Long id) { return userService.getUserById(id); } @PostMapping @ResponseStatus(HttpStatus.CREATED) public Long createUser(@RequestBody User user) { return userService.createUser(user); } } Here is our User Object Model for JSON request and response mapping:\npackage com.example.api.model; public class User { private Long id; private String name; private LocalDate dateOfBirth; private LocalDateTime lastLogin; /* Getters and Setters */\t} Let\u0026rsquo;s look at various important configurations and their impact on API request and response\nPrevent Failure on Unknown Property in JSON Request Body If there are unknown properties in JSON Request Body which cannot be mapped to Java Object then Jackson ObjectMapper throw UnrecognizedPropertyException. This feature is enabled by default.\nLet\u0026rsquo;s add extra field gender in POST request body which is not there in User request mapping Object. It will throw exception.\nspring.jackson.deserialization.FAIL_ON_UNKNOWN_PROPERTIES = true (default)\napplication.yml spring: jackson: deserialization: FAIL_ON_UNKNOWN_PROPERTIES: true Request curl -X POST \\ http://localhost:8080/users \\ -H 'cache-control: no-cache' \\ -H 'content-type: application/json' \\ -d '{ \u0026quot;id\u0026quot;: 1, \u0026quot;name\u0026quot;: \u0026quot;Ashish\u0026quot;, \u0026quot;dateOfBirth\u0026quot;: \u0026quot;1986-08-22\u0026quot;, \u0026quot;gender\u0026quot;: \u0026quot;male\u0026quot; }' Response Error JSON parse error: Unrecognized field \u0026quot;gender\u0026quot; (class com.example.api.model.User), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \u0026quot;gender\u0026quot; (class com.example.api.model.User), not marked as ignorable (3 known properties: \u0026quot;dateOfBirth\u0026quot;, \u0026quot;id\u0026quot;, \u0026quot;name\u0026quot;]) We can disable this feature to allow unknown properties (or extra fields) in our JSON Request Body. Please note that if you are using Spring Boot\u0026rsquo;s default ObjectMapper then you don\u0026rsquo;t need to do anything as this feature is disabled by default.\nWe see that POST request did not fail this time and returned id of created user.\nspring.jackson.deserialization.FAIL_ON_UNKNOWN_PROPERTIES = false\napplication.yml spring: jackson: deserialization: FAIL_ON_UNKNOWN_PROPERTIES: false Request curl -X POST \\ http://localhost:8080/users \\ -H 'cache-control: no-cache' \\ -H 'content-type: application/json' \\ -d '{ \u0026quot;id\u0026quot;: 1, \u0026quot;name\u0026quot;: \u0026quot;Ashish\u0026quot;, \u0026quot;dateOfBirth\u0026quot;: \u0026quot;1986-08-22\u0026quot;, \u0026quot;gender\u0026quot;: \u0026quot;male\u0026quot; }' Response 1 \nDon\u0026rsquo;t allow certain property in JSON Request Body Sometime we don\u0026rsquo;t want certain properties such as id to be sent in request body because you would be generating that id in backend. In such case you can annotate such properties with @JsonIgnore and enable FAIL_ON_IGNORED_PROPERTIES feature.\nThis feature throw IgnoredPropertyException if ignored properties are passed in JSON Request Body. This feature is disabled by default.\nWe can annotate the id property in this way:\npackage com.example.api.model; public class User { @JsonIgnore private Long id; private String name; private LocalDate dateOfBirth; private LocalDateTime lastLogin; /* Getters and Setters */\t} Let\u0026rsquo;s see the default behavior first where it allow ignored properties:\nspring.jackson.deserialization.FAIL_ON_IGNORED_PROPERTIES = false (default)\napplication.yml spring: jackson: deserialization: FAIL_ON_IGNORED_PROPERTIES: false Request curl -X POST \\ http://localhost:8080/users \\ -H 'cache-control: no-cache' \\ -H 'content-type: application/json' \\ -d '{ \u0026quot;id\u0026quot;: 1, \u0026quot;name\u0026quot;: \u0026quot;Ashish\u0026quot;, \u0026quot;dateOfBirth\u0026quot;: \u0026quot;1986-08-22\u0026quot; }' Response Error 1 We see that POST request throw exception when we pass id in JSON Request Body once we enable this feature\nspring.jackson.deserialization.FAIL_ON_IGNORED_PROPERTIES = true\napplication.yml spring: jackson: deserialization: FAIL_ON_IGNORED_PROPERTIES: true Request curl -X POST \\ http://localhost:8080/users \\ -H 'cache-control: no-cache' \\ -H 'content-type: application/json' \\ -d '{ \u0026quot;id\u0026quot;: 1, \u0026quot;name\u0026quot;: \u0026quot;Ashish\u0026quot;, \u0026quot;dateOfBirth\u0026quot;: \u0026quot;1986-08-22\u0026quot; }' Response JSON parse error: Ignored field \u0026quot;id\u0026quot; (class com.example.api.model.User) encountered; mapper configured not to allow this; nested exception is com.fasterxml.jackson.databind.exc.IgnoredPropertyException: Ignored field \u0026quot;id\u0026quot; (class com.example.api.model.User) encountered; mapper configured not to allow this (3 known properties: \u0026quot;dateOfBirth\u0026quot;, \u0026quot;name\u0026quot;, \u0026quot;lastLogin\u0026quot;]) \nPretty Print JSON Response API JSON responses are not pretty print (formatted) by default.\nspring.jackson.serialization.INDENT_OUTPUT = false (default)\napplication.yml spring: jackson: serialization: INDENT_OUTPUT: false Request curl -X GET http://localhost:8080/users Response {\u0026quot;users\u0026quot;:[{\u0026quot;id\u0026quot;:1,\u0026quot;name\u0026quot;:\u0026quot;Adam\u0026quot;,\u0026quot;dateOfBirth\u0026quot;:\u0026quot;1950-01-01\u0026quot;},{\u0026quot;id\u0026quot;:2,\u0026quot;name\u0026quot;:\u0026quot;Bob\u0026quot;,\u0026quot;dateOfBirth\u0026quot;:\u0026quot;1990-10-30\u0026quot;},{\u0026quot;id\u0026quot;:3,\u0026quot;name\u0026quot;:\u0026quot;Charlie\u0026quot;,\u0026quot;dateOfBirth\u0026quot;:\u0026quot;1979-07-26\u0026quot;}]} We can pretty print JSON Response by turning on the INDENT_OUTPUT property . We see that JSON response is formatted after that.\nspring.jackson.serialization.INDENT_OUTPUT = true\napplication.yml spring: jackson: serialization: INDENT_OUTPUT: true Request curl -X GET http://localhost:8080/users Response { \u0026quot;users\u0026quot; : [ { \u0026quot;id\u0026quot; : 1, \u0026quot;name\u0026quot; : \u0026quot;Adam\u0026quot;, \u0026quot;dateOfBirth\u0026quot; : \u0026quot;1950-01-01\u0026quot; }, { \u0026quot;id\u0026quot; : 2, \u0026quot;name\u0026quot; : \u0026quot;Bob\u0026quot;, \u0026quot;dateOfBirth\u0026quot; : \u0026quot;1990-10-30\u0026quot; }, { \u0026quot;id\u0026quot; : 3, \u0026quot;name\u0026quot; : \u0026quot;Charlie\u0026quot;, \u0026quot;dateOfBirth\u0026quot; : \u0026quot;1979-07-26\u0026quot; } ] } \nFormat Date and DateTime properties in JSON Response Date and DateTime fields in Java Object, are converted into numeric timestamp by default during JSON serialization.\nspring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS = true (default)\napplication.yml spring: jackson: serialization: WRITE_DATES_AS_TIMESTAMPS: true Request curl -X GET http://localhost:8080/users/1 Response { \u0026quot;id\u0026quot; : 1, \u0026quot;name\u0026quot; : \u0026quot;Adam\u0026quot;, \u0026quot;dateOfBirth\u0026quot; : [ 1950, 1, 1 ], \u0026quot;lastLogin\u0026quot; : [ 2020, 7, 3, 0, 26, 22, 211000000 ] } We can disable this feature to allow Jackson to convert Date and DateTime fields to human readable String format. Please note that if you are using Spring Boot\u0026rsquo;s default ObjectMapper then this feature is disabled by default.\nspring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS = false\napplication.yml spring: jackson: serialization: WRITE_DATES_AS_TIMESTAMPS: false Request curl -X GET http://localhost:8080/users/1 Response { \u0026quot;id\u0026quot; : 1, \u0026quot;name\u0026quot; : \u0026quot;Adam\u0026quot;, \u0026quot;dateOfBirth\u0026quot; : \u0026quot;1950-01-01\u0026quot;, \u0026quot;lastLogin\u0026quot; : \u0026quot;2020-07-03T00:28:32.394\u0026quot; } We see that date and time are in human readable format in JSON response after disabling this feature. We can further customize the Date and DateTime field by annotating them with @JsonFormat annotations in our User Object Model.\npackage com.example.api.model; public class User { private Long id; private String name; @JsonFormat(pattern=\u0026#34;dd MMM yyyy\u0026#34;) private LocalDate dateOfBirth; @JsonFormat(pattern=\u0026#34;dd MMM yyyy hh:mm:ss\u0026#34;) private LocalDateTime lastLogin; @JsonFormat(pattern = \u0026#34;yyyy-MM-dd@HH:mm:ss.SSSXXX\u0026#34;, locale = \u0026#34;en_SG\u0026#34;, timezone = \u0026#34;Asia/Singapore\u0026#34;) private ZonedDateTime zonedDateTime; /* Getters and Setters */\t} Output will be something like this after applying @JsonFormat annotations:\napplication.yml spring: jackson: serialization: WRITE_DATES_AS_TIMESTAMPS: false Request curl -X GET http://localhost:8080/users/1 Response { \u0026quot;id\u0026quot; : 1, \u0026quot;name\u0026quot; : \u0026quot;Adam\u0026quot;, \u0026quot;dateOfBirth\u0026quot; : \u0026quot;01 Jan 1950\u0026quot;, \u0026quot;lastLogin\u0026quot; : \u0026quot;03 Jul 2020 01:03:34\u0026quot;, \u0026quot;zonedDateTime\u0026quot; : \u0026quot;2020-07-03@01:03:34.467+08:00\u0026quot; } Please note that once you apply @JsonFormat annotation on Date and DateTime fields, same format would be used for JSON deserialization. That means you need to pass date or datetime parameters in JSON request body of an HTTP request in same format.\nConclusion We looked at some of the useful configurations. Here is the full list of Jackson serialization and deserialization properties configurable in Spring Boot Application using application.yml, or application.properties file.\napplication.yml spring: jackson: serialization: CLOSE_CLOSEABLE: true/false EAGER_SERIALIZER_FETCH: true/false FAIL_ON_EMPTY_BEANS: true/false FAIL_ON_SELF_REFERENCES: true/false FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS: true/false FLUSH_AFTER_WRITE_VALUE: true/false INDENT_OUTPUT: true/false ORDER_MAP_ENTRIES_BY_KEYS: true/false USE_EQUALITY_FOR_OBJECT_ID: true/false WRAP_EXCEPTIONS: true/false WRAP_ROOT_VALUE: true/false WRITE_BIGDECIMAL_AS_PLAIN: true/false WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS: true/false WRITE_DATES_AS_TIMESTAMPS: true/false WRITE_DATES_WITH_ZONE_ID: true/false WRITE_DATE_KEYS_AS_TIMESTAMPS: true/false WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS: true/false WRITE_DURATIONS_AS_TIMESTAMPS: true/false WRITE_EMPTY_JSON_ARRAYS: true/false WRITE_ENUMS_USING_INDEX: true/false WRITE_ENUMS_USING_TO_STRING: true/false WRITE_ENUM_KEYS_USING_INDEX: true/false WRITE_NULL_MAP_VALUES: true/false WRITE_SELF_REFERENCES_AS_NULL: true/false WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED: true/false deserialization: ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT: true/false ACCEPT_EMPTY_STRING_AS_NULL_OBJECT: true/false ACCEPT_FLOAT_AS_INT: true/false ACCEPT_SINGLE_VALUE_AS_ARRAY: true/false ADJUST_DATES_TO_CONTEXT_TIME_ZONE: true/false EAGER_DESERIALIZER_FETCH: true/false FAIL_ON_IGNORED_PROPERTIES: true/false FAIL_ON_INVALID_SUBTYPE: true/false FAIL_ON_MISSING_CREATOR_PROPERTIES: true/false FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY: true/false FAIL_ON_NULL_CREATOR_PROPERTIES: true/false FAIL_ON_NULL_FOR_PRIMITIVES: true/false FAIL_ON_NUMBERS_FOR_ENUMS: true/false FAIL_ON_READING_DUP_TREE_KEY: true/false FAIL_ON_TRAILING_TOKENS: true/false FAIL_ON_UNKNOWN_PROPERTIES: true/false FAIL_ON_UNRESOLVED_OBJECT_IDS: true/false READ_DATE_TIMESTAMPS_AS_NANOSECONDS: true/false READ_ENUMS_USING_TO_STRING: true/false READ_UNKNOWN_ENUM_VALUES_AS_NULL:true/false READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE: true/false UNWRAP_ROOT_VALUE: true/false UNWRAP_SINGLE_VALUE_ARRAYS: true/false USE_BIG_DECIMAL_FOR_FLOATS: true/false USE_BIG_INTEGER_FOR_INTS: true/false USE_JAVA_ARRAY_FOR_JSON_ARRAY: true/false USE_LONG_FOR_INTS: true/false WRAP_EXCEPTIONS: true/false Please note that spring boot configuration support Relaxed Binding that means properties can be in uppercase or lowercase, both are valid.\nspring: jackson: serialization: INDENT_OUTPUT: true is same as\nspring: jackson: serialization: indent_output: true That\u0026rsquo;s it for now. I\u0026rsquo;ll keep updating this post with more practical use cases as I come across.\n Download the source code for these examples from github/springboot-api\n","permalink":"https://codingnconcepts.com/spring-boot/jackson-json-request-response-mapping/","tags":["Spring Boot REST"],"title":"Jackson JSON Request and Response Mapping in Spring Boot"},{"categories":["Hugo"],"contents":"In this tutorial, we\u0026rsquo;ll learn how to add sub menu (nested menu) in Hugo Website.\nOverview When you generate a website using Hugo static site generator, you generally show a menu header on website page and other pages. Sometime you need a support for nested menu structure which is not readily available with Hugo.\nYou can follow these steps to support nested menu structure:-\n Update config.toml file to provide menu and submenu configuration. Create layouts/partials/menu.html to generate HTML from menu and submenu configuration. Use menu partial in either layouts/partials/header.html or layouts/_defaults/baseof.html depending upon the theme you are using. Finally you need to update your style.css file with menu related CSS  Follow the steps:- Update config.toml Let\u0026rsquo;s update config.toml with menu and submenu configuration to generate a nested menu structure like this:\n config.toml ... [menu] [[menu.main]] identifier = \u0026quot;home\u0026quot; name = \u0026quot;Home\u0026quot; url = \u0026quot;/\u0026quot; weight = 1 [[menu.main]] identifier = \u0026quot;category\u0026quot; name = \u0026quot;Category\u0026quot; url = \u0026quot;/category\u0026quot; weight = 2 [[menu.main]] identifier = \u0026quot;category1\u0026quot; name = \u0026quot;Category1\u0026quot; url = \u0026quot;/tags/category1\u0026quot; parent = \u0026quot;category\u0026quot; weight = 1 [[menu.main]] identifier = \u0026quot;category2\u0026quot; name = \u0026quot;Category2\u0026quot; url = \u0026quot;/tags/category2\u0026quot; parent = \u0026quot;category\u0026quot; weight = 2 [[menu.main]] identifier = \u0026quot;category3\u0026quot; name = \u0026quot;Category3\u0026quot; url = \u0026quot;/tags/category3\u0026quot; parent = \u0026quot;category\u0026quot; weight = 3 [[menu.main]] identifier = \u0026quot;another-category\u0026quot; name = \u0026quot;Another Category\u0026quot; url = \u0026quot;/another-category\u0026quot; weight = 3 [[menu.main]] identifier = \u0026quot;another-category1\u0026quot; name = \u0026quot;Another Category1\u0026quot; url = \u0026quot;/tags/another-category1\u0026quot; parent = \u0026quot;another-category\u0026quot; weight = 1 [[menu.main]] identifier = \u0026quot;another-category2\u0026quot; name = \u0026quot;Another Category2\u0026quot; url = \u0026quot;/tags/another-category2\u0026quot; parent = \u0026quot;another-category\u0026quot; weight = 2 [[menu.main]] identifier = \u0026quot;about\u0026quot; name = \u0026quot;About Us\u0026quot; url = \u0026quot;/about/\u0026quot; weight = 4 You should understand each field under [[menu.main]]:\n identifier should be unique name of menu within the menu structure. It is used to identify menu, submenu and their relation by hugo internally. name should be the name which you want to display on the menu item. url is a relative URL which will be opened when you click on the menu item. weight is for sequencing the menu items. Menu items with less weight appear first in the menu. Same is applicable for submenu, submenu items with less weight appear first in the dropdown. parent is used in submenu item only to tell who is the parent of the submenu. You use the identifier of the parent menu in this field.  \nCreate layouts/partials/menu.html Now we are going to use menu and submenu configuration from config.toml file to create our menu.html partial as below:\nlayouts/partials/menu.html This is the basic menu.html if you want create your own menu from scratch.\n\u0026lt;nav class=\u0026quot;nav\u0026quot;\u0026gt; \u0026lt;ul class=\u0026quot;menu\u0026quot;\u0026gt; {{ range .Site.Menus.main }} \u0026lt;li class=\u0026quot;{{ if $currentPage.HasMenuCurrent \u0026quot;main\u0026quot; . }}active{{ end }}\u0026quot;\u0026gt; \u0026lt;span\u0026gt;{{ .Name }}\u0026lt;/span\u0026gt; {{ if .HasChildren }} \u0026lt;span class=\u0026quot;drop-icon\u0026quot; for=\u0026quot;{{ .Name }}\u0026quot;\u0026gt;▾\u0026lt;/span\u0026gt; \u0026lt;ul class=\u0026quot;sub-menu\u0026quot;\u0026gt; {{ range .Children }} \u0026lt;li class=\u0026quot;{{ if $currentPage.HasMenuCurrent \u0026quot;main\u0026quot; . }}active{{ end }}\u0026quot;\u0026gt; \u0026lt;span\u0026gt;{{ .Name }}\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; This is the menu.html of my blog website created using Hugo Mainroad Theme.\n{{- if .Site.Menus.main }} \u0026lt;nav class=\u0026quot;menu\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;menu__btn\u0026quot; aria-haspopup=\u0026quot;true\u0026quot; aria-expanded=\u0026quot;false\u0026quot; tabindex=\u0026quot;0\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;menu__btn-title\u0026quot; tabindex=\u0026quot;-1\u0026quot;\u0026gt;{{ T \u0026quot;menu_label\u0026quot; }}\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;ul class=\u0026quot;menu__list\u0026quot;\u0026gt; {{- $currentNode := . }} {{- range .Site.Menus.main }} {{- if .Name }} {{- if .HasChildren }} \u0026lt;li class=\u0026quot;menu__item menu__dropdown{{ if or ($currentNode.IsMenuCurrent \u0026quot;main\u0026quot; .) ($currentNode.HasMenuCurrent \u0026quot;main\u0026quot; .) }} menu__item--active{{ end }}\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;menu__link\u0026quot; href=\u0026quot;{{ .URL }}\u0026quot;\u0026gt; {{ .Pre }} \u0026lt;span class=\u0026quot;menu__text\u0026quot;\u0026gt;{{ .Name }}\u0026lt;/span\u0026gt; \u0026lt;label class=\u0026quot;drop-icon\u0026quot; for=\u0026quot;{{ .Name }}\u0026quot;\u0026gt;▾\u0026lt;/label\u0026gt; {{ .Post }} \u0026lt;/a\u0026gt; \u0026lt;input type=\u0026quot;checkbox\u0026quot; id=\u0026quot;{{ .Name }}\u0026quot;\u0026gt; \u0026lt;ul class=\u0026quot;submenu__list\u0026quot;\u0026gt; {{ range .Children }} \u0026lt;li class=\u0026quot;menu__item{{ if or ($currentNode.IsMenuCurrent \u0026quot;main\u0026quot; .) ($currentNode.HasMenuCurrent \u0026quot;main\u0026quot; .) }} menu__item--active{{ end }}\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;menu__link\u0026quot; href=\u0026quot;{{ .URL }}\u0026quot;\u0026gt; {{ .Pre }} \u0026lt;span class=\u0026quot;menu__text\u0026quot;\u0026gt;{{ .Name }}\u0026lt;/span\u0026gt; {{ .Post }} \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- else }} \u0026lt;li class=\u0026quot;menu__item{{ if or ($currentNode.IsMenuCurrent \u0026quot;main\u0026quot; .) ($currentNode.HasMenuCurrent \u0026quot;main\u0026quot; .) }} menu__item--active{{ end }}\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;menu__link\u0026quot; href=\u0026quot;{{ .URL }}\u0026quot;\u0026gt; {{ .Pre }} \u0026lt;span class=\u0026quot;menu__text\u0026quot;\u0026gt;{{ .Name }}\u0026lt;/span\u0026gt; {{ .Post }} \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{- end }} {{- end }} {{- end }} \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; {{ else -}} \u0026lt;div class=\u0026quot;divider\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; {{- end }} Note that if you are using the theme, then you might already have menu.html partial. In that case just update the existing menu.html partial. Things to note in the above partial is use of {{- if .HasChildren }} condition to check if menu has submenu children or not. If it is having submenu children, then we loop them through using {{ range .Children }}\nAlso note that you might need to add classes to the HTML elements as per the theme you are using.\nUse layouts/partials/menu.html You do not need to worry about this step if the theme which you are using already have menu.html partial, otherwise use this partial in either layouts/partials/header.html or layouts/defaults/baseof.html depending upon the theme you are using.\nUpdate your CSS This is the most important part of nested menu structure. I struggled a lot to create the right CSS for above menu.html partial. Here is relevant part of the CSS which you need to add in your existing CSS for nested menu structure to work.\nstatic/css/style.css /* Main menu */ .no-js .menu__btn { display: none; } .menu__btn { display: block; width: 100%; padding: 0; font: inherit; color: #fff; background: #2a2a2a; border: 0; outline: 0; } .menu__btn-title { position: relative; display: block; padding: 10px 15px; padding: 0.625rem 0.9375rem; font-weight: 700; text-align: right; text-transform: uppercase; cursor: pointer; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; -o-user-select: none; user-select: none; } :focus \u0026gt; .menu__btn-title { box-shadow: inset 0 0 1px 3px #e22d30; } button:not(:-moz-focusring):focus \u0026gt; .menu__btn-title { box-shadow: none; } .menu__btn:focus, .menu__btn-title:focus { outline: 0; } .js .menu__btn--active { color: #e22d30; } .menu__list, .submenu__list { list-style: none; background: #2a2a2a; } .menu__item:hover \u0026gt; a { color: #ffa500; } .menu__item:first-child { border: 0; } .menu__item--active { background: #e22d30; } .menu__link { display: block; padding: 10px 15px; padding: 0.625rem 0.9375rem; font-weight: 700; color: #fff; text-transform: uppercase; } .menu__list .menu__item .submenu__list { background: #2a2a2a; visibility: hidden; opacity: 0; position: absolute; max-width: 15rem; transition: all 0.5s ease; border-top: 5px solid #e22d30; display: none; } .menu__item.menu__dropdown input[type=\u0026#34;checkbox\u0026#34;] { display: none; } .menu__list .menu__item:hover \u0026gt; .submenu__list, .menu__list .menu__item:focus-within \u0026gt; .submenu__list, .menu__list .menu__item .submenu__list:hover, .menu__list .menu__item .submenu__list:focus { visibility: visible; opacity: 1; display: block; } .menu__link:hover { color: #fff; } .js .menu__list { position: absolute; z-index: 1; width: 100%; visibility: hidden; -webkit-transform: scaleY(0); transform: scaleY(0); -webkit-transform-origin: top left; transform-origin: top left; } .js .menu__list--active { visibility: visible; border-top: 1px solid rgba(255, 255, 255, 0.1); border-bottom: 1px solid rgba(255, 255, 255, 0.1); -webkit-transform: scaleY(1); transform: scaleY(1); } .menu__list--transition { transition: visibility 0.15s ease, transform 0.15s ease, -webkit-transform 0.15s ease; } @media screen and (min-width: 767px) { .menu { border-bottom: 5px solid #e22d30; } .menu__btn { display: none; } .menu__list, .js .menu__list { position: relative; display: -webkit-flex; display: flex; -webkit-flex-wrap: wrap; flex-wrap: wrap; visibility: visible; border: 0; -webkit-transform: none; transform: none; } .menu__item { border-left: 1px solid rgba(255, 255, 255, 0.1); } } @media screen and (max-width: 767px) { .menu__item.menu__dropdown .drop-icon { position: absolute; right: 1rem; top: auto; } .menu__item.menu__dropdown input[type=\u0026#34;checkbox\u0026#34;] + .submenu__list { display: none; } .menu__item.menu__dropdown input[type=\u0026#34;checkbox\u0026#34;]:checked + .submenu__list { border: none; padding-left: 20px; visibility: visible; opacity: 1; display: block; position: relative; max-width: 100%; } } @media screen and (max-width: 620px) { .menu__item.menu__dropdown .drop-icon { position: absolute; right: 1rem; top: auto; } .menu__item.menu__dropdown input[type=\u0026#34;checkbox\u0026#34;] + .submenu__list { display: none; } .menu__item.menu__dropdown input[type=\u0026#34;checkbox\u0026#34;]:checked + .submenu__list { border: none; padding-left: 20px; visibility: visible; opacity: 1; display: block; position: relative; max-width: 100%; } } \nPosts to submenu mapping using Tags Now say you have created menu and submenu structure and now want to do mapping of your posts under each menu and submenu. I generally do it using tags.\nSay, I want to map my posts under Category ➞ Category1, I do that by adding tag in frontmatter like this:\nmyblogpost.md --- tags: - \u0026quot;category1\u0026quot; --- Now Hugo will map you post to the URL /tags/category1. You can use this URL to map submenu in config.toml\nconfig.toml  [[menu.main]] identifier = \u0026quot;category1\u0026quot; name = \u0026quot;Category1\u0026quot; url = \u0026quot;/tags/category1\u0026quot; parent = \u0026quot;category\u0026quot; weight = 1 Conclusion Please note that I am currently using Hugo Mainroad Theme so this example should just work fine for Mainroad theme. For other themes, you need to put extra effort in terms of creating menu.html partial and right CSS for nested menu structure. I hope this tutorial will give you the basic idea in which direction you need to go.\nPlease comment in case you find any issue to follow the tutorial. Thanks for reading.\n","permalink":"https://codingnconcepts.com/hugo/nested-menu-hugo/","tags":["Hugo Partial"],"title":"Add Sub Menu in Hugo Website"},{"categories":["AWS"],"contents":"This step by step guide is very helpful for beginners to create a personal account with AWS.\nCreate your account ① Open this AWS link - Amazon Web Services home page.\n② Choose Create an AWS account. If you signed in to AWS recently, then choose Sign in to the Console.\n ③ Enter your account information:\n Email Address: Be sure that you enter your account information correctly, especially your email address. If you enter your email address incorrectly, you can\u0026rsquo;t access your account. AWS Account Name: Choose a name for your account. You can change this name in your account settings after you sign up. Password: Choose Strong password for your account.  and then choose Continue\n④ Enter your personal information:\n Choose ⦿ Personal Enter your email address and phone number for a root account.  ⑤ Read and accept the AWS Customer Agreement.\n⑥ Choose Create Account and Continue.\nYou receive an email to confirm that your account is created. You can sign in to your new account using the email address and password you registered with. However, you can\u0026rsquo;t use AWS services until you finish activating your account.\nAdd a payment method ⑦ On the Payment Information page, enter the information about your payment method, and then choose Verify and Add.\nYou cannot use AWS services without adding payment method. If you are new to the AWS then most of the services which you will be using like Amazon EC2, Amazon S3, and Amazon DynamoDB comes under free tier so you don\u0026rsquo;t need to worry about much in the beginning. Please go through AWS Free Tier for more details.\nNote: You can always set a Billing Alarm. If your billing goes beyond a certain amount, you will be notified via mail immediately.\nVerify your phone number ⑧ Choose your country or region code and a phone number. Enter a phone number where you can be reached via text messages or voice call. Enter the security check captcha and then choose Send SMS.\n⑨ You will receive a 4-digit verification code on your registered mobile number. Enter the verification code and choose Verify Code.\n⑩ Upon successful verification, choose Continue.\nChoose an AWS Support plan ⑪ On the Select a Support Plan page, choose one of the available Support plans. For a description of the available Support plans and their benefits, see Compare AWS Support Plans. Choose Free for Basic Plan.\nWait for account activation ⑫ you\u0026rsquo;ll receive a confirmation email once account is activated. Check your email and spam folder for the confirmation email. After you receive this email, you have full access to all AWS services.\nNote: Accounts are usually activated within a few minutes, but the process might take up to 24 hours.\nLogin as root user ⑬ Open the Amazon Web Services home page again and choose Sign in to the Console.\n⑭ Choose ⦿ Root User and login to account using your email address and password.\n Congratulations!!! You have successfully created your AWS account.\n\nReference:  AWS Knowledge Center ","permalink":"https://codingnconcepts.com/aws/how-to-create-aws-account/","tags":["AWS"],"title":"A Step-by-Step Guide to Create an AWS Account"},{"categories":["AWS"],"contents":"This step-by-step guide is helpful for beginners trying their hands on machine learning and creating their first AWS DeepRacer model.\nPrerequisite You should have a valid AWS account. If you haven\u0026rsquo;t registered to AWS already, follow this Step-by-step guide to create an AWS Account\nWhat is AWS DeepRacer? AWS DeepRacer is an exciting way for developers to get hands-on experience with machine learning.\nIn AWS DeepRacer, you use a 1/18 scale autonomous car equipped with sensors and cameras. You can use this car in virtual simulator, to train and evaluate. The same car is used in physical AWS DeepRacer global racing league.\nIn AWS DeepRacer, You do this:\n build your car, or choose existing one, create your own reinforcement learning model, or choose from sample models, choose pre-defined racing track, train and evaluate your car on racing track using your model , and finally you compete with others.\n  Reinforcement learning  Reinforcement learning (RL) is an area of machine learning concerned with how an agents should take actions in an environment in order to maximize the notion of cumulative reward. Reinforcement learning is one of three basic machine learning paradigms, alongside supervised learning and unsupervised learning.\n Let\u0026rsquo;s understand the reinforcement learning key terms from AWS DeepRacer perspective:\n AWS DeepRacer Key Terms\n   model is created when you choose a car, racing track and write your reward function. agent is your Car action space is the amount of choices a Car has, for e.g., turn left, turn right, move forward at different speeds. state is position of Car on the track at a point of time. environment is the Racing Track of your Car reward function is a function written in python which returns reward in floating point number. Your car use this reward function in its training and try to accumulate more reward points training phase is when you train your car on racing track using the model you created.\nAlso known as exploration phase where your car explore the racing track, and learn from which route it can get more reward points. evaluating phase is when you evaluate your car after training is completed whether its able to complete the racing track or not. Also known as exploitation phase where your car exploit the learning from training and try to reach the convergence (finish line). The hyper parameters are reinforcement algorithm and training specific parameters which controls the car training process. You car make attempts to find the best route by accumulating reward point in training phase. Attempt starts either from the start line or any part of the track. Attempt ends when car reaches the finish line, or loose the track, or crash. Each of this attempt is called an episode.\n  Reward function Reward function is a python function where you give higher reward points for good behavior and lower reward points for bad behavior.\nHere is sample reward function written in python which gives higher reward points to car for keeping it wheels on track:\ndef reward_function(params): # Read input parameters all_wheels_on_track = params[\u0026#39;all_wheels_on_track\u0026#39;] if all_wheels_on_track: reward = 1.0 # higher reward for car to be on track else reward = 1e-3 # lower reward for car to go outside track return float(reward) When you train your car, it attempts to run at different angles and speed on the track and try to accumulate reward points. In each subsequent attempts, it learns from its previous attempts and try to accumulate more reward points by keeping it wheels on track.\n1. Getting Started ① Go to AWS Services ➞ AWS DeepRacer ➞ Reinforcement Learning ➞ Get Started\n② If it is your first time, you will see some errors. Don\u0026rsquo;t worry. Choose Reset Resources and everything will be fine.\n AWS DeepRacer Get Started\n  This takes about 5 minutes. AWS internally does following things for you:\n Check IAM roles required for DeepRacer, Check AWS DeepRacer resource stack:  Amazon SageMaker and AWS RoboMaker are the brain behind training your model Amazon S3 to store samples and the new models created by you Amazon Kinesis Video Streams for streaming data and simulation video, when your car is training and evaluating Amazon CloudWatch to store and analyze the logs and metrics    You should be well-aware of the AWS services involved in AWS DeepRacer in order to understand the billing when AWS charge you money. Here is the AWS DeepRacer Simulator Architecture:\n AWS DeepRacer Simulator Architecture\n  2. Build your Car You can either use the default Car The Original DeepRacer or build a new vehicle by following these steps:\n① Go to AWS DeepRacer ➞ Reinforcement Learning ➞ Your garage and Choose Build New Vehicle\n② Keep the default setting of Camera and Sensors. Choose Next\n③ Keep the action space settings as below. Choose Next  AWS DeepRacer Action Space for Beginners\n  ④ Enter the name of your car and Choose color. Choose Done\n\nAction Space You car can turn left, turn right, move forward at different speeds. All these choice become the action spaces of the Car. Action space of a Car depends on following parameters:\n Maximum Steering Angle: Max values are between 1 and 30. Steering angle granularity: Possible values are 3, 5 and 7 Maximum speed: Select values between 0.1m/s and 4m/s. Speed granularity: Possible values are 1, 2 and 3  If you choose 5 Steering angles granularity and 3 Speeds granularity then it has total (5*3) = 15 action spaces (all combinations of angles vs speed). A car choose random action out of these 15 action spaces in its trail and errors.\n Action Space = Steering angles granularity * Speeds granularity Note that more the action spaces, more the choices a Car has to choose from. You might get the best finishing time and best time around the curve with more action spaces but it requires a lot of training and your Car might not reach the convergence (finish the racing track). Same is applicable for maximum speed.\nAs a beginner, it is advised to use:\n 3 steering angles and 3 speeds to start with (3*3) = 9 action spaces maximum speed to 1m/s to train your car faster.  Your primary focus while training your car should be on the accuracy and reliability of your model and not the speed or lap time of your Car. Once you have some insights, you can train your car by increasing the action spaces and max speed.\n3. Create Model There are five out of the box models available to use in AWS DeepRacer:\n   Name Description Status Sensors     Sample-Head-to-Head Model trained with reward function for head to head racing Ready Stereo camera, Lidar   Sample-Object-Avoidance Model trained with reward function that avoids objects Ready Stereo camera   Sample-Time-Trial-PreventZigZag Model trained with reward function that penalizes the agent for steering too much Ready Camera   Sample-Time-Trial-StayOnTrack Model trained with reward function that incentivizes the agent to stay inside the track borders Ready Stereo camera   Sample-Time-Trial-FollowCenterLine Model trained with reward function that incentivizes the agent to follow the center line Ready Camera    I recommend to click on each model, Go to their Training Configuration ➞ Reward Function and Action Space which will give you an idea on how to design your own model.\nLet\u0026rsquo;s create our own model:\n① Go to AWS DeepRacer ➞ Reinforcement Learning ➞ Your models and Choose Create Model\n② Enter Model name and description\n③ Choose a Racing Track. To follow with me, Choose ⦿ re:Invent 2018 and Choose Next\n④ Choose a Race Type. To follow with me, Choose ⦿ Time trial\n⑤ Choose an Agent (Car). To follow with me, Choose a car which we created earlier. Alternatively Choose default car \u0026ldquo;The Original DeepRacer\u0026rdquo;\n⑥ Clear Reward Function Code Editor. Copy and Paste following reward function in code editor and Click Validate to make sure this code is valid.\n ⑦ Keep the default setting of Training Algorithm ⦿ PPO and hyperparameters.\n⑧ Enter Stop Condition ➞ Maximum time = 60 minutes.\nNote: Congratulations, You\u0026rsquo;ve configured your model. Next step is to create, train and evaluate your model. Please note that you have not charged anything till this point. Subsequent steps will charge you money based on AWS resource utilization.\n⑨ Once you choose Create Model. AWS resources will be provisioned to train your model for 60 minutes.\n\nReward Graph It is recommended to watch the reward graph and simulator video stream while your car is training. This was a thrilling experience for me to watch the live training of car using my first ever machine learning model.\n AWS DeepRacer Reward Graph and Simulator Video Stream\n  You should know how to read the reward graph in order to understand your model behavior:\n Average Reward is reward points your car is accumulating in each attempt. Average reward line should go up linearly in the perfect scenario but this is rare. This is what you should look:  Average Reward line should go up in the longer time period. That means your car is able to learn from its past failures and able to accumulate more reward points in subsequent attempts. If Average Reward line go down in shorter period then do not worry. That means your car is trying to attempt those directions which return less reward points. Your car would learn from those attempts and won\u0026rsquo;t try them again in subsequent attempts.   There are two phases when your car is training, you will notice them if you are watching simulator video:  Training Phase: Your car trains on different parts of the racing track by starting at random positions. Evaluating Phase: You car starts from the starting point of racing track and try to complete the track.   Average percentage completion (Training) is percentage of track completed in training phase. Since in training phase, main aim of car is to train at different parts of the track, it doesn\u0026rsquo;t complete the track most of the time and hence the graph line remain below and doesn\u0026rsquo;t touch 100% marker. Average percentage completion (Evaluating) is percentage of track completed in evaluating phase. Since in evaluating phase, main aim of car is to complete the track, it should touch the 100% marker and able to finish the racing track. If this graph line is not touching 100% marker then there are higher chances of your model failing in actual race.\n  Hyperparameters Tuning the hyperparameters can improve the quality of your model but it requires a steep learning curve and a lot of trials and errors. As a beginner, it is advised to use default optimized parameters but at the same time, it is good to know how they impact the training of your Car.\n Number of episodes per iteration: Each attempt made by car in training phase is one episode. With Default value, a Car make 20 attempts in one iteration before updating training data to the network. Batch Size: Iterations runs in batches. Batch size controls, how many iterations to be completed before updating training data to the network. Number of Epochs: Number of times to repeat the batches and send optimized training data to network. Larger number of epochs is acceptable when the batch size is large. Learning Rate: Controls the speed your car learns. Large learning rate prevents training data from reaching optimal solution whereas Small learning rate takes longer to learn. Entropy: It is a degree of randomness in the Car\u0026rsquo;s action. Larger the entropy means the more random actions a Car will take for exploration. Discount Factor: It is a factor specifies how much of the future reward contributes to the expected rewards. With larger discount factor, Car looks further into the future to consider rewards. With smaller discount factor, Car only consider immediate rewards.  Take a quick look at hyperparameters:\n   Hyperparamter Advantage of higher values Disadvantage of higher values Default     Batch Size More stable updates Slower training 64   Number of Epochs More stable updates Slower training 10   Learning Rate Car learns faster May struggle to converge 0.0003   Entropy More experimental may lead to better results May struggle to converge 0.01   Discount Factor Model looks farther out Slower training 0.999   Episodes Improves model stability Slower training 20    Personal Experience When i started making my first model, I thought that i will make my first model as master piece. I selected max out configuration i.e. max speed 4m/s and maximum action spaces and training period as 2 hours. It failed miserably. It was not able to finish the track even in 2 hours training period and the reward graphs were all going in wrong direction.\nAfter that I used the model configuration and reward function as mentioned in the post and able to finish the track in 60 min training time. I, then increased the max-speed from 1m/s to 1.5m/s and able to finish the reInvent:2018 track in ~19 seconds.\nI recommend:-\n Make you model with above example. Learn from the reward graph and simulator video. Take one step at a time say increase the max-speed from 1m/s to 1.5m/s and train again. Continue to progress\u0026hellip;  Thanks for Reading. I am still in learning phase of AWS DeepRacer and keep updating this post based on my new findings.\n","permalink":"https://codingnconcepts.com/aws/aws-deepracer/","tags":["AWS","Popular Posts"],"title":"Build Your First AWS DeepRacer Model"},{"categories":["Javascript"],"contents":"In this tutorial, we\u0026rsquo;ll learn the usage of Array Destructuring in JavaScript ES6 with examples.\n Destructuring Assignment is a special syntax introduced in JavaScript ES6 that allows us to extract multiple items from an array or object and assign them to variables, in a single statement.\n Also Read: Object Destructuring\nBasic Array Destructuring We can extract multiple elements from an Array and assign them to variables using Array Destructuring in a single statement.\nArray Destructuring shorthand syntax is quite handy as compare to our traditional way of assigning elements to the variables one by one.\nconst numbers = [1, 2, 3]; //const one = numbers[0]; //Traditional Way //const two = numbers[1]; //const three = numbers[2];  const [one, two, three] = numbers; //Array Destructuring  console.log(one); //1 console.log(two); //2 console.log(three); //3 We can also declare the variables before assigned:\nlet one, two, three; const numbers = [1, 2, 3]; [one, two, three] = numbers; console.log(one); //1 console.log(two); //2 console.log(three); //3 or we can declare them inline:\nconst [one, two, three] = [1, 2, 3]; console.log(one); //1 console.log(two); //2 console.log(three); //3 Default Values We can give default values to the array elements that are undefined or doesn\u0026rsquo;t exist.\nconst numbers = [1, undefined, 3]; const [one = \u0026#34;I\u0026#34;, two = \u0026#34;II\u0026#34;, three = \u0026#34;III\u0026#34;, four = \u0026#34;IV\u0026#34;] = numbers; console.log(one); //1 console.log(two); //II \u0026lt;- default value since \u0026#39;undefined\u0026#39; console.log(three); //3 console.log(four); //IV \u0026lt;- default value since doesn\u0026#39;t exist We see that second element is undefined and fourth element doesn\u0026rsquo;t exist. Default value is assigned to the variable in both the cases.\nNested Array Destructuring We can also perform nested Array Destructuring to get elements from nested array at deeper levels:\nconst numbers = [1, 2, [9, 10, [11, 12]]]; const [one, two, [nine, ten, [eleven, twelve]]] = numbers console.log(one) //1 console.log(nine) //9 console.log(eleven) //11 An alternate for nested Array Destructuring is to use ES9 Array.flat() method, which flatten the nested array into a normal one:\nconst numbers = [1, 2, [9, 10, [11, 12]]]; const flattenNumbers = numbers.flat().flat(); const [one, two, nine, ten, eleven, twelve] = flattenNumbers; console.log(one) //1 console.log(nine) //9 console.log(eleven) //11 Note that Array.flat() method flatten the nested array at one level deep. That is why we have called this method two times numbers.flat().flat() to flatten at two levels deep.\nAlso note that Array.flat() method is shorter version of Array.flatMap() method, both works same:\nconst numbers = [1, 2, [9, 10, [11, 12]]]; const flat = numbers.flat(); const flatMap = numbers.flatMap(x =\u0026gt; x); console.log(flat); // [1, 2, 9, 10, [11, 12]] console.log(flatMap); // [1, 2, 9, 10, [11, 12]]  // flatten one more level deeper const flatDeep = flat.flat(); const flatMapDeep = flatMap.flatMap(x =\u0026gt; x); console.log(flatDeep); // [1, 2, 9, 10, 11, 12] console.log(flatMapDeep); // [1, 2, 9, 10, 11, 12] Skipping Elements using commas We can also skip some of the elements by using comma separator. Let\u0026rsquo;s get the first and fourth element of the array:\nlet [one, , , four] = [1, 2, 3, 4]; console.log(one); //1 console.log(four); //4 Here two extra comma separators , ,  in Array Destructuring skip the second and third element. Similarly let\u0026rsquo;s skip the first and third element:\nlet [ , two , , four] = [1, 2, 3, 4]; console.log(two); //2 console.log(four); //4 Rest of the Elements We can also use rest operator ... to get rest of the elements from an array like this:\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]; const [one, two, three, ...others] = numbers; console.log(one); //1 console.log(two); //1 console.log(three); //1 console.log(others); //[4, 5, 6, 7, 8, 9] Note that rest operator can always be used at last, otherwise it throws error.\nRest and Spread Operators Often we get confused with Rest and Spread operator as both use the same ... syntax. Rest and Spread operators can be used together in the Array Destructuring statement:\n Rest Operator: Used at the left hand side of statement to get the rest of the elements from an array Spread Operator: Used at the right hand side of statement to copy elements to an array  const tens = [10, 20, 30]; const hundreds = [100, 200]; const thousands = [1000]; // Rest operator // Spread Operator const [one, two, ten, twenty, ...others] = [1, 2, ...tens, ...hundreds, ...thousands];; console.log(one); //1 console.log(two); //2 console.log(ten); //10 console.log(twenty); //20 console.log(others); //[30, 100, 200, 1000] Destructuring Return Statement We can extract data from an array returned from a function using Array Destructuring in this way:\nfunction getNumberArray() { return [1, 2, 3, 4, 5]; } var [one, ...others] = getNumberArray(); console.log(one); //1 console.log(others); //[2, 3, 4, 5] Destructuring Function Arguments We can even pass an array into a function and then extract only the elements we want using Array Destructuring in this way:\nconst numbers = [1, 2, 3, 4, 5]; function getNumberArray( [ one, ...others ] ) { console.log(one); //1  console.log(others); //[2, 3, 4, 5] } getNumberArray(numbers); Practical Use Cases Inside for-of loop We can use Array Destructuring inside for-of loop in this way:\nconst numbers = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]; for (let [ a, b, c ] of numbers) { console.log(a, b, c); } // 1 2 3 // 4 5 6 // 7 8 9 Inside forEach function We can iterate through Objects easily using Array Destructuring.\nconst obj = { foo: \u0026#39;bar\u0026#39;, baz: 42 }; Object.entries(obj).forEach(([key, value]) =\u0026gt; console.log(`${key}: ${value}`)); // \u0026#34;foo: bar\u0026#34;, \u0026#34;baz: 42\u0026#34; We see that Object.entries returns an Array with key-value pairs which is extracted using [key, value] destructuring.\nInside Map iteration We can also destruct the key-value pairs of a Map using [key, value] destructuring.\nvar map = new Map(); map.set(\u0026#34;one\u0026#34;, 1); map.set(\u0026#34;two\u0026#34;, 2); for (var [key, value] of map) { console.log(key + \u0026#34; is \u0026#34; + value); } // one is 1 // two is 2 Iterate over only the keys:\nfor (var [key] of map) { // ... } Or iterate over only the values:\nfor (var [,value] of map) { // ... } Swapping values This is quite interesting to swap values using Array Destructuring:\nlet one = 1; let two = 2; [one, two] = [two, one]; console.log(one); //2 console.log(two); //1 Regular Expression Regular expressions functions such as match return an array of matched items, which can be mapped to variables using Array Destructuring:\nconst [a, b, c, d] = \u0026#39;one two three\u0026#39;.match(/\\w+/g); // a = \u0026#39;one\u0026#39;, b = \u0026#39;two\u0026#39;, c = \u0026#39;three\u0026#39;, d = undefined ","permalink":"https://codingnconcepts.com/javascript/array-destructuring/","tags":["JavaScript ES6","Javascript Array"],"title":"How to use Array Destructuring in JavaScript"},{"categories":["Javascript"],"contents":"In this tutorial, we\u0026rsquo;ll learn the usage of Object Destructuring in JavaScript ES6 with examples.\n Destructuring Assignment is a special syntax introduced in JavaScript ES6 that allows us to extract multiple items from an array or object and assign them to variables, in a single statement.\n Also Read: Array Destructuring\nBasic Object Destructuring We can extract multiple properties from an Object and assign them to variables using Object Destructuring in a single statement.\nObject Destructuring shorthand syntax is quite handy as compare to our traditional way of assigning properties to the variables one by one.\nconst person = { name: \u0026#34;John\u0026#34;, company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34; }; // let name = person.name; //Traditional Way // let company = person.company; // let job = person.job;  const { name, company, job } = person; //Object Destructuring We can declare the variables inline as well:\nconst { name, company, job } = { name: \u0026#34;John\u0026#34;, company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34; }; Assignment without Declaration We can declare the variables without assignment. Values can be assigned later using Object Destructuring like this:\nconst person = { name: \u0026#34;John\u0026#34;, company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34; }; let name, company, job; ({ name, company, job } = person); Note that the parentheses ( ... ); around the assignment statement are required when using object literal destructuring assignment without a declaration.\nVariable Name By default, variable name is same as object property name which you are extracting. We can always change the variable name to something else like this:\nconst person = { name: \u0026#34;John\u0026#34;, company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34; }; const { name: foo, job: bar} = person; console.log(foo); //\u0026#34;John\u0026#34; console.log(bar); //\u0026#34;Developer\u0026#34; Please note that now we can access the values using foo and bar variables only. If we try to access values using name and age variables, we would get undefined error.\nDefault Values We can also provide a default value to the variable, just in case the extracted object property is undefined or doesn\u0026rsquo;t exist.\nconst person = { name: \u0026#34;John\u0026#34;, company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34;, department: undefined }; const { name = \u0026#34;Bob\u0026#34;, department = \u0026#34;NA\u0026#34;, age = 21 } = person; console.log(name); //\u0026#34;John\u0026#34; console.log(department); //\u0026#34;NA\u0026#34; \u0026lt;- default value since \u0026#39;undefined\u0026#39; console.log(age); //21 \u0026lt;- default value since doesn\u0026#39;t exist We can also set default values with new variable name:\nconst person = { name: \u0026#34;John\u0026#34;, company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34;, department: undefined }; const { name:foo = \u0026#34;Bob\u0026#34;, department:bar = \u0026#34;NA\u0026#34;, age:baz = 21 } = person; console.log(foo); //\u0026#34;John\u0026#34; console.log(bar); //\u0026#34;NA\u0026#34; console.log(baz); //21 Dynamic Property Name We can also extract the properties with dynamic name (the property name is known at runtime) like this:\nconst prop = \u0026#34;name\u0026#34;; const person = { name: \u0026#34;John\u0026#34;, company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34;, department: undefined }; const { [prop]:foo } = person; console.log(foo); //\u0026#34;John\u0026#34; Nested Object Destructuring We can also perform nested Object Destructuring to extract properties from nested object at deeper levels:\nconst person = { name: \u0026#34;John\u0026#34;, friends : [\u0026#34;Adam\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;], hobbies: [\u0026#34;Biking\u0026#34;, \u0026#34;Cooking\u0026#34;], location: { country: \u0026#34;USA\u0026#34;, city: \u0026#34;NY\u0026#34; }, }; const { name, friends, hobbies : [firstHobby, secondHobby], location: { country, city } } = person; console.log(name); //\u0026#34;John\u0026#34; console.log(friends); //[\u0026#34;Adam\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;] console.log(firstHobby); //\u0026#34;Biking\u0026#34; console.log(secondHobby); //\u0026#34;Cooking\u0026#34; console.log(country); //\u0026#34;USA\u0026#34; console.log(city); //\u0026#34;NY\u0026#34; Remaining Object Properties The rest operator ... can be used to extract the remaining properties to a new variable which are not already extracted by the Object Destructuring.\nconst person = {name: \u0026#34;John\u0026#34;, company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34;, friends : [\u0026#34;Adam\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;]}; const {name, friends, ...others} = person; console.log(name); //\u0026#34;John\u0026#34; console.log(friends); //[\u0026#34;Adam\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;] console.log(others); //{company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34;} Rest and Spread Operators Often we get confused with Rest and Spread operator as both use the same ... syntax. Rest and Spread operators can be used together in the Object Destructuring statement:\n Rest Operator: Used at the left hand side of statement to get the remaining properties from an object Spread Operator: Used at the right hand side of statement to copy properties to an object  const primaryDetails = {name: \u0026#34;John\u0026#34;, company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34;} const otherDetails = {friends: [\u0026#34;Adam\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;], hobbies: [\u0026#34;Biking\u0026#34;, \u0026#34;Cooking\u0026#34;]}; // Rest operator // Spread Operator const {name, company, hobbies, ...others} = {...primaryDetails, ...otherDetails}; console.log(name); //\u0026#34;John\u0026#34; console.log(company); //\u0026#34;Google\u0026#34; console.log(hobbies); //[\u0026#34;Biking\u0026#34;, \u0026#34;Cooking\u0026#34;] console.log(others); //{job: \u0026#34;Developer\u0026#34;, friends: [\u0026#34;Adam\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;]} Destructuring Return Statement We can extract data from an object returned from a function using Object Destructuring in this way:\nfunction getPersonDetails() { return {name: \u0026#34;John\u0026#34;, company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34;}; } const {name, ...others} = getPersonDetails(); console.log(name); //\u0026#34;John\u0026#34; console.log(others); //{company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34;} Destructuring Function Arguments We can even pass an object into a function and then extract only the properties we want using Object Destructuring in this way:\nconst person = { name: \u0026#34;John\u0026#34;, company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34; }; function getPersonDetails({name, ...others }) { console.log(name); //\u0026#34;John\u0026#34;  console.log(others); //{company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34;} } getPersonDetails(person); We can also set default values to the function arguments like this:\nconst person = { name: \u0026#34;John\u0026#34;, company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34; }; function getPersonDetails({name, department = \u0026#34;NA\u0026#34; }) { console.log(name); //\u0026#34;John\u0026#34;  console.log(department); //\u0026#34;NA\u0026#34; } getPersonDetails(person); Common Use Cases When you write code, try to use Object Destructuring wherever possible. Some of the common use cases I came across are as follows:\nInside for-of loop We can use Object Destructuring inside for-of loop in this way:\nconst users = [{ name: \u0026#34;John\u0026#34;, company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34; }, { name: \u0026#34;Adam\u0026#34;, company: \u0026#34;Microsoft\u0026#34;, job: \u0026#34;Analyst\u0026#34; }, { name: \u0026#34;Bob\u0026#34;, company: \u0026#34;Yahoo\u0026#34;, job: \u0026#34;Data Scientist\u0026#34; }]; for (let {name, company} of users) { console.log(name, company); } // John Google // Adam Microsoft // Bob Yahoo Inside map function We can use Object Destructuring inside map function in this way:\nconst users = [{ name: \u0026#34;John\u0026#34;, company: \u0026#34;Google\u0026#34;, job: \u0026#34;Developer\u0026#34; }, { name: \u0026#34;Adam\u0026#34;, company: \u0026#34;Microsoft\u0026#34;, job: \u0026#34;Analyst\u0026#34; }, { name: \u0026#34;Bob\u0026#34;, company: \u0026#34;Yahoo\u0026#34;, job: \u0026#34;Data Scientist\u0026#34; }]; const userNames = users.map(({ name }) =\u0026gt; name); console.log(userNames); //[\u0026#34;John\u0026#34;, \u0026#34;Adam\u0026#34;, \u0026#34;Bob\u0026#34;] Named Export We can choose what to export from the module using Object Destructuring, and import keyword. If you have worked with Angular, React or any other JavaScript framework. You might have come across Named Export like this:\nimport React, { Component } from \u0026#39;React\u0026#39;; // Old way import React from \u0026#39;React\u0026#39;; class MyComponent extends React.Component{} // New way import React, { Component } from \u0026#39;React\u0026#39;; class MyComponent extends Component{} Same thing applies for any other package we import, we can choose only the functions we want and use them independently.\nimport { isEmail, isCreditCard } from \u0026#39;validator\u0026#39;; console.log(isEmail(\u0026#39;my@email.com\u0026#39;)); // true Console API We can destructure functions from Console API object:\nconst { log, warn, error } = console; log(\u0026#39;Hello World!\u0026#39;); // equivalent to console.log(\u0026#39;...\u0026#39;); warn(\u0026#39;Watch out!\u0026#39;); // console.warn(\u0026#39;...\u0026#39;); error(\u0026#39;Something went wrong!\u0026#39;); // console.error(\u0026#39;...\u0026#39;); Swapping Variables This is interesting to see that we can swap variables using Object Destructuring\nlet a = \u0026#34;a\u0026#34;; let b = \u0026#34;b\u0026#34;; [b, a] = [a, b]; console.log(a); // b console.log(b); // a HTML Elements We can destructure properties of HTML Elements like this:\nconst { value } = document.querySelector(\u0026#39;input\u0026#39;); This way it’s much easier to get a value property out of an input element, just as getting disabled property out of a button element.\nconst { disabled } = document.querySelector(\u0026#39;button\u0026#39;); HTML Events Let\u0026rsquo;s handle HTML Events using destructuring function arguments like this:\n\u0026lt;input type=\u0026#34;text\u0026#34; onchange=\u0026#34;handleChange(event)\u0026#34;/\u0026gt; Now we are going to extract a target object from an event object and then extract a value property from the target:\n// #1 function handleChange(event) { const { value } = event.target; console.log(value); } // # 2 function handleChange({ target }) { const { value } = target; console.log(value); } // # 3 function handleChange({ target: { value } }) { console.log(value); } ","permalink":"https://codingnconcepts.com/javascript/object-destructuring/","tags":["JavaScript ES6"],"title":"How to use Object Destructuring in JavaScript"},{"categories":["Javascript"],"contents":"In this quick tutorial, we\u0026rsquo;ll learn how to capitalize the first letter of a String in JavaScript.\n\u0026lsquo;capitalize\u0026rsquo; Function You can use this custom made capitalize() function to capitalize the first letter of a string:\n// es5 way function capitalize(string) { return string.charAt(0).toUpperCase() + string.slice(1); } // es6 way using destructuring const capitalize = ([first,...rest]) =\u0026gt; first.toUpperCase() + rest.join(\u0026#39;\u0026#39;); \u0026lsquo;capitalize\u0026rsquo; Function Details Let\u0026rsquo;s look at the steps involved to come up with capitalize() function:\n Get the first letter of the string using charAt() method const string = \u0026#34;string\u0026#34;; string.charAt(0); // Returns \u0026#34;s\u0026#34;  Convert the first letter to uppercase using toUpperCase() method const string = \u0026#34;string\u0026#34;; string.charAt(0).toUpperCase(); // Returns \u0026#34;S\u0026#34;  Get the rest of the string except first letter using slice() method const string = \u0026#34;string\u0026#34;; string.slice(1); // Returns \u0026#34;tring\u0026#34; Note that slice(1) means get a substring from index 1 to end of the string. Alternatively, You can also use substring(1).\n Finally, add the first uppercase letter to rest of the string var string = \u0026#34;string\u0026#34;; function capitalize(string) { return string.charAt(0).toUpperCase() + string.slice(1); } capitalize(string); // Returns \u0026#34;String\u0026#34;   Add \u0026lsquo;capitalize\u0026rsquo; to String methods We can also add our custom made capitalize() function to String.prototype methods so that we can directly use that on a string.\nvar string = \u0026#34;string\u0026#34;; /* this is how methods are defined in prototype of any built-in Object */ Object.defineProperty(String.prototype, \u0026#39;capitalize\u0026#39;, { value: function () { return this.charAt(0).toUpperCase() + this.slice(1); }, writable: true, // so that one can overwrite it later  configurable: true // so that it can be deleted later }); string.capitalize(); // Returns \u0026#34;String\u0026#34; Capitalize First Letter of each word in a given String We can use the capitalizeSentence function to capitalize first letter of each word in a sentence:\nfunction capitalizeSentence(sentence) { return sentence .split(\u0026#34; \u0026#34;) .map(string =\u0026gt; string.charAt(0).toUpperCase() + string.slice(1)) .join(\u0026#34; \u0026#34;); } capitalizeSentence(\u0026#34;a quick brown fox jumps over the lazy dog\u0026#34;); // \u0026#34;A Quick Brown Fox Jumps Over The Lazy Dog\u0026#34; ","permalink":"https://codingnconcepts.com/javascript/how-to-capitalize-first-letter-of-string-in-javascript/","tags":["Javascript Core"],"title":"How to Capitalize First Letter of String in JavaScript"},{"categories":["Javascript"],"contents":"In this tutorial, we\u0026rsquo;ll learn how to remove duplicates from an Array in JavaScript and return only unique values.\nHere is a quick view of different ways to remove duplicates from an Array:\n// Array: const fruits = [\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;]; // 1. ES6 Set [...new Set(fruits)]; // 2. filter fruits.filter((item, index) =\u0026gt; fruits.indexOf(item) == index); // 3. forEach fruits.forEach(item =\u0026gt; !uniqueFruits.includes(item) \u0026amp;\u0026amp; uniqueFruits.push(item)); // 4. reduce fruits.reduce((newarray, item) =\u0026gt; newarray.includes(item) ? newarray : [...newarray, item], []); // Result: // ▶ Set(3) {\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;} Use ES6 Set If you have started using ES6 then it is recommended to use Set object.\n Set object lets you store unique values of any type, whether primitive values or object reference.\n When you pass an array to new Set() object, it removes any duplicate values. Let\u0026rsquo;s look at the code where two things are going on:\n First, we create a new Set object by passing an array which removes the duplicates. Second, we convert this object back to an array by using spread operator ...  const fruits = [\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;]; const uniqueSet = new Set(fruits); // ▶ Set(3) {\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;}  const backToArray = [...uniqueSet]; // ▶ (3) [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;] Alternatively, you can also use Array.from to convert a Set into an array:\nconst fruits = [\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;]; const uniqueFruits = Array.from(new Set(fruits)); // ▶ Set(3) {\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;} Use filter The filter() method filter out the elements from an array based on the condition we provide. In other words,\n if the condition returns true, it will be included in filtered array if the condition returns false, it will NOT be included in filtered array  const fruits = [\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;]; const uniqueFruits = fruits.filter((item, index) =\u0026gt; fruits.indexOf(item) == index); // ▶ Set(3) {\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;} Here use of Array.indexOf() method is very important which gives you the first occurrence of element in case there are duplicates. Let\u0026rsquo;s see the code:\nconst fruits = [\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;]; fruits.indexOf(\u0026#39;apple\u0026#39;); //0 fruits.indexOf(\u0026#39;orange\u0026#39;); //1 fruits.indexOf(\u0026#39;banana\u0026#39;); //4 In the above case, our filter() method filters out the first occurrence of each unique element.\nUse forEach The forEach() method can also be used to loop through elements of an array and push() elements to the new array which is not already there.\nconst fruits = [\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;]; const uniqueFruits = []; fruits.forEach(item =\u0026gt; !uniqueFruits.includes(item) \u0026amp;\u0026amp; uniqueFruits.push(item)); console.log(uniqueFruits); // ▶ Set(3) {\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;} Use reduce The reduce() method is used to reduce the elements of the array and combine them into a new array based on some reducer function that you pass.\nIn this case, our reducer function is checking if our new array contains the item. If it doesn’t, push that item into our new array. Otherwise, skip that element and return just our new array as is.\nReduce is always bit difficult to understand. Let\u0026rsquo;s look at the code:\nconst fruits = [\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;]; const uniqueFruits = fruits.reduce((newarray, item) =\u0026gt; newarray.includes(item) ? newarray : [...newarray, item], []); console.log(uniqueFruits); // ▶ Set(3) {\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;} Performance We have created an array with 1 million random numbers (ranging from 1 to 1000). Let\u0026rsquo;s check the performance of each method.\n// Array: var numbers = []; for ( var i = 0; i \u0026lt; 1000000; i++ ) { numbers.push(Math.floor((Math.random() * 1000) + 1)); } // 1. ES6 Set console.time(\u0026#34;set\u0026#34;); [...new Set(numbers)]; console.timeEnd(\u0026#34;set\u0026#34;); // 2. filter console.time(\u0026#34;filter\u0026#34;); numbers.filter((item, index) =\u0026gt; numbers.indexOf(item) == index); console.timeEnd(\u0026#34;filter\u0026#34;); // 3. forEach console.time(\u0026#34;forEach\u0026#34;); var uniqueNumbers = []; numbers.forEach(item =\u0026gt; !uniqueNumbers.includes(item) \u0026amp;\u0026amp; uniqueNumbers.push(item)); console.timeEnd(\u0026#34;forEach\u0026#34;); // 4. reduce console.time(\u0026#34;reduce\u0026#34;); numbers.reduce((newarray, item) =\u0026gt; newarray.includes(item) ? newarray : [...newarray, item], []); console.timeEnd(\u0026#34;reduce\u0026#34;); Here is the result when i ran the above code on MacBook Pro\u0026rsquo;s Google Chrome v83.0.4103.106 (64-bit):\nset: 23.051025390625ms filter: 1004.9609375ms forEach: 471.6630859375ms reduce: 472.902099609375ms We see that ES6 Set object is a clear winner followed by forEach loop. It is highly recommended to use ES6 Set to remove duplicates from an array because of its shorthand syntax and performance.\n","permalink":"https://codingnconcepts.com/javascript/how-to-remove-array-duplicates-in-javascript/","tags":["Javascript Array"],"title":"How to Remove Duplicates from Array in JavaScript"},{"categories":["Javascript"],"contents":"In this tutorial, we\u0026rsquo;ll learn how to clone an Array in JavaScript and also learn the difference between shallow copy and deep copy of an Array.\nHere is a quick view of different ways to clone an array:\n/** Shallow Copy */ const fruits = [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;]; // 1. ES6 Spread Operator [...fruits]; // 2. Array.slice fruits.slice(); // 3. Array.from Array.from(fruits); /** Deep Copy */ const grocery = [[\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;], [\u0026#39;onion\u0026#39;, \u0026#39;potato\u0026#39;, \u0026#39;tomato\u0026#39;], [\u0026#39;milk\u0026#39;, \u0026#39;juice\u0026#39;]]; // 1. JSON.stringify \u0026amp; JSON.parse JSON.parse(JSON.stringify(grocery)); // 2. map grocery.map(element =\u0026gt; [...element]); Shallow Copy We\u0026rsquo;ll look at various methods to create a shallow copy of an Array in JavaScript. Shallow copy means the first level is copied and deeper levels are referenced.\nShallow copy is good enough when you are working with one-dimensional array. Let\u0026rsquo;s look at different ways to clone an array using shallow copy:\nES6 Spread Operator If you have started using ES6 then it is recommended to use spread operator to clone an array in JavaScript. It\u0026rsquo;s short syntax is very handy.\nconst fruits = [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;]; const cloneFruits = [...fruits]; // [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;] Array.slice If you are still working old way then Array.slice can be used to clone an array:\nconst fruits = [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;]; const cloneFruits = fruits.slice(); // [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;] Array.from We can also use Array.from method to clone an array:\nconst fruits = [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;]; const cloneFruits = Array.from(fruits); // [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;] Problem with Shallow Copy Let\u0026rsquo;s see how shallow copy behaves with multi-dimensional (nested) array:\nconst fruits = [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;]; const veggies = [\u0026#39;onion\u0026#39;, \u0026#39;potato\u0026#39;, \u0026#39;tomato\u0026#39;]; const liquids = [\u0026#39;milk\u0026#39;, \u0026#39;juice\u0026#39;]; const grocery = [fruits, veggies, liquids]; const groceryCopy = [...grocery]; grocery[2].push(\u0026#39;beer\u0026#39;); console.log(grocery); console.log(groceryCopy); // (3) [[\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;], [\u0026#39;onion\u0026#39;, \u0026#39;potato\u0026#39;, \u0026#39;tomato\u0026#39;], [\u0026#39;milk\u0026#39;, \u0026#39;juice\u0026#39;, \u0026#39;beer\u0026#39;]] // (3) [[\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;], [\u0026#39;onion\u0026#39;, \u0026#39;potato\u0026#39;, \u0026#39;tomato\u0026#39;], [\u0026#39;milk\u0026#39;, \u0026#39;juice\u0026#39;, \u0026#39;beer\u0026#39;]] // They\u0026#39;ve both been changed because they share references We see that both Array and its shallow copy have been changed because they share the reference. Remember, deeper levels are referenced in shallow copy.\nDeep copy We can use deep copy instead to solve the problem arises with shallow copy of multi-dimensional (nested) array. Let\u0026rsquo;s look at different ways to clone an array using deep copy:\nJSON.stringify and JSON.parse We can make a deep copy of an Array using the combination of JSON.stringify and JSON.parse\n JSON.stringify turns an object into a string. JSON.parse turns a string into an object.  const fruits = [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;]; const veggies = [\u0026#39;onion\u0026#39;, \u0026#39;potato\u0026#39;, \u0026#39;tomato\u0026#39;]; const liquids = [\u0026#39;milk\u0026#39;, \u0026#39;juice\u0026#39;]; const grocery = [fruits, veggies, liquids]; const groceryCopy = JSON.parse(JSON.stringify(grocery)); grocery[2].push(\u0026#39;beer\u0026#39;); console.log(grocery); console.log(groceryCopy); // (3) [[\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;], [\u0026#39;onion\u0026#39;, \u0026#39;potato\u0026#39;, \u0026#39;tomato\u0026#39;], [\u0026#39;milk\u0026#39;, \u0026#39;juice\u0026#39;, \u0026#39;beer\u0026#39;]] // (3) [[\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;], [\u0026#39;onion\u0026#39;, \u0026#39;potato\u0026#39;, \u0026#39;tomato\u0026#39;], [\u0026#39;milk\u0026#39;, \u0026#39;juice\u0026#39;]] // These two arrays are completely separate! Array.map You can also make a deep copy of multi-dimensional (nested) Array by iterating and make a copy at deeper levels by yourself using Array.map\nconst fruits = [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;]; const veggies = [\u0026#39;onion\u0026#39;, \u0026#39;potato\u0026#39;, \u0026#39;tomato\u0026#39;]; const liquids = [\u0026#39;milk\u0026#39;, \u0026#39;juice\u0026#39;]; const grocery = [fruits, veggies, liquids]; const groceryCopy = grocery.map(element =\u0026gt; [...element]); grocery[2].push(\u0026#39;beer\u0026#39;); console.log(grocery); console.log(groceryCopy); // (3) [[\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;], [\u0026#39;onion\u0026#39;, \u0026#39;potato\u0026#39;, \u0026#39;tomato\u0026#39;], [\u0026#39;milk\u0026#39;, \u0026#39;juice\u0026#39;, \u0026#39;beer\u0026#39;]] // (3) [[\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;], [\u0026#39;onion\u0026#39;, \u0026#39;potato\u0026#39;, \u0026#39;tomato\u0026#39;], [\u0026#39;milk\u0026#39;, \u0026#39;juice\u0026#39;]] // These two arrays are completely separate! Please note that the above example makes a deep copy of two-dimensional array. You need to iterate deeper if Array has more nested levels.\n","permalink":"https://codingnconcepts.com/javascript/how-to-clone-array-in-javascript/","tags":["Javascript Array"],"title":"How to Clone an Array in JavaScript"},{"categories":["Javascript"],"contents":"In this tutorial, we\u0026rsquo;ll learn how to sort an Array in JavaScript by using Array.sort() method.\nSort String Array Let\u0026rsquo;s create a string array:\nconst fruits = [\u0026#39;mango\u0026#39;, \u0026#39;cherry\u0026#39;, \u0026#39;berries\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;kiwi\u0026#39;]; We can sort the array elements in ascending alphabetical (a-z, A-Z) order using sort() method:\nfruits.sort(); console.log(fruits); ▶ (6) [\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;berries\u0026quot;, \u0026quot;cherry\u0026quot;, \u0026quot;kiwi\u0026quot;, \u0026quot;mango\u0026quot;] We can also sort the array elements in descending alphabetical (z-a, Z-A) order using reverse() method:\nfruits.reverse(); console.log(fruits); ▶ (6) [\u0026quot;mango\u0026quot;, \u0026quot;kiwi\u0026quot;, \u0026quot;cherry\u0026quot;, \u0026quot;berries\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;apple\u0026quot;] Sort Number Array The built-in sort() and reverse() methods sort the array elements in alphabetical order so it is not useful when it comes to number array. Fortunately, sort() methods takes compare functions as an argument which can be used to override its default sorting behavior.\nLet\u0026rsquo;s first create our compare function:\nCompare Function function(a, b) {return a - b} When the sort() method compares two values, it sends the values to our compare function and sorts the values according to the returned value.\n If the result is negative, a is sorted before b. If the result is positive, b is sorted before a. If the result is 0, nothing changes.  Let\u0026rsquo;s sort number array in ascending order using sort() with compare function:\nconst numbers = [1, 7, 3, 5, 8, 2, 9, 4, 6]; numbers.sort(function(a, b){return a - b}); //ascending console.log(numbers); ▶ (9) [1, 2, 3, 4, 5, 6, 7, 8, 9] We need to reverse the subtraction from (a - b) to (b - a) in compare function, if we want to sort the numbers in descending order:\nconst numbers = [1, 7, 3, 5, 8, 2, 9, 4, 6]; numbers.sort(function(a, b){return b - a}); //descending console.log(numbers); ▶ (9) [9, 8, 7, 6, 5, 4, 3, 2, 1] ","permalink":"https://codingnconcepts.com/javascript/how-to-sort-array-in-javascript/","tags":["Javascript Array"],"title":"How to Sort an Array in JavaScript"},{"categories":["Interview Questions","Java"],"contents":"These Java interview questions are based on my personal interview experience. Topics are in the order of recent interview trends. Keep following this post link for regular updates.\nQ1. What New Features Were Added in Java 8? Java 8 ships with several new features but the most significant are the following:\n Lambda Expressions − a new language feature allowing treating actions as objects Method References − enable defining Lambda Expressions by referring to methods directly using their names Optional − special wrapper class used for expressing optionality Functional Interface – an interface with maximum one abstract method, implementation can be provided using a Lambda Expression Default methods − give us the ability to add full implementations in interfaces besides abstract methods Nashorn, JavaScript Engine − Java-based engine for executing and evaluating JavaScript code Stream API − a special iterator class that allows processing collections of objects in a functional manner Date API − an improved, immutable JodaTime-inspired Date API  Along with these new features, lots of feature enhancements are done under-the-hood, at both compiler and JVM level.\nQ2. What Is a Method Reference? A method reference is a Java 8 construct that can be used for referencing a method without invoking it using double colon :: operator. It is used for treating methods as Lambda Expressions. They only work as syntactic sugar to reduce the verbosity of some lambdas. See below code, how method reference has reduced the verbosity over lambda expression.\nList\u0026lt;String\u0026gt; languages = Arrays.asList(\u0026#34;java\u0026#34;, \u0026#34;javascript\u0026#34;, \u0026#34;css\u0026#34;); // Lambda expression languages.forEach(str -\u0026gt; System.out.println(str)); // Method Reference languages.forEach(System.out::println); Double colon :: is basically refers to a single method, and this single method can be a\n A Static method ClassName::staticMethodName\ne.g. String::valueOf, Integer.parseInteger, Double.parseDouble An Instance method Object::instanceMethodName\ne.g. String::toString, System.out::println, String::toUpperCase A Constructor ClassName::new\ne.g. String::new A Super method super::parentMethodName  You can read a detailed description of method references with full examples by following this link\nQ3. What Is a Functional Interface? What Are the Rules of Defining a Functional Interface? A functional interface is an interface with no more, no less but one single abstract method (default methods do not count).\nWhere an instance of such interface is required, a Lambda Expression can be used instead. More formally put:\nFunctional interfaces provide target types for lambda expressions and method references. The arguments and return type of such expression directly match those of the single abstract method.\nFor instance, the Runnable interface is a functional interface, so instead of:\nThread thread = new Thread(new Runnable() { public void run() { System.out.println(\u0026#34;Hello World!\u0026#34;); } }); you could simply do:\nThread thread = new Thread(() -\u0026gt; System.out.println(\u0026#34;Hello World!\u0026#34;)); Functional interfaces are usually annotated with the @FunctionalInterface annotation – which is informative and does not affect the semantics.\nQ4. What Is a Default Method and When Do We Use It? A default method is a method with an implementation – which can be found in an interface.\nWe can use a default method to add a new functionality to an interface while maintaining backward compatibility with classes that are already implementing the interface:\npublic interface Vehicle { public void move(); default void hoot() { System.out.println(\u0026#34;peep!\u0026#34;); } } Usually, when a new abstract method is added to an interface, all implementing classes will break until they implement the new abstract method. In Java 8, this problem has been solved by the use of default method.\nFor example, Collection interface does not have forEach method declaration. Thus, adding such method would simply break the whole collections API.\nJava 8 introduces default method so that Collection interface can have a default implementation of forEach method without requiring the classes implementing this interface to implement the same.\nQ5. Will the Following Code Compile? @FunctionalInterface public interface Function2\u0026lt;T, U, V\u0026gt; { public V apply(T t, U u); default void count() { // increment counter  } } Yes. The code will compile because it follows the functional interface specification of defining only a single abstract method. The second method, count, is a default method that does not increase the abstract method count.\nQ6. Describe Some of the Functional Interfaces in the Standard Library. There are a lot of functional interfaces in the java.util.function package, the more common ones include but not limited to:\n Function – it takes one argument and returns a result Consumer – it takes one argument and returns no result (represents a side effect) Supplier – it takes not argument and returns a result Predicate – it takes one argument and returns a boolean BiFunction – it takes two arguments and returns a result BinaryOperator – it is similar to a BiFunction, taking two arguments and returning a result. The two arguments and the result are all of the same types UnaryOperator – it is similar to a Function, taking a single argument and returning a result of the same type  Q7. What Is a Lambda Expression and What Is It Used for? In very simple terms, a lambda expression is a function that can be referenced and passed around as an object.\nLambda expressions introduce functional style processing in Java and facilitate the writing of compact and easy-to-read code.\nBecause of this, lambda expressions are a natural replacement for anonymous classes as method arguments. One of their main uses is to define inline implementations of functional interfaces.\n//Java 7 way of initializing a thread Thread t1 = new Thread(new Runnable(){ @Override public void run() { System.out.println(\u0026#34;Thread started in Java7\u0026#34;); } }); t1.start(); //Java 8 Lambda Expression Thread t2 = new Thread(() -\u0026gt; System.out.println(\u0026#34;Thread started in Java8\u0026#34;)); t2.start(); //Java 7 way of sorting list List\u0026lt;String\u0026gt; a1 = Arrays.asList(\u0026#34;equity\u0026#34;, \u0026#34;stocks\u0026#34;, \u0026#34;gold\u0026#34;, \u0026#34;foreign exchange\u0026#34;,\u0026#34;fixed income\u0026#34;, \u0026#34;future\u0026#34;); a1.sort(new Comparator\u0026lt;String\u0026gt;() { @Override public int compare(String o1, String o2) { return o1.compareTo(o2); } }); //Java 8 Lambda Expression a1.sort((o1, o2) -\u0026gt; o2.compareTo(o1)); Q8. Explain the Syntax and Characteristics of a Lambda Expression? A lambda expression consists of two parts: the parameter part and the expressions part separated by a forward arrow as below:\n// Syntax param -\u0026gt; expression Any lambda expression has the following characteristics:\n Optional type declaration – when declaring the parameters on the left-hand side of the lambda, we don\u0026rsquo;t need to declare their types as the compiler can infer them from their values. Optional parentheses – when only a single parameter is declared, we don\u0026rsquo;t need to place it in parentheses. But when more than one parameter is declared, parentheses are required Optional curly braces – when the expressions part only has a single statement, there is no need for curly braces. But curly braces are required when there is more than one statement Optional return statement – when there is only single statement, then we can omit return keyword from return statement.  // Lamda Expression Stream.of(\u0026#34;java\u0026#34;, \u0026#34;spring\u0026#34;, \u0026#34;spring boot\u0026#34;).filter((String s) -\u0026gt; { return s == \u0026#34;java\u0026#34;; }); // Removed Optional Type Declaration, Parentheses, Curly Braces and Return Keyword Stream.of(\u0026#34;java\u0026#34;, \u0026#34;spring\u0026#34;, \u0026#34;spring boot\u0026#34;).filter(s -\u0026gt; s == \u0026#34;java\u0026#34;); Q9. What Is a Stream? How Does It Differ from a Collection? In simple terms, a stream is an iterator whose role is to accept a set of actions to apply on each of the elements it contains.\nThe stream represents a sequence of objects from a source such as a collection, which supports aggregate operations. They were designed to make collection processing simple and concise. Contrary to the collections, the logic of iteration is implemented inside the stream, so we can use methods like map and flatMap for performing a declarative processing.\nAnother difference is that the Stream API is fluent and allows pipelining:\nint sum = Arrays.stream(new int[]{1, 2, 3}) .filter(i -\u0026gt; i \u0026gt;= 2) .map(i -\u0026gt; i * 3) .sum(); And yet another important distinction from collections is that streams are inherently lazily loaded and processed.\nQ10. What is the Difference Between Intermediate and Terminal Operations? Stream operations are combined into pipelines to process streams. All operations are either intermediate or terminal.\nIntermediate operations are those operations that return Stream itself allowing for further operations on a stream.\nThese operations are always lazy, i.e. they do not process the stream at the call site, an intermediate operation can only process data when there is a terminal operation. Some of the intermediate operations are filter, map and flatMap.\nTerminal operations terminate the pipeline and initiate stream processing. The stream is passed through all intermediate operations during terminal operation call. Terminal operations include forEach, reduce, Collect and sum.\nTo drive this point home, let us look at an example with side effects:\npublic static void main(String[] args) { System.out.println(\u0026#34;Stream without terminal operation\u0026#34;); Arrays.stream(new int[] { 1, 2, 3 }).map(i -\u0026gt; { System.out.println(\u0026#34;doubling \u0026#34; + i); return i * 2; }); System.out.println(\u0026#34;Stream with terminal operation\u0026#34;); Arrays.stream(new int[] { 1, 2, 3 }).map(i -\u0026gt; { System.out.println(\u0026#34;doubling \u0026#34; + i); return i * 2; }).sum(); } The output will be as follows:\nOutput Stream without terminal operation Stream with terminal operation doubling 1 doubling 2 doubling 3 As you can see, the intermediate operations are only triggered when a terminal operation exists.\nQ11. What is the Difference Between Map and flatMap Stream Operation? There is a difference in signature between map and flatMap. Generally speaking, a map operation wraps its return value inside its ordinal type while flatMap does not.\nFor example, in Optional, a map operation would return Optional\u0026lt;String\u0026gt; type while flatMap would return String type.\nSo after mapping, one needs to unwrap (read “flatten”) the object to retrieve the value whereas, after flat mapping, there is no such need as the object is already flattened. The same concept is applied to mapping and flat mapping in Stream.\nBoth map and flatMap are intermediate stream operations that receive a function and apply this function to all elements of a stream.\nThe difference is that for the map, this function returns a value, but for flatMap, this function returns a stream. The flatMap operation “flattens” the streams into one.\nHere\u0026rsquo;s an example where we take a map of users\u0026rsquo; names and lists of phones and “flatten” it down to a list of phones of all the users using flatMap:\nMap\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; people = new HashMap\u0026lt;\u0026gt;(); people.put(\u0026#34;John\u0026#34;, Arrays.asList(\u0026#34;555-1123\u0026#34;, \u0026#34;555-3389\u0026#34;)); people.put(\u0026#34;Mary\u0026#34;, Arrays.asList(\u0026#34;555-2243\u0026#34;, \u0026#34;555-5264\u0026#34;)); people.put(\u0026#34;Steve\u0026#34;, Arrays.asList(\u0026#34;555-6654\u0026#34;, \u0026#34;555-3242\u0026#34;)); List\u0026lt;String\u0026gt; phones = people.values().stream() .flatMap(Collection::stream) .collect(Collectors.toList()); Q12. What Is Stream Pipelining in Java 8? Stream pipelining is the concept of chaining operations together. This is done by splitting the operations that can happen on a stream into two categories: intermediate operations and terminal operations.\nEach intermediate operation returns an instance of Stream itself when it runs, an arbitrary number of intermediate operations can, therefore, be set up to process data forming a processing pipeline.\nThere must then be a terminal operation which returns a final value and terminates the pipeline.\n\nReference:\n Baeldung ","permalink":"https://codingnconcepts.com/top-java-8-interview-questions/","tags":["Interview Q\u0026A","Java Q\u0026A"],"title":"Top Java 8 Interview Questions"},{"categories":["Javascript"],"contents":"In this tutorial, we\u0026rsquo;ll walkthrough JavaScript\u0026rsquo;s Console API methods with quick examples\u0026hellip;\nconsole.log console.log is most frequently used method to log values to the console:\nconst name = \u0026#39;Console!\u0026#39;; console.log(\u0026#39;hello,\u0026#39;, name); //hello, Console! \nWe can also use String Template Literal (wrapped by `` and concat variable values using ${}) as well:\nconsole.log(`hello, ${name}`); //hello, Console! \nWe can also log multiple values in a single statement to the console:\nconst key = \u0026#39;value\u0026#39;; const number = 1; const fruits = [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;]; const obj = {a: 1, b: 2}; console.log(\u0026#39;key:\u0026#39;, name, \u0026#39;number:\u0026#39;, number, \u0026#39;fruits:\u0026#39;, fruits, \u0026#39;obj:\u0026#39;, obj); key: Console! number: 1 fruits: (3) [\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;mango\u0026quot;] obj: {a: 1, b: 2} \nJust like console.log, we have other method to log value to the console:\n console.debug just like console.log with \u0026ldquo;debug\u0026rdquo; log level. Normally browser default log level is info and this won\u0026rsquo;t be displayed until you change log level to debug. console.info just like console.log with \u0026ldquo;info\u0026rdquo; log level console.warn prints a warning to the console console.error prints object to the console as an error, and include a stack trace console.debug(\u0026#39;Let me find you\u0026#39;); //won\u0026#39;t be displayed console.info(\u0026#39;Just FYI\u0026#39;); console.warn(\u0026#39;I told you !\u0026#39;); console.error(\u0026#39;I cannot do it.\u0026#39;);  Just FYI ➤ ⚠️ I told you ! ➤ ⓧ I cannot do it.   console.assert You can do some assertion test using console.assert.\nThe first argument is an expression which if evaluate to false, then assertion fails and second argument get printed to the console as an error.\n// this will pass, nothing will be logged console.assert(2 == \u0026#39;2\u0026#39;, \u0026#39;2 not == to \u0026#34;2\u0026#34;\u0026#39;); // this fails, \u0026#39;3 not === to \u0026#34;3\u0026#34;\u0026#39; will be logged console.assert(3 === \u0026#39;3\u0026#39;, \u0026#39;3 not === to \u0026#34;3\u0026#34;\u0026#39;); ➤ ⓧ Assertion failed: 3 not === to \u0026#34;3\u0026#34; You can also pass an object in second argument which is printed when assertion fails:\nconst x = 5; const y = 3; const reason = \u0026#39;x is expected to be less than y\u0026#39;; console.assert(x \u0026lt; y, {x, y, reason}); ➤ ⓧ Assertion failed:  ➤ {x: 5, y: 3, reason: \u0026quot;x is expected to be less than y\u0026quot;} console.clear You can just clear the console using console.clear:\nconsole.clear(); console.count The console.count method is used to count the number of times it has been invoked with the same provided label. For example, here we have two counters, one for even values and one for odd values:\n[1, 2, 3, 4, 5].forEach(nb =\u0026gt; { if (nb % 2 === 0) { console.count(\u0026#39;even\u0026#39;); } else { console.count(\u0026#39;odd\u0026#39;); } }); odd: 1 even: 1 odd: 2 even: 2 odd: 3 The console.countReset method is used to reset the counter to 1, if we execute below after the above example,\nconsole.countReset(\u0026#39;even\u0026#39;); console.countReset(\u0026#39;odd\u0026#39;); console.count(\u0026#39;even\u0026#39;); console.count(\u0026#39;odd\u0026#39;); even: 1 odd: 1 console.dir You can print all the internal properties of an object in formatted way using console.dir\nWe can print prototype methods of an Array or Object using console.dir,\nconsole.dir([\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, \u0026#34;qux\u0026#34;]); //Array  console.dir({a: \u0026#34;foo\u0026#34;, b: \u0026#34;bar\u0026#34;}); //Object ▼ Array(3) 0: \u0026quot;foo\u0026quot; 1: \u0026quot;bar\u0026quot; 2: \u0026quot;qux\u0026quot; length: 3 ▼ __proto__: Array(0) ➤ concat: ƒ concat() ➤ constructor: ƒ Array() ➤ ... ▼ Object a: \u0026quot;foo\u0026quot; b: \u0026quot;bar\u0026quot; ➤ __proto__: Object We can also print scopes and closures of a function using console.dir,\nvar outerFunc = function(c){ var a = 1; var innerFunc = function(d) { var b = 2; return a + b + c + d; } return innerFunc; } console.dir(outerFunc(3)); ▼ ƒ innerFunc(d) arguments: null caller: null length: 1 name: \u0026quot;innerFunc\u0026quot; ➤ prototype: {constructor: ƒ} ➤ __proto__: ƒ () ▼ [[[Scopes]]: Scopes[2] ➤ 0: Closure (outerFunc) {c: 3, a: 1} ➤ 1: Global {parent: Window, opener: null, top: Window, length: 1, frames: Window, …} console.dirxml You can print DOM element in HTML like tree structure using console.dirxml\nconsole.dirxml(document.body); ▼ \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;hello\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt; console.dirxml(document.body); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; console.group You can group the log messages together using console.group and console.groupEnd.\nconsole.group(\u0026#34;API Details\u0026#34;); console.log(\u0026#34;Scheme : HTTPS\u0026#34;); console.log(\u0026#34;Host : example.com\u0026#34;); console.groupEnd(); ▼ API Details Scheme : HTTPS Host : example.com \nPlease note that group messages logged using console.group are initially expanded. If you\u0026rsquo;d rather have them collapsed by default, you can use console.groupCollapsed instead:\nconsole.groupCollapsed(\u0026#34;API Details\u0026#34;); console.log(\u0026#34;Scheme : HTTPS\u0026#34;); console.log(\u0026#34;Host : example.com\u0026#34;); console.groupEnd(); ▶ API Details \nYou can further group the messages to the nested levels. That allows you to print hierarchical data to the console in a cleanly formatted manner:\nconsole.group(\u0026#34;API Details\u0026#34;); console.log(\u0026#34;Scheme : HTTPS\u0026#34;); console.log(\u0026#34;Host : example.com\u0026#34;); // nesting  console.group(\u0026#34;User API\u0026#34;); console.log(\u0026#34;Method : GET\u0026#34;); console.log(\u0026#34;Endpoint : /user\u0026#34;); // further nesting  console.group(\u0026#34;Query Parameters\u0026#34;); console.log(\u0026#34;id : 1\u0026#34;); console.groupEnd(); console.groupEnd(); console.groupEnd(); ▼ API Details Scheme : HTTPS Host : example.com ▼ User API Method : GET Endpoint : /user ▼ Query Parameters id : 1 console.table You can print data in tabular format using console.table. This method is quite useful to visualize large objects and arrays.\nvar john = { firstName: \u0026#34;John\u0026#34;, lastName: \u0026#34;Smith\u0026#34;, age: 41 }; var jane = { firstName: \u0026#34;Jane\u0026#34;, lastName: \u0026#34;Doe\u0026#34;, age: 38 }; var emily = { firstName: \u0026#34;Emily\u0026#34;, lastName: \u0026#34;Jones\u0026#34;, age: 12 }; console.table([john, jane, emily]); ┌─────────┬───────────┬──────────┬─────┐ │ (index) │ firstName │ lastName │ age │ ├─────────┼───────────┼──────────┼─────┤ │ 0 │ 'John' │ 'Smith' │ 41 │ │ 1 │ 'Jane' │ 'Doe' │ 38 │ │ 2 │ 'Emily' │ 'Jones' │ 12 │ └─────────┴───────────┴──────────┴─────┘ ▶ Array(3) \nYou can also choose to print few properties when working with large objects in this way:\nconsole.table([john, jane, emily], [\u0026#34;firstName\u0026#34;]); ┌─────────┬───────────┐ │ (index) │ firstName │ ├─────────┼───────────┤ │ 0 │ 'John' │ │ 1 │ 'Jane' │ │ 2 │ 'Emily' │ └─────────┴───────────┘ ▶ Array(3)  Also learn more about console.table() usage in JavaScript\n console.time You can print time taken by a code execution by starting a timer with console.time and ending it with console.timeEnd.\nThe timer can have an optional label, if you use a timer with label then both console.time and console.timeEnd should have same label.\nconsole.time(\u0026#39;fetching data\u0026#39;); fetch(\u0026#39;https://jsonplaceholder.typicode.com/users\u0026#39;) .then(d =\u0026gt; d.json()) .then(console.log); console.timeEnd(\u0026#39;fetching data\u0026#39;); fetching data: 0.435791015625ms ▶ (10) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}] console.trace You can use console.trace() to print a stack trace of method execution flow to the console.\n1 const first = () =\u0026gt; { second(); }; 2 const second = () =\u0026gt; { third(); }; 3 const third = () =\u0026gt; { fourth(); }; 4 const fourth = () =\u0026gt; { console.trace(\u0026#34;The trace\u0026#34;); }; 5 first(); You get @ file_name:line_number in console output which you can click on to navigate to the source.\nOutput ▼ The trace fourth @ test:4 third\t@ test:3 second @ test:2 first\t@ test:1 (anonymous) @ test:5 console.log formatting console.log also provide formatting to make our log messages stand out from other messages. This gives us the ability to find our important messages in the console.\n %s format a value as a string %d or %i format a value as an integer %f format a value as a floating point number %o is used to print as expandable DOM Element %O is used to print as JavaScript object %c is used to apply CSS style rules to the output string as specified by the second parameter  Let\u0026rsquo;s format the values as string, integer and floating point number:\nconsole.log(\u0026#39;The %s is turning %d in next %f months\u0026#39;, \u0026#39;kid\u0026#39;, 18, 2.5); //The kid is turning 18 in next 2.5 months \nLet\u0026rsquo;s see what the fuss about printing DOM as expandable HTML element tree or JSON object tree:\nconsole.log(\u0026#39;%o\u0026#39;, document.body); //Print HTML element tree  console.log(\u0026#39;%O\u0026#39;, document.body); //Print JSON object tree ▶ \u0026lt;body class=\u0026quot;body\u0026quot; data-gr-c-s-loaded=\u0026quot;true\u0026quot;\u0026gt; ... \u0026lt;body\u0026gt; ▶ body.body \nYou can print colorful formatted log message like this:\nconst red = \u0026#39;color:red\u0026#39;; const orange = \u0026#39;color:orange\u0026#39;; const green = \u0026#39;color:green\u0026#39;; const blue = \u0026#39;color:blue\u0026#39;; console.log(\u0026#39;%cHello %cWorld %cfoo %cbar\u0026#39;, red, orange, green, blue); Hello World foo bar \nYou can also print stylish banner to the console using multiple style properties:\nconsole.log( \u0026#39;%cThanks for reading %cCodingNConcepts :)\u0026#39;, \u0026#39;color: #000; font-weight: bold; font-size: 1.5rem; border: 1px solid black; padding: 5px; margin-right: 5px;\u0026#39;, \u0026#39;color: #e22d30; font-weight: bold; font-size: 2rem; text-shadow: 0 0 5px rgba(0,0,0,0.2);\u0026#39;, ); Thanks for reading  CodingNConcepts :) ","permalink":"https://codingnconcepts.com/javascript/console-api-walkthrough/","tags":["Javascript Console"],"title":"JavaScript Console API Walkthrough"},{"categories":["Javascript"],"contents":"In this tutorial, we\u0026rsquo;ll learn plenty of tips and tricks for debugging JavaScript code using Chrome DevTool, different ways of logging to the console using console APIs, and much more\u0026hellip;\nSay No to alerts alert(\u0026#34;I will pop up in browser\u0026#34;);  When we use alert() for debugging value, it pops up in the browser which is blocking and annoying. Try to avoid them as there are alternate ways available for debugging, we\u0026rsquo;ll look at them subsequently.\nBrowser as Debugger Most of the modern browsers such as Chrome, Firefox, Edge, Opera, and Safari has built-in support for JavaScript debugging. Chrome as the debugger is generally the first choice among developers.\nChrome Developer Tool  To open DevTool from Chrome\u0026rsquo;s main menu, select More tools ➞ Developer tools.\n    Shortcut keys Mac Windows, Linux, Chrome OS     Elements Tab Command+Option+C Control+Shift+C   Console Tab Command+Option+J Control+Shift+J   Sources Tab Command+Option+I Control+Shift+I     Chrome Developer Tool\n  Some of the most frequently used icons of Chrome DevTools are:-\n Use Inspect icon ⬉ to select an element in the page and inspect its DOM position in Elements Tab. You can update or delete a DOM element, inspect the CSS applied on DOM element, and much more in Elements Tab. Use Device icon ⍇ to check the responsiveness of the website. It adds an additional toolbar on your browser page where you can simulate viewport for different devices, for e.g. mobile phones (such as iPhone, Samsung Galaxy, Nexus, LG, Nokia, Blackberry, etc), tablets (such as iPad etc) and laptops (with or without touch). You can see all JavaScript source code that renders the page, under Sources Tab. Generally source files are minified and it is difficult to understand them and apply breakpoints. Use Format Icon {} to format these minified files in human readable format.  Line-of-code Breakpoint You can use breakpoint to pause your JavaScript code in browser. The most well known type of breakpoint is line-of-code.\nTo set a line-of-code breakpoint in DevTools:\n Click on Sources tab. Open the file and go to the line of code you want to debug. You will see line number column to the left of code. Click on it. An icon appears beside line number to indicate that the breakpoint is set. Click again on same line number if you want to remove breakpoint. Icon disappears.  Please note that the breakpoint icon in DevTool may look different depending upon chrome version and OS (windows or MacOS)\nSometime line-of-code breakpoints can be inefficient to set, especially if you don\u0026rsquo;t know exactly where to look, or if you are working with a large codebase. You can save your time when debugging by knowing how and when to use the other types of breakpoints.\n   Breakpoint Type Use This When You Want To Pause\u0026hellip;     Line-of-code On an exact line of code.   Conditional line-of-code On an exact line of code, but only when some other condition is true.   DOM On the code that changes or removes a specific DOM node, or its children.   XHR On the XHR send() or fetch() method When the request URL contains a string pattern.   Event listener On the code that runs after an event, such as click, is fired.   Exception On the line of code that is throwing a caught or uncaught exception.   Function Whenever a specific function is called.    Set Breakpoint from code using \u0026lsquo;debugger\u0026rsquo; statement When debugger mode is on in the browser and the code execution reaches to debugger; statement, it pause on that line just like line-of-code breakpoint.\nThe debugger statement is quite useful when you want to debug a certain part of your code in browser. Normally you find the buggy code in browser developer tool and set a breakpoint to debug. Sometimes it is not easy to find the code in browser, in that case, you can insert debugger; statement in your source code.\nfunction hello(name) { let phrase = `Hello, ${name}!`; debugger; // \u0026lt;-- the debugger pause on this line  say(phrase); } Conditional Breakpoint You can use a conditional line-of-code breakpoint when you know the exact line of code that you need to investigate, but you want to pause only when some other condition is true.\nTo set a conditional line-of-code breakpoint:\n Click the Sources tab. Open the file and go to the line of code you want to debug. You will see line number column to the left of code. Right-click it. Select Edit breakpoint.., A dialog displays underneath the line of code. Enter your condition in the dialog. Press Enter to activate the breakpoint.  You see that icon for conditional breakpoint is different from simple line-of-code breakpoint. Breakpoint icon in DevTool may look different depending upon chrome version and OS (windows or MacOS)\n Chrome DevTool Conditional Breakpoint\n  DOM Change Breakpoint Use a DOM change breakpoint when you want to pause on the code that changes a DOM node or its children.\nTo set a DOM change breakpoint:\n Click the Elements tab. Go the element that you want to set the breakpoint on. Right-click the element. Hover over Break on then select Subtree modifications, Attribute modifications, or Node removal.  Types of DOM change breakpoints  Subtree modifications: Triggered when a child of the currently-selected node is removed or added, or the contents of a child are changed. Not triggered on child node attribute changes, or on any changes to the currently-selected node. Attributes modifications: Triggered when an attribute is added or removed on the currently-selected node, or when an attribute value changes. Node Removal: Triggered when the currently-selected node is removed.  XHR/Fetch Breakpoint If you encounter an error in AJAX request and you are not able to identify the code which is submitting this request, then XHR breakpoint is very useful to quickly find the AJAX source code.\nXHR breakpoint pause the execution of code when the request URL of an AJAX request contains a specified string. XHR breakpoint is supported for AJAX send() and fetch() methods.\nTo set an XHR breakpoint:\n Click the Sources tab. Expand the XHR Breakpoints pane. Click Add breakpoint. Enter the string which you want to break on. DevTools pauses when this string is present anywhere in an XHR\u0026rsquo;s request URL. Press Enter to confirm.  Event listener Breakpoint Use event listener breakpoints when you want to pause on the event listener code that runs after an event is fired. You can select specific events, such as click under mouse events, or all events, such as cut, copy, paste under clipboard category.\nTo turn on event listener breakpoint:\n Click the Sources tab. Expand the Event Listener Breakpoints pane. DevTools shows a list of event categories, such as Animation, Canvas, Clipboard, Mouse, etc. Either check ☑ category to include all events under that category, or expand the category and check ☑ a specific event.  Exception Breakpoint The Chrome Developer Tools allows you to pause execution of your JavaScript code upon throwing a caught or uncaught exception. This is particularly useful when your code is not throwing error and failing silently. This makes it possible for you to inspect the state of your application at the time when the Error object was created.\nTo turn on exception breakpoint:\n Click the Sources tab. Click Pause on exceptions icon. It turns blue when enabled. Check ☑ Pause on uncaught exceptions if you want to pause execution on caught exceptions as well. Remember to turn them off when done.   Chrome DevTool XHR, Event Listener and Exception Breakpoints\n  Function Breakpoint Call debug(functionName), where functionName is the function you want to debug, when you want to pause whenever a specific function is called. You can insert debug() into your code (like a console.log() statement) or call it from the DevTools Console. debug() is equivalent to setting a line-of-code breakpoint on the first line of the function.\nMake sure the target function is in scope. DevTools throws a ReferenceError if the function you want to debug is not in scope.\nfunction sum(a, b) { let result = a + b; // DevTools pauses on this line.  return result; } debug(sum); // Pass the function object, not a string. sum(); Blackbox Script files When you debug your application code in Chrome DevTool and step through your code line-by-line, the debugger sometimes jumps into a source file that\u0026rsquo;s not your focus (such as a third-party JS library). I\u0026rsquo;m sure you\u0026rsquo;ve experienced the annoyance of stepping through the library code before getting back to your own application code.\nThe Chrome DevTool provides an ability to blackbox JavaScript file(s) so that debugger will not jump into those files and ignore them when stepping through code you\u0026rsquo;re debugging.\nWhat happens when you blackbox a script?  Exceptions thrown from library code will not pause (if Pause on exceptions is enabled), Stepping into/out/over bypasses the library code, Event listener breakpoints don\u0026rsquo;t break in library code, The debugger will not pause on any breakpoints set in library code.  The end result is you are debugging your application code instead of third party resources. To blackbox JavaScript files:\n Click on Main Menu \u0026gt; Settings icon OR use F1 shortcut key to open settings Click on Blackboxing menu item. Click on Add Pattern\u0026hellip; button. Enter file name or pattern in text box and click Add button. Check ☑ Blackbox content script to enable blackboxing.   Chrome DevTool Blackbox Script\n  Snippets Generally we use browser console to execute and test some code snippets. Sometime, we need to test same code again and again. The Chrome DevTools provides the ability to save code snippets for future use.\nTo save your code snippet:\n Click the Sources tab. In the left panel of Sources Tab, Click on the Snippets sub-tab. Click on + New Snippet to create a new file to save your code snippet. When you open a snippet code. There are icons to format and execute your code.  You can use snippets to store your frequently used debugging code scripts, made by you or other developers. Paul Irish has written some useful snippets - stopBefore.js, Grep.js which you can copy in your DevTool snippets. Snippets are accessible from console. Let\u0026rsquo;s go through them:-\n The storeBefore.js snippet allows to setup a breakpoint that is triggered just before a certain function is called. For example, this will trigger a breakpoint just before the document.getElementById function is called: stopBefore(document, \u0026#39;getElementById\u0026#39;)  The grep.js snippet allows searching an object and its prototypical chain for properties that match a given search criteria. For example this instruction will search for all properties matching get in the document object: grep(document, \u0026#39;get\u0026#39;);  The debugAccess.js snippet allows to trigger a breakpoint when a given property is accessed. For example this will trigger a breakpoint each time document.cookie is called: debugAccess(document, \u0026#39;cookie\u0026#39;);   Print Multiple Values Most of the developers use console.log() for debugging values in browser console. It is a king of debugging and this solves most of your debugging problems.\nThe thing you might not know is, console.log() can print multiple values by providing comma-separated values so you don\u0026rsquo;t need to concat values yourself.\nEach comma \u0026quot;,\u0026quot; add a space between values.\nlet x = 1; console.log(\u0026#39;x =\u0026#39;, x); let y = \u0026#34;hello\u0026#34;; let fruits = [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;]; var obj = {a: 1, b: 2}; console.log(\u0026#39;x =\u0026#39;, x, \u0026#39;y =\u0026#39;, y, \u0026#39;fruits =\u0026#39;, fruits, \u0026#39;obj =\u0026#39;, obj); Output x = 1 x = 1 y = hello fruits = (3) [\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;mango\u0026quot;] obj = {a: 1, b: 2} You can also use Template Literal to combining multiple values in single string like this\nconsole.log(`x = ${x}, y = ${y}, fruits = ${fruits}, obj = ${obj}`); Avoid logging Object Reference  Don\u0026rsquo;t use console.log(obj), use console.log(JSON.parse(JSON.stringify(obj))) instead.\n When you log an array (or object) using console.log() and update it afterward. Many browsers show you the latest state of the array (or object) which might be misleading.\nLogging using console.log(JSON.parse(JSON.stringify(obj))) make sure, you are printing a copy of array (or object) which will log the exact state at the time of printing.\nLet\u0026rsquo;s understand this from below array example,\nlet fruits = [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;]; console.log(fruits); console.log(JSON.parse(JSON.stringify(fruits))); //makes a copy of it  fruits.push(\u0026#39;grapes\u0026#39;); Output ▼ (3) [\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;mango\u0026quot;] 0: \u0026quot;apple\u0026quot; 1: \u0026quot;banana\u0026quot; 2: \u0026quot;mango\u0026quot; 3: \u0026quot;grapes\u0026quot; length: 4 ➤ __proto__: Array(0) ▼ (3) [\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;mango\u0026quot;] 0: \u0026quot;apple\u0026quot; 1: \u0026quot;banana\u0026quot; 2: \u0026quot;mango\u0026quot; length: 3 ➤ __proto__: Array(0) We see that console.log() showing the latest state of array with length 4 whereas its length was 3 at the time of logging.\nLet\u0026rsquo;s also look at object example,\nlet person = { name: \u0026#39;adam\u0026#39;, age: 21, gender: \u0026#39;male\u0026#39; }; console.log(person); console.log(JSON.parse(JSON.stringify(person))); //makes a copy of it  person.married = \u0026#39;NO\u0026#39;; Output ▼ {name: \u0026quot;adam\u0026quot;, age: 21, gender: \u0026quot;male\u0026quot;} age: 21 gender: \u0026quot;male\u0026quot; married: \u0026quot;NO\u0026quot; name: \u0026quot;adam\u0026quot; ➤ __proto__: Object ▼ {name: \u0026quot;adam\u0026quot;, age: 21, gender: \u0026quot;male\u0026quot;} age: 21 gender: \u0026quot;male\u0026quot; name: \u0026quot;adam\u0026quot; ➤ __proto__: Object We see that console.log() showing the latest state of object including married field which was missing at the time of logging.\nPrint DOM element in JSON format DOM elements are printed as HTML elements tree structure using console.log(). Instead, we can use console.dir() to see DOM elements in JSON like tree structure.\nconsole.log(document.body); console.dir(document.body);  Print Constructor function\u0026rsquo;s Prototype Methods The console.dir() is quite useful to print constructor function\u0026rsquo;s internal properties such as prototype methods.\nWe see in below example that console.log() just print the name of constructor function whereas, using console.dir(), we\u0026rsquo;re able to see all prototype methods of Array function.\nconsole.log(Array); console.dir(Array); Output ƒ Array() { [native code] } ▼ ƒ Array() arguments: (...) caller: (...) length: 1 name: \u0026quot;Array\u0026quot; ▼ prototype: ƒ () length: 0 ➤ constructor: ƒ Array() ➤ concat: ƒ concat() ➤ find: ƒ find() ➤ findIndex: ƒ findIndex() ➤ lastIndexOf: ƒ lastIndexOf() ➤ pop: ƒ pop() ➤ push: ƒ push() ➤ reverse: ƒ reverse() ➤ slice: ƒ slice() ➤ sort: ƒ sort() ➤ splice: ƒ splice() ➤ includes: ƒ includes() ➤ indexOf: ƒ indexOf() ➤ join: ƒ join() ➤ toString: ƒ toString() ... Print Function\u0026rsquo;s Closure The console.dir() is quite useful to print function\u0026rsquo;s internal properties such as scopes and closures.\nWe see in below example that console.log() just print the function\u0026rsquo;s signature, using console.dir(), we’re able to see the prototype methods, scopes and most importantly closures of the function.\nvar outerFunc = function(c){ var a = 1; var innerFunc = function(d) { var b = 2; var innerMostFunc = function(e) { return a + b + c + d + e; } return innerMostFunc; } return innerFunc; } // print innerMostFunc console.log(outerFunc(3)(4)); console.dir(outerFunc(3)(4)); Output ƒ (e) { return a + b + c + d + e; } ▼ ƒ innerMostFunc(c) length: 1 name: \u0026quot;innerMostFunc\u0026quot; arguments: null caller: null ➤ prototype: {constructor: ƒ} ➤ __proto__: ƒ () [[FunctionLocation]]: ▼ [[Scopes]]: Scopes[3] ➤ 0: Closure (innerFunc) {d: 4, b: 2} ➤ 1: Closure (outerFunc) {c: 3, a: 1} ➤ 2: Global {parent: Window, opener: null, top: Window, length: 1, frames: Window, …} Print Object\u0026rsquo;s internal properties Some of the browsers print a stringify version of object when use console.log() whereas prints object JSON tree when use console.dir(). There is not much difference in printing in advance browsers such as chrome where both methods print object JSON tree.\nvar obj = {a: 1, b: 2}; console.log(obj); console.dir(obj); We see that nothing much different when print object using both methods in chrome browser,\nOutput ▼ {a: 1, b: 2} a: 1 b: 2 ➤ __proto__: Object ▼ Object a: 1 b: 2 ➤ __proto__: Object Print Objects as Table The console.table() method is quite useful to print a large set of data in tabular format to visualize it easily. This method also provides the ability to print a few fields out of those large data sets. When rendered in browser as a table, browser provides the ability to sort the columns of the table.\nLet\u0026rsquo;s look at the example where we are logging a large JSON in tabular format,\nvar personDetails = [ { \u0026#34;_id\u0026#34;: \u0026#34;5edbbb78633118f455e877fb\u0026#34;, \u0026#34;index\u0026#34;: 0, \u0026#34;guid\u0026#34;: \u0026#34;30dd1d2c-5083-4165-8580-5ae734cd0d12\u0026#34;, \u0026#34;isActive\u0026#34;: true, \u0026#34;balance\u0026#34;: \u0026#34;$1,778.03\u0026#34;, \u0026#34;picture\u0026#34;: \u0026#34;http://placehold.it/32x32\u0026#34;, \u0026#34;age\u0026#34;: 26, \u0026#34;eyeColor\u0026#34;: \u0026#34;blue\u0026#34;, \u0026#34;name\u0026#34;: { \u0026#34;first\u0026#34;: \u0026#34;Anderson\u0026#34;, \u0026#34;last\u0026#34;: \u0026#34;Sargent\u0026#34; }, \u0026#34;company\u0026#34;: \u0026#34;MAZUDA\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;anderson.sargent@mazuda.com\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;+1 (839) 437-3851\u0026#34;, \u0026#34;address\u0026#34;: \u0026#34;235 Ashland Place, Chautauqua, Minnesota, 3487\u0026#34;, \u0026#34;about\u0026#34;: \u0026#34;Pariatur nisi cillum culpa aliquip mollit veniam. Laboris in minim non dolor ut deserunt ex sit occaecat irure consequat pariatur esse. Cillum velit dolore enim non enim ipsum aliqua veniam fugiat adipisicing magna mollit occaecat.\u0026#34;, \u0026#34;registered\u0026#34;: \u0026#34;Saturday, April 8, 2017 3:02 AM\u0026#34;, \u0026#34;latitude\u0026#34;: \u0026#34;26.03084\u0026#34;, \u0026#34;longitude\u0026#34;: \u0026#34;-74.869342\u0026#34;, \u0026#34;tags\u0026#34;: [ \u0026#34;labore\u0026#34;, \u0026#34;nulla\u0026#34;, \u0026#34;ea\u0026#34;, \u0026#34;qui\u0026#34;, \u0026#34;sunt\u0026#34; ], \u0026#34;range\u0026#34;: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], \u0026#34;friends\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;Coleman Nunez\u0026#34; }, { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Foley Curry\u0026#34; }, { \u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;Kara Glass\u0026#34; } ], \u0026#34;greeting\u0026#34;: \u0026#34;Hello, Anderson! You have 5 unread messages.\u0026#34;, \u0026#34;favoriteFruit\u0026#34;: \u0026#34;apple\u0026#34; } ] console.table(personDetails); console.table(personDetails, [\u0026#34;age\u0026#34;, \u0026#34;eyeColor\u0026#34;]); // print few fields The below output in tabular format is from chrome browser,   Also learn more about console.table() usage in JavaScript\n Print Time taken for Code Execution You can print time taken by a code execution by using console.time() before and console.timeEnd() after that particular piece of code. Few pointers:-\n console.time() and console.timeEnd() methods should have same labels. You can also set up multiple timers by assigning different labels to the method. console.time() and console.timeEnd() are part of the Console API (just like console.log())  Let’s see how it works:\nconsole.time(\u0026#39;Timer1\u0026#39;); console.time(\u0026#39;Timer2\u0026#39;); var items = []; for(var i = 0; i \u0026lt; 100000; i++){ items.push({index: i}); } console.timeEnd(\u0026#39;Timer1\u0026#39;); for(var j = 0; j \u0026lt; 100000; j++){ items.push({index: j}); } console.timeEnd(\u0026#39;Timer2\u0026#39;); Output Timer1: 13.088134765625ms Timer2: 26.070517578125ms Print Stack trace of Method Execution You can use console.trace() to print a stack trace of method execution flow to the console. Few pointers:-\n console.trace() is compatible with the snippets feature of Chrome DevTools. console.trace() is part of the Console API (just like console.log())  Let’s see how it works:\n1 const first = () =\u0026gt; { second(); }; 2 const second = () =\u0026gt; { third(); }; 3 const third = () =\u0026gt; { fourth(); }; 4 const fourth = () =\u0026gt; { console.trace(\u0026#34;The trace\u0026#34;); }; 5 first(); You get @ file_name:line_number in console output which you can click on to navigate to the source.\nOutput ▼ The trace fourth @ test:4 third\t@ test:3 second @ test:2 first\t@ test:1 (anonymous) @ test:5 Use a Unit Testing Framework There are many third-party unit-testing framework for JavaScript available with their own philosophy and syntax. Here are most widely used JavaScript testing frameworks:-\n Mocha is feature-rich framework running on Node.js and in the browser, making asynchronous testing simple and fun. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases. JEST is popular framework maintained by Facebook. It is a preferred framework for the React based applications as it requires zero configuration. It works great with projects using Babel, TypeScript, Node, React, Angular, and Vue. Jasmine is a behavior-driven testing framework. It has no external dependencies. It does not require a DOM. And it has a clean, obvious syntax so that you can easily write tests. QUnit is a powerful, easy-to-use JavaScript unit testing framework. It\u0026rsquo;s used by the jQuery, jQuery UI and jQuery Mobile projects and is capable of testing any generic JavaScript code  \nThanks for reading till the end. I hope this tutorial would have helped you to find some useful tips for debugging and logging to the console, which you\u0026rsquo;d not known before.\nReference:\n Google Developers Chrome DevTool ","permalink":"https://codingnconcepts.com/javascript/debugging-tips-and-tricks/","tags":["Javascript Console"],"title":"JavaScript Debugging Tips and Tricks"},{"categories":["Hugo"],"contents":"In this tutorial, we\u0026rsquo;ll learn how to setup client side search engine for Hugo Website without any backend server or additional build steps required.\nOverview When you generate a website using Hugo static site generator. You write your pages generally in markdown (.md files) so all your content lies in the markdown files.\nWe are going to follow these steps to create our search engine:-\n Update config.toml file to instruct Hugo to generate JSON file of entire website content Create layouts/_default/index.json to provide a template to Hugo for generating a index.json file Create static/js/search.js to use Fuse.js for searching content out of this JSON file Create content/search.md to serve a page for /search URL Create layouts/_default/search.html to provide a template to render your search page results  Follow the steps:- Update config.toml Hugo provide out of the box support to generate content in multiple formats including JSON. All we need to do is to tell Hugo that we want to generate index.json file for entire website content.\nAdd the following snippet in config.toml file to instruct Hugo to generate JSON output along with HTML and RSS default outputs:\nconfig.toml ... [outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;RSS\u0026quot;, \u0026quot;JSON\u0026quot;] \nCreate layouts/_default/index.json Once we instruct Hugo to generate index.json file, Hugo looks for the template to generate file. Add the following index.json template to specified folder:\nlayouts/_default/index.json {{- $.Scratch.Add \u0026quot;index\u0026quot; slice -}} {{- range .Site.RegularPages -}} {{- $.Scratch.Add \u0026quot;index\u0026quot; (dict \u0026quot;title\u0026quot; .Title \u0026quot;tags\u0026quot; .Params.tags \u0026quot;categories\u0026quot; .Params.categories \u0026quot;contents\u0026quot; .Plain \u0026quot;permalink\u0026quot; .Permalink) -}} {{- end -}} {{- $.Scratch.Get \u0026quot;index\u0026quot; | jsonify -}} \nCreate search.js Now create a search.js file which uses jquery, fuse.js, and mark.js to parse generated index.json file, and return matching content, with highlighting.\nPlease note that initial part of the code in search.js provide config:-\n summaryInclude: Number of pages to show in search result fuseOptions: keys is important parameter where you can increase the weight of title, contents, tags or categories values to give them high priority in matching the content in search results.  static/js/search.js summaryInclude=60; var fuseOptions = { shouldSort: true, includeMatches: true, threshold: 0.0, tokenize:true, location: 0, distance: 100, maxPatternLength: 32, minMatchCharLength: 1, keys: [ {name:\u0026#34;title\u0026#34;,weight:0.8}, {name:\u0026#34;contents\u0026#34;,weight:0.5}, {name:\u0026#34;tags\u0026#34;,weight:0.3}, {name:\u0026#34;categories\u0026#34;,weight:0.3} ] }; var searchQuery = param(\u0026#34;s\u0026#34;); if(searchQuery){ $(\u0026#34;#search-query\u0026#34;).val(searchQuery); executeSearch(searchQuery); }else { $(\u0026#39;#search-results\u0026#39;).append(\u0026#34;\u0026lt;p\u0026gt;Please enter a word or phrase above\u0026lt;/p\u0026gt;\u0026#34;); } function executeSearch(searchQuery){ $.getJSON( \u0026#34;/index.json\u0026#34;, function( data ) { var pages = data; var fuse = new Fuse(pages, fuseOptions); var result = fuse.search(searchQuery); console.log({\u0026#34;matches\u0026#34;:result}); if(result.length \u0026gt; 0){ populateResults(result); }else{ $(\u0026#39;#search-results\u0026#39;).append(\u0026#34;\u0026lt;p\u0026gt;No matches found\u0026lt;/p\u0026gt;\u0026#34;); } }); } function populateResults(result){ $.each(result,function(key,value){ var contents= value.item.contents; var snippet = \u0026#34;\u0026#34;; var snippetHighlights=[]; var tags =[]; if( fuseOptions.tokenize ){ snippetHighlights.push(searchQuery); }else{ $.each(value.matches,function(matchKey,mvalue){ if(mvalue.key == \u0026#34;tags\u0026#34; || mvalue.key == \u0026#34;categories\u0026#34; ){ snippetHighlights.push(mvalue.value); }else if(mvalue.key == \u0026#34;contents\u0026#34;){ start = mvalue.indices[0][0]-summaryInclude\u0026gt;0?mvalue.indices[0][0]-summaryInclude:0; end = mvalue.indices[0][1]+summaryInclude\u0026lt;contents.length?mvalue.indices[0][1]+summaryInclude:contents.length; snippet += contents.substring(start,end); snippetHighlights.push(mvalue.value.substring(mvalue.indices[0][0],mvalue.indices[0][1]-mvalue.indices[0][0]+1)); } }); } if(snippet.length\u0026lt;1){ snippet += contents.substring(0,summaryInclude*2); } //pull template from hugo templarte definition  var templateDefinition = $(\u0026#39;#search-result-template\u0026#39;).html(); //replace values  var output = render(templateDefinition,{key:key,title:value.item.title,link:value.item.permalink,tags:value.item.tags,categories:value.item.categories,snippet:snippet}); $(\u0026#39;#search-results\u0026#39;).append(output); $.each(snippetHighlights,function(snipkey,snipvalue){ $(\u0026#34;#summary-\u0026#34;+key).mark(snipvalue); }); }); } function param(name) { return decodeURIComponent((location.search.split(name + \u0026#39;=\u0026#39;)[1] || \u0026#39;\u0026#39;).split(\u0026#39;\u0026amp;\u0026#39;)[0]).replace(/\\+/g, \u0026#39; \u0026#39;); } function render(templateString, data) { var conditionalMatches,conditionalPattern,copy; conditionalPattern = /\\$\\{\\s*isset ([a-zA-Z]*) \\s*\\}(.*)\\$\\{\\s*end\\s*}/g; //since loop below depends on re.lastInxdex, we use a copy to capture any manipulations whilst inside the loop  copy = templateString; while ((conditionalMatches = conditionalPattern.exec(templateString)) !== null) { if(data[conditionalMatches[1]]){ //valid key, remove conditionals, leave contents.  copy = copy.replace(conditionalMatches[0],conditionalMatches[2]); }else{ //not valid, remove entire section  copy = copy.replace(conditionalMatches[0],\u0026#39;\u0026#39;); } } templateString = copy; //now any conditionals removed we can do simple substitution  var key, find, re; for (key in data) { find = \u0026#39;\\\\$\\\\{\\\\s*\u0026#39; + key + \u0026#39;\\\\s*\\\\}\u0026#39;; re = new RegExp(find, \u0026#39;g\u0026#39;); templateString = templateString.replace(re, data[key]); } return templateString; } \nCreate content/search.md Create search.md to create a page solely to respond to /search URL. No content from this page is rendered. As we have defined the front-matter layout as \u0026ldquo;search\u0026rdquo;, content is rendered on this page is from template layouts/_default/search.html\ncontent/search.md --- title: \u0026quot;Search Results\u0026quot; sitemap: priority : 0.1 layout: \u0026quot;search\u0026quot; --- Nothing on this page will be visible. This file exists solely to respond to /search URL. Setting a very low sitemap priority will tell search engines this is not important content. \nCreate layouts/_default/search.html This is the page rendered when viewing /search in your browser. This example uses the template functionality to load content and all required JS files in the \u0026ldquo;main\u0026rdquo; block.\nlayouts/_default/search.html {{ define \u0026quot;main\u0026quot; }} \u0026lt;script src=\u0026quot;https://code.jquery.com/jquery-3.3.1.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/fuse.js/3.2.0/fuse.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/mark.js/8.11.1/jquery.mark.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;{{ \u0026quot;js/search.js\u0026quot; | absURL }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;section class=\u0026quot;resume-section p-3 p-lg-5 d-flex flex-column\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;my-auto\u0026quot; \u0026gt; \u0026lt;form action=\u0026quot;{{ \u0026quot;search\u0026quot; | absURL }}\u0026quot;\u0026gt; \u0026lt;input id=\u0026quot;search-query\u0026quot; name=\u0026quot;s\u0026quot;/\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;div id=\u0026quot;search-results\u0026quot;\u0026gt; \u0026lt;h3\u0026gt;Matching pages\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;!-- this template is sucked in by search.js and appended to the search-results div above. So editing here will adjust style --\u0026gt; \u0026lt;script id=\u0026quot;search-result-template\u0026quot; type=\u0026quot;text/x-js-template\u0026quot;\u0026gt; \u0026lt;div id=\u0026quot;summary-${key}\u0026quot;\u0026gt; \u0026lt;h4\u0026gt;\u0026lt;a href=\u0026quot;${link}\u0026quot;\u0026gt;${title}\u0026lt;/a\u0026gt;\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt;${snippet}\u0026lt;/p\u0026gt; ${ isset tags }\u0026lt;p\u0026gt;Tags: ${tags}\u0026lt;/p\u0026gt;${ end } ${ isset categories }\u0026lt;p\u0026gt;Categories: ${categories}\u0026lt;/p\u0026gt;${ end } \u0026lt;/div\u0026gt; \u0026lt;/script\u0026gt; {{ end }} You may require to put some efforts on layouts/_default/search.html file to match the search result output as per your theme. You can create any template, as long as you include the third-party libs (jquery, fuse, mark.js) before search.js, it will work.\nCustomization for Hugo Mainroad Theme I have created this blog website using Hugo static site generator and Hugo Mainroad theme. I have done some changes in above search.html template to match Mainroad theme.\nlayouts/_default/search.html {{ define \u0026quot;main\u0026quot; }} \u0026lt;script src=\u0026quot;https://code.jquery.com/jquery-3.3.1.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/fuse.js/3.2.0/fuse.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/mark.js/8.11.1/jquery.mark.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;{{ \u0026quot;js/search.js\u0026quot; | absURL }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;main class=\u0026quot;main list\u0026quot; role=\u0026quot;main\u0026quot;\u0026gt; {{- with .Title }} \u0026lt;header class=\u0026quot;main__header\u0026quot;\u0026gt; \u0026lt;h1 class=\u0026quot;main__title\u0026quot;\u0026gt;{{ . }} \u0026lt;span class=\u0026quot;list__lead post__lead\u0026quot; id=\u0026quot;search-string\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; {{- end }} \u0026lt;div id=\u0026quot;search-results\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;!-- this template is sucked in by search.js and appended to the search-results div above. So editing here will adjust style --\u0026gt; \u0026lt;script id=\u0026quot;search-result-template\u0026quot; type=\u0026quot;text/x-js-template\u0026quot;\u0026gt; \u0026lt;article class=\u0026quot;list__item post\u0026quot; id=\u0026quot;summary-${key}\u0026quot;\u0026gt; \u0026lt;header class=\u0026quot;list__header\u0026quot;\u0026gt; \u0026lt;h3 class=\u0026quot;list__title post__title \u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;${link}\u0026quot; rel=\u0026quot;bookmark\u0026quot;\u0026gt; ${title} \u0026lt;/a\u0026gt; \u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026quot;list__meta meta\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;meta__item-categories meta__item\u0026quot;\u0026gt; \u0026lt;svg class=\u0026quot;meta__icon icon icon-category\u0026quot; width=\u0026quot;16\u0026quot; height=\u0026quot;16\u0026quot; viewBox=\u0026quot;0 0 16 16\u0026quot;\u0026gt;\u0026lt;path d=\u0026quot;m7 2l1 2h8v11h-16v-13z\u0026quot;/\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;span class=\u0026quot;meta__text\u0026quot;\u0026gt; ${ isset categories } ${categories}${ end } \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;meta__item-categories meta__item\u0026quot;\u0026gt; \u0026lt;svg class=\u0026quot;meta__icon icon icon-tag\u0026quot; width=\u0026quot;16\u0026quot; height=\u0026quot;16\u0026quot; viewBox=\u0026quot;0 0 32 32\u0026quot;\u0026gt;\u0026lt;path d=\u0026quot;M32 19c0 1-1 2-1 2L21 31s-1 1-2 1-2-1-2-1L2 16c-1-1-1.4-2-1.4-2S0 12.5 0 11V3C0 1.5.8.8.8.8S1.5 0 3 0h8c1.5 0 3 .6 3 .6S15 1 16 2l15 15s1 1 1 2zM7 10a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\u0026quot;/\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;span class=\u0026quot;meta__text\u0026quot;\u0026gt; ${ isset tags } ${tags}${ end } \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div class=\u0026quot;content list__excerpt post__content clearfix\u0026quot;\u0026gt; ${snippet} \u0026lt;/div\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;/script\u0026gt; {{ end }} I have also done some changes in search box widget for Hugo Mainroad theme as follows:-\nlayouts/partials/widgets/search.html \u0026lt;div class=\u0026quot;widget-search widget\u0026quot;\u0026gt; \u0026lt;form class=\u0026quot;widget-search__form\u0026quot; role=\u0026quot;search\u0026quot; method=\u0026quot;get\u0026quot; action=\u0026quot;{{ \u0026quot;search\u0026quot; | absURL }}\u0026quot;\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input class=\u0026quot;widget-search__field\u0026quot; type=\u0026quot;search\u0026quot; placeholder=\u0026quot;{{ T \u0026quot;search_placeholder\u0026quot; }}\u0026quot; value=\u0026quot;\u0026quot; name=\u0026quot;s\u0026quot; aria-label=\u0026quot;{{ T \u0026quot;search_placeholder\u0026quot; }}\u0026quot;\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input class=\u0026quot;widget-search__submit\u0026quot; type=\u0026quot;submit\u0026quot; value=\u0026quot;Search\u0026quot;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; Conclusion We have learned in this tutorial how easily we can create a client side search engine for our Hugo website. You can follow first four steps blindly and require some efforts for 5th step to match search.html template as per your theme.\nOnce you are done with all the changes, checkout the search result in your dev server as follows:-\nhttp://localhost:1313/search/?s=searchquery If you want to see how search results look like for my blog website CodingNConcepts, Hit https://codingnconcepts.com/search/?s=java\nReference: gist.github.com/eddiewebb\n","permalink":"https://codingnconcepts.com/hugo/client-side-search-engine-hugo/","tags":["Hugo Defaults"],"title":"Client Side Search Engine for Hugo Website"},{"categories":["Java"],"contents":"Factory Design Pattern is one of the most commonly used design patterns. It falls under the category of Creational Design Patterns.\nOverview Analogy As the name suggests, Factory Design Pattern is based on real time Factory concept. As we know that factory manufactures products as per the requirements. It does not expose the internal details of manufacturing. Also, in case of requirements for newer products, it manufactures them as well.\nSimilarly, Factory Design Pattern enables us to create objects using a factory class without exposing the creation logic to the client and thus providing abstraction with flexibility to extension.\nWhen a client needs an object it asks the factory for it by providing some information on the type of object it requires. Factory method in factory class acts as a single place to create the objects from concrete classes based on the client\u0026rsquo;s input and return them as objects of interface or abstract types.\nVirtual Constructor This pattern replaces the direct object construction calls (using new operator) from client with calls to factory method. Since it replaces direct constructor calls, it is also known as Virtual Constructor.\nGoF Design Patterns According to GoF (Gangs of Four) Design Patterns,\n Factory Design Pattern defines an interface for creating an object, but let subclasses decide which class to instantiate. The Factory method lets a class defer instantiation to subclasses.\n When to use Factory Design Pattern?  When we need to create objects of types which may be sub-classed. When client needs to create an object based on some input parameter and need not know how the object is created Also, a good choice when we don’t know the exact types before hand when starting on a project. This would provide ease to extensibility.  How to implement Factory Design Pattern?  Create a super class (an interface) Create sub class(es) (requirement based):  Concrete A Concrete B Concrete C   Factory Class with factory method that accepts some input parameter (to decide the type of object) to return the required object as object of interface Create an Enum that would be used to define types based on which factory method would create an object of concrete class Client code(main class) which creates an object using factory method of factory class by providing some input parameter and then use it  Code Example Now we know what are the classes required to build a Factory Design Pattern.\n   Let\u0026rsquo;s first create an interface named Currency\npublic interface Currency { String getCode(); String getSign(); }   Create concrete classes Rupee, SGDollar, and USDollar implementing Currency interface\npublic class Rupee implements Currency { @Override public String getCode() { return \u0026#34;INR\u0026#34;; } @Override public String getSign() { return \u0026#34;₹\u0026#34;; } } public class SGDollar implements Currency { @Override public String getCode() { return \u0026#34;SGD\u0026#34;; } @Override public String getSign() { return \u0026#34;S$\u0026#34;; } } public class USDollar implements Currency { @Override public String getCode() { return \u0026#34;USD\u0026#34;; } @Override public String getSign() { return \u0026#34;$\u0026#34;; } }   Create an Enum Country for input parameter to factory method\npublic enum Country { INDIA, SINGAPORE, USA, CANADA }   Finally create a factory class CurrencyFactory\npublic class CurrencyFactory { public static Currency createCurrency(String country) { if(country.equalsIgnoreCase(Country.SINGAPORE.toString())) { return new SGDollar(); } else if(country.equalsIgnoreCase(Country.INDIA.toString()) { return new Rupee(); } else if(country.equalsIgnoreCase(Country.USA.toString())) { return new USDollar(); } throw new IllegalArgumentException(String.format(\u0026#34;No currency found for \u0026#39;%s\u0026#39;\u0026#34;, country)); } }   Let\u0026rsquo;s create a Client (Main Class) to test our Factory\npublic class Client { public static void main(String [] args) { Currency indiaCurrency = CurrencyFactory.createCurrency(Country.INDIA.toString()); Currency singaporeCurrency = CurrencyFactory.createCurrency(Country.SINGAPORE.toString()); Currency usaCurrency = CurrencyFactory.createCurrency(Country.USA.toString()); //Currency canadaCurrency = CurrencyFactory.createCurrency(Country.CANADA.toString());  //Exception in thread \u0026#34;main\u0026#34; java.lang.IllegalArgumentException: No currency found for \u0026#39;CANADA\u0026#39;  System.out.println(indiaCurrency.getCode()); System.out.println(indiaCurrency.getSign()); System.out.println(singaporeCurrency.getCode()); System.out.println(singaporeCurrency.getSign()); System.out.println(usaCurrency.getCode()); System.out.println(usaCurrency.getSign()); } } Output INR ₹ SGD S$ USD $   Advantages of Factory Design Pattern  Loose Coupling: Introduces loose coupling between classes. Hence, involves programming against abstract entities rather than concrete implementations. Encapsulation: Good approach to encapsulation. Factory method used to create different objects from factory encapsulates the object creation code. Abstraction: Provides abstraction between implementation and client classes through inheritance. Single Responsibility Principle: Object creation is done at one place and this separates out the object creation code from actual usage. Any changes in object creation in future would require change in only place. Open/Closed Principle: Further to extend the functionality of factory to support newer type would be a small change i.e. adding a new subclass and corresponding object creation logic in factory method. ","permalink":"https://codingnconcepts.com/java/factory-design-pattern-java/","tags":["Java Design Pattern"],"title":"Factory Design Pattern In Java"},{"categories":["Javascript"],"contents":"In this tutorial, we\u0026rsquo;ll learn how we can display data in tabular format in console using console.table() advance logging method. This comes in very handy to visualize complex array and objects in JavaScript.\nconsole.table([]) We are logging array of numbers using both console.log() and console.table() to see how nicely console.table() has printed a table to display numbers array.\nvar numbers = [\u0026#34;one\u0026#34;, \u0026#34;two\u0026#34;, \u0026#34;three\u0026#34;]; console.log(numbers); console.table(numbers);  Output [ 'one', 'two', 'three' ] ┌─────────┬─────────┐ │ (index) │ Values │ ├─────────┼─────────┤ │ 0 │ 'one' │ │ 1 │ 'two' │ │ 2 │ 'three' │ └─────────┴─────────┘ console.table([ [], [], [] ]) The visualization in tabular format becomes more handy when we print array of arrays using console.table() as compare to console.log() method.\nvar numbers = [[\u0026#34;one\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;I\u0026#34;], [\u0026#34;two\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;II\u0026#34;], [\u0026#34;three\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;III\u0026#34;]]; console.log(numbers); console.table(numbers); Output [ [ 'one', '1', 'I' ], [ 'two', '2', 'II' ], [ 'three', '3', 'III' ] ] ┌─────────┬─────────┬─────┬───────┐ │ (index) │ 0 │ 1 │ 2 │ ├─────────┼─────────┼─────┼───────┤ │ 0 │ 'one' │ '1' │ 'I' │ │ 1 │ 'two' │ '2' │ 'II' │ │ 2 │ 'three' │ '3' │ 'III' │ └─────────┴─────────┴─────┴───────┘ console.table(Object) Similar to arrays, Objects can be printed using console.table() to visualize in tabular format.\nfunction Person(firstName, lastName, age) { this.firstName = firstName; this.lastName = lastName; this.age = age; } var john = new Person(\u0026#34;John\u0026#34;, \u0026#34;Smith\u0026#34;, 41); console.log(john); console.table(john); Output Person { firstName: 'John', lastName: 'Smith', age: 41 } ┌───────────┬─────────┐ │ (index) │ Values │ ├───────────┼─────────┤ │ firstName │ 'John' │ │ lastName │ 'Smith' │ │ age │ 41 │ └───────────┴─────────┘ console.table(Objects[]) The visualization in tabular format becomes more handy when we print array of objects using console.table() as compare to console.log() method.\nvar john = new Person(\u0026#34;John\u0026#34;, \u0026#34;Smith\u0026#34;, 41); var jane = new Person(\u0026#34;Jane\u0026#34;, \u0026#34;Doe\u0026#34;, 38); var emily = new Person(\u0026#34;Emily\u0026#34;, \u0026#34;Jones\u0026#34;, 12); console.log([john, jane, emily]); console.table([john, jane, emily]); Output [ Person { firstName: 'John', lastName: 'Smith', age: 41 }, Person { firstName: 'Jane', lastName: 'Doe', age: 38 }, Person { firstName: 'Emily', lastName: 'Jones', age: 12 } ] ┌─────────┬───────────┬──────────┬─────┐ │ (index) │ firstName │ lastName │ age │ ├─────────┼───────────┼──────────┼─────┤ │ 0 │ 'John' │ 'Smith' │ 41 │ │ 1 │ 'Jane' │ 'Doe' │ 38 │ │ 2 │ 'Emily' │ 'Jones' │ 12 │ └─────────┴───────────┴──────────┴─────┘ Restrict Column Display You can pass the second arguments as array of fields, which you want to display. Only those columns will be displayed in tabular format.\nconsole.table([john, jane, emily], [\u0026#34;firstName\u0026#34;]); Output ┌─────────┬───────────┐ │ (index) │ firstName │ ├─────────┼───────────┤ │ 0 │ 'John' │ │ 1 │ 'Jane' │ │ 2 │ 'Emily' │ └─────────┴───────────┘ console.table(Object of Objects) Complex nested objects are very easy to visualize using console.table()\nvar family = {}; family.mother = new Person(\u0026#34;Jane\u0026#34;, \u0026#34;Smith\u0026#34;, 38); family.father = new Person(\u0026#34;John\u0026#34;, \u0026#34;Smith\u0026#34;, 41); family.daughter = new Person(\u0026#34;Emily\u0026#34;, \u0026#34;Smith\u0026#34;, 12); console.table(family); Output ┌──────────┬───────────┬──────────┬─────┐ │ (index) │ firstName │ lastName │ age │ ├──────────┼───────────┼──────────┼─────┤ │ mother │ 'Jane' │ 'Smith' │ 38 │ │ father │ 'John' │ 'Smith' │ 41 │ │ daughter │ 'Emily' │ 'Smith' │ 12 │ └──────────┴───────────┴──────────┴─────┘ Sort Column Display Also note that when these tabular formats are rendered in browser console. You can click on table column headers to sort by column.\n┌──────────┬─────────────┬──────────┬─────┐ │ (index) │ firstName ▲ │ lastName │ age │ ├──────────┼─────────────┼──────────┼─────┤ │ daughter │ 'Emily' │ 'Smith' │ 12 │ │ mother │ 'Jane' │ 'Smith' │ 38 │ │ father │ 'John' │ 'Smith' │ 41 │ └──────────┴─────────────┴──────────┴─────┘ Restrict Column Display Again, pass the second arguments as array of fields, which you want to display. Only those columns will be displayed in tabular format.\nconsole.table(family, [\u0026#34;firstName\u0026#34;, \u0026#34;age\u0026#34;]); Output ┌──────────┬───────────┬─────┐ │ (index) │ firstName │ age │ ├──────────┼───────────┼─────┤ │ mother │ 'Jane' │ 38 │ │ father │ 'John' │ 41 │ │ daughter │ 'Emily' │ 12 │ └──────────┴───────────┴─────┘ Conclusion We learned in this tutorial that how console.table() is useful to visualize complex arrays and objects in tabular format, and also provide the ability to sort columns and restrict column display.\nThis advance logging method is supported by all modern browsers like chrome, edge, firefox, opera and safari.\nReference: MDN web docs\n","permalink":"https://codingnconcepts.com/javascript/console-table-javascript/","tags":["Javascript Console"],"title":"console.table() in JavaScript"},{"categories":["Hugo"],"contents":"If you are using Hugo as a static site generator tool then you can create a partial to show social icons like facebook, twitter, linkedin, whatsapp etc to share page links on social media.\nCreate socialshare.html Parital First of all we are going to create a partial called socialshare.html which is responsible to create social share icons for your hugo blog pages. All you need to do is copy the below code snippet and save it under $hugo/layouts/partials/socialshare.html.\nsocialshare.html \u0026lt;!-- Social Share Button HTML --\u0026gt; {{- if .Param \u0026#34;socialshare\u0026#34; }} {{ $title := .Title }} {{ $url := printf \u0026#34;%s\u0026#34; .Permalink }} {{ $body := print $title \u0026#34;, by \u0026#34; .Site.Title \u0026#34;\\n\u0026#34; .Params.description \u0026#34;\\n\\n\u0026#34; $url \u0026#34;\\n\u0026#34; }} \u0026lt;section class=\u0026#34;social-share\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;share-icons\u0026#34;\u0026gt; \u0026lt;!-- Twitter --\u0026gt; {{ if .Site.Params.social.share.twitter }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/intent/tweet?hashtags=codingnconcepts\u0026amp;amp;url={{ .Permalink }}\u0026amp;amp;text={{ .Title }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34; aria-label=\u0026#34;Share on Twitter\u0026#34; class=\u0026#34;share-btn twitter\u0026#34;\u0026gt; {{ partial \u0026#34;svg/twitter.svg\u0026#34; (dict \u0026#34;class\u0026#34; \u0026#34;widget-social__link-icon\u0026#34;) }} \u0026lt;p\u0026gt;Twitter\u0026lt;/p\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;!-- Facebook --\u0026gt; {{ if .Site.Params.social.share.facebook }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;https://www.facebook.com/sharer.php?u={{ $url }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34; aria-label=\u0026#34;Share on Facebook\u0026#34; class=\u0026#34;share-btn facebook\u0026#34;\u0026gt; {{ partial \u0026#34;svg/facebook.svg\u0026#34; (dict \u0026#34;class\u0026#34; \u0026#34;widget-social__link-icon\u0026#34;) }} \u0026lt;p\u0026gt;Facebook\u0026lt;/p\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;!-- LinkedIn --\u0026gt; {{ if .Site.Params.social.share.linkedin }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;https://www.linkedin.com/shareArticle?mini=true\u0026amp;amp;url={{ $url }}\u0026amp;amp;source={{ $url }}\u0026amp;amp;title={{ $title }}\u0026amp;amp;summary={{ $title }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34; aria-label=\u0026#34;Share on LinkedIn\u0026#34; class=\u0026#34;share-btn linkedin\u0026#34;\u0026gt; {{ partial \u0026#34;svg/linkedin.svg\u0026#34; (dict \u0026#34;class\u0026#34; \u0026#34;widget-social__link-icon\u0026#34;) }} \u0026lt;p\u0026gt;LinkedIn\u0026lt;/p\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;!-- WhatsApp --\u0026gt; {{ if .Site.Params.social.share.whatsapp }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;whatsapp://send?text={{ $body }}\u0026#34; target=\u0026#34;_blank\u0026#34; class=\u0026#34;share-btn whatsapp\u0026#34;\u0026gt; {{ partial \u0026#34;svg/whatsapp.svg\u0026#34; (dict \u0026#34;class\u0026#34; \u0026#34;widget-social__link-icon\u0026#34;) }} \u0026lt;p\u0026gt;Email\u0026lt;/p\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;!-- Email --\u0026gt; {{ if .Site.Params.social.share.email }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;mailto:?subject={{ .Site.Title }} - {{ $title }}.\u0026amp;amp;body={{ $body }}\u0026#34; target=\u0026#34;_blank\u0026#34; class=\u0026#34;share-btn email\u0026#34;\u0026gt; {{ partial \u0026#34;svg/email.svg\u0026#34; (dict \u0026#34;class\u0026#34; \u0026#34;widget-social__link-icon\u0026#34;) }} \u0026lt;p\u0026gt;Email\u0026lt;/p\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/section\u0026gt; {{ end }} {{- end }} You see that in socialshare.html partial, we have used some svg partials for social share icons. Here are some social share svg partial, which you should save under $hugo/layouts/partials/svg folder\ntwitter.svg \u0026lt;svg class=\u0026quot;{{ with .class }}{{ . }} {{ end }}icon icon-twitter\u0026quot; width=\u0026quot;24\u0026quot; height=\u0026quot;24\u0026quot; viewBox=\u0026quot;0 0 384 312\u0026quot;\u0026gt;\u0026lt;path d=\u0026quot;m384 36.9c-14.1 6.3-29.3 10.5-45.2 12.4 16.3-9.7 28.8-25.2 34.6-43.6-15.2 9-32.1 15.6-50 19.1-14.4-15.2-34.9-24.8-57.5-24.8-43.5 0-78.8 35.3-78.8 78.8 0 6.2.7 12.2 2 17.9-65.5-3.3-123.5-34.6-162.4-82.3-6.7 11.6-10.6 25.2-10.6 39.6 0 27.3 13.9 51.4 35 65.6-12.9-.4-25.1-4-35.7-9.9v1c0 38.2 27.2 70 63.2 77.2-6.6 1.8-13.6 2.8-20.8 2.8-5.1 0-10-.5-14.8-1.4 10 31.3 39.1 54.1 73.6 54.7-27 21.1-60.9 33.7-97.8 33.7-6.4 0-12.6-.4-18.8-1.1 34.9 22.4 76.3 35.4 120.8 35.4 144.9 0 224.1-120 224.1-224.1 0-3.4-.1-6.8-.2-10.2 15.4-11.1 28.7-25 39.3-40.8z\u0026quot;/\u0026gt;\u0026lt;/svg\u0026gt; facebook.svg \u0026lt;svg class=\u0026quot;{{ with .class }}{{ . }} {{ end }}icon icon-facebook\u0026quot; width=\u0026quot;24\u0026quot; height=\u0026quot;24\u0026quot; viewBox=\u0026quot;0 0 352 352\u0026quot;\u0026gt;\u0026lt;path d=\u0026quot;m0 32v288c0 17.5 14.5 32 32 32h288c17.5 0 32-14.5 32-32v-288c0-17.5-14.5-32-32-32h-288c-17.5 0-32 14.5-32 32zm320 0v288h-83v-108h41.5l6-48h-47.5v-31c0-14 3.5-23.5 23.5-23.5h26v-43.5c-4.4-.6-19.8-1.5-37.5-1.5-36.9 0-62 22.2-62 63.5v36h-42v48h42v108h-155v-288z\u0026quot;/\u0026gt;\u0026lt;/svg\u0026gt; linkedin.svg \u0026lt;svg class=\u0026quot;{{ with .class }}{{ . }} {{ end }}icon icon-linkedin\u0026quot; width=\u0026quot;24\u0026quot; height=\u0026quot;24\u0026quot; viewBox=\u0026quot;0 0 352 352\u0026quot;\u0026gt;\u0026lt;path d=\u0026quot;M0,40v272c0,21.9,18.1,40,40,40h272c21.9,0,40-18.1,40-40V40c0-21.9-18.1-40-40-40H40C18.1,0,0,18.1,0,40z M312,32 c4.6,0,8,3.4,8,8v272c0,4.6-3.4,8-8,8H40c-4.6,0-8-3.4-8-8V40c0-4.6,3.4-8,8-8H312z M59.5,87c0,15.2,12.3,27.5,27.5,27.5 c15.2,0,27.5-12.3,27.5-27.5c0-15.2-12.3-27.5-27.5-27.5C71.8,59.5,59.5,71.8,59.5,87z M187,157h-1v-21h-45v152h47v-75 c0-19.8,3.9-39,28.5-39c24.2,0,24.5,22.4,24.5,40v74h47v-83.5c0-40.9-8.7-72-56.5-72C208.5,132.5,193.3,145.1,187,157z M64,288h47.5 V136H64V288z\u0026quot;/\u0026gt;\u0026lt;/svg\u0026gt; whatsapp.svg \u0026lt;svg class=\u0026quot;{{ with .class }}{{ . }} {{ end }}icon icon-whatsapp\u0026quot; width=\u0026quot;24\u0026quot; height=\u0026quot;24\u0026quot; viewBox=\u0026quot;0 0 24 24\u0026quot;\u0026gt;\u0026lt;path d=\u0026quot;M20.1 3.9C17.9 1.7 15 .5 12 .5 5.8.5.7 5.6.7 11.9c0 2 .5 3.9 1.5 5.6L.6 23.4l6-1.6c1.6.9 3.5 1.3 5.4 1.3 6.3 0 11.4-5.1 11.4-11.4-.1-2.8-1.2-5.7-3.3-7.8zM12 21.4c-1.7 0-3.3-.5-4.8-1.3l-.4-.2-3.5 1 1-3.4L4 17c-1-1.5-1.4-3.2-1.4-5.1 0-5.2 4.2-9.4 9.4-9.4 2.5 0 4.9 1 6.7 2.8 1.8 1.8 2.8 4.2 2.8 6.7-.1 5.2-4.3 9.4-9.5 9.4zm5.1-7.1c-.3-.1-1.7-.9-1.9-1-.3-.1-.5-.1-.7.1-.2.3-.8 1-.9 1.1-.2.2-.3.2-.6.1s-1.2-.5-2.3-1.4c-.9-.8-1.4-1.7-1.6-2-.2-.3 0-.5.1-.6s.3-.3.4-.5c.2-.1.3-.3.4-.5.1-.2 0-.4 0-.5C10 9 9.3 7.6 9 7c-.1-.4-.4-.3-.5-.3h-.6s-.4.1-.7.3c-.3.3-1 1-1 2.4s1 2.8 1.1 3c.1.2 2 3.1 4.9 4.3.7.3 1.2.5 1.6.6.7.2 1.3.2 1.8.1.6-.1 1.7-.7 1.9-1.3.2-.7.2-1.2.2-1.3-.1-.3-.3-.4-.6-.5z\u0026quot;/\u0026gt;\u0026lt;/svg\u0026gt; email.svg \u0026lt;svg class=\u0026quot;{{ with .class }}{{ . }} {{ end }}icon icon-mail\u0026quot; width=\u0026quot;24\u0026quot; height=\u0026quot;24\u0026quot; viewBox=\u0026quot;0 0 416 288\u0026quot;\u0026gt;\u0026lt;path d=\u0026quot;m0 16v256 16h16 384 16v-16-256-16h-16-384-16zm347 16-139 92.5-139-92.5zm-148 125.5 9 5.5 9-5.5 167-111.5v210h-352v-210z\u0026quot;/\u0026gt;\u0026lt;/svg\u0026gt; CSS for socialshare.html Please note that the provided CSS is just for your reference. You might need to tweak or write your own CSS based on your hugo theme.\nstyle.css .social-share { position: relative; top: -0.5em; } .social-share ul { margin: 0; } .social-share ul li p { display: none; } .social-share .share-icons li { padding: 0 !important; padding-bottom: 10px !important; } .social-share .share-btn { padding: 0.25em; width: 3em; } .social-share-nav .share-btn h3{ color: #ffffff; } ul.share-icons { cursor: default; list-style: none; padding-left: 0; margin-top: 1em; } ul.share-icons li { display: inline-block; padding: 0 1em 0 0; } ul.share-icons li:last-child { padding-right: 0; } ul.share-icons li \u0026gt; * { text-decoration: none; border: 0; } ul.share-icons li \u0026gt; *:before { -moz-osx-font-smoothing: grayscale; -webkit-font-smoothing: antialiased; font-family: FontAwesome; font-style: normal; font-weight: normal; text-transform: none !important; } ul.share-icons li \u0026gt; * .label { display: none; } .share-btn { display: inline-block; color: #ffffff; border: none; border-radius: 4px; box-shadow: 0 2px 0 0 rgba(0,0,0,0.2); outline: none; text-align: center; text-decoration: none; } .share-btn:hover { color: #ffffff !important; } .share-btn:active { position: relative; top: 2px; box-shadow: none; color: #e2e2e2; outline: none; } .share-btn .widget-social__link-icon { margin: 0; } .share-btn.twitter { background: #55acee; } .share-btn.google-plus { background: #dd4b39; } .share-btn.facebook { background: #3B5998; } .share-btn.linkedin { background: #4875B4; } .share-btn.stumbleupon { background: #EB4823; } .share-btn.pinterest { background: #BD081C; } .share-btn.reddit { background: #ff5700; } .share-btn.email { background: #444444; } .share-btn.whatsapp { background: #25d366; } .share-btn.twitter:hover { background: #4c9ad6; } .share-btn.google-plus:hover { background: #c64333; } .share-btn.facebook:hover { background: #2f4779; } .share-btn.linkedin:hover { background: #4069a2; } .share-btn.stumbleupon:hover { background: #d3401f; } .share-btn.pinterest:hover { background: #AD0000; } .share-btn.reddit:hover { background: #e54e00; } .share-btn.email:hover { background: #363636; } SocialShare front-matter You can control whether you want to display social share icons on specific page. If socialshare is true, social icons will be displayed on that page otherwise not be displayed.\nblog-page.md --- ... socialshare: true --- SocialShare config.toml You need to add following configuration in config.toml file. You can enable and disable social share icons site-wide using this configuration.\nconfig.toml [Params.social.share] facebook = true linkedin = true twitter = true whatsapp = true email = true \nAdd socialshare.html partial to single.html You need to add socialshare partial to single.html file as below:-\nsingle.html {{ define \u0026#34;main\u0026#34; }} \u0026lt;main\u0026gt; \u0026lt;article\u0026gt; \u0026lt;header\u0026gt; ... \u0026lt;/header\u0026gt;\t... \u0026lt;footer\u0026gt; ... \u0026lt;/footer\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;/main\u0026gt; ... {{ partial \u0026#34;socialshare.html\u0026#34; . }} {{ end }} ","permalink":"https://codingnconcepts.com/hugo/social-icons-hugo/","tags":["Hugo Partial"],"title":"Add Social Icons in Hugo Website Pages"},{"categories":["Hugo"],"contents":"In this tutorial, we\u0026rsquo;ll learn how to disable or customize sitemap.xml for Hugo website.\nOverview When you generate a website using Hugo static site generator. There are few points to understand about sitemap.xml:-\n Hugo out of the box creates a sitemap.xml based on the Sitemap Protocol v0.9. The sitemap.xml file contains entries for these kind of pages:-  home is website\u0026rsquo;s home page e.g. https://example.com/ section is all the folders in content directory $hugo/content/*.* page is all the pages in content directory $hugo/content/*.*. taxonomyTerm e.g. url /categories , /tags taxonomy e.g. url /categories/*.*, /tags/*.*    Following is a sample sitemap.xml including all kind of pages:-\nsitemap.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt; \u0026lt;urlset xmlns=\u0026#34;http://www.sitemaps.org/schemas/sitemap/0.9\u0026#34; xmlns:xhtml=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34;\u0026gt; \u0026lt;url\u0026gt; \u0026lt;!-- \u0026lt;kind\u0026gt;home\u0026lt;/kind\u0026gt; --\u0026gt; \u0026lt;loc\u0026gt;https://example.com/\u0026lt;/loc\u0026gt; \u0026lt;lastmod\u0026gt;2020-06-04T00:00:00+00:00\u0026lt;/lastmod\u0026gt; \u0026lt;/url\u0026gt; \u0026lt;url\u0026gt; \u0026lt;!-- \u0026lt;kind\u0026gt;section\u0026lt;/kind\u0026gt; --\u0026gt; \u0026lt;loc\u0026gt;https://example.com/hugo/\u0026lt;/loc\u0026gt; \u0026lt;lastmod\u0026gt;2020-06-04T00:00:00+00:00\u0026lt;/lastmod\u0026gt; \u0026lt;/url\u0026gt; \u0026lt;url\u0026gt; \u0026lt;!-- \u0026lt;kind\u0026gt;page\u0026lt;/kind\u0026gt; --\u0026gt; \u0026lt;loc\u0026gt;https://example.com/hugo/sitemap-hugo/\u0026lt;/loc\u0026gt; \u0026lt;lastmod\u0026gt;2020-06-04T00:00:00+00:00\u0026lt;/lastmod\u0026gt; \u0026lt;/url\u0026gt; \u0026lt;url\u0026gt; \u0026lt;!-- \u0026lt;kind\u0026gt;taxonomyTerm\u0026lt;/kind\u0026gt; --\u0026gt; \u0026lt;loc\u0026gt;https://example.com/categories/\u0026lt;/loc\u0026gt; \u0026lt;lastmod\u0026gt;2020-06-04T00:00:00+00:00\u0026lt;/lastmod\u0026gt; \u0026lt;/url\u0026gt; \u0026lt;url\u0026gt; \u0026lt;!-- \u0026lt;kind\u0026gt;taxonomyTerm\u0026lt;/kind\u0026gt; --\u0026gt; \u0026lt;loc\u0026gt;https://example.com/tags/\u0026lt;/loc\u0026gt; \u0026lt;lastmod\u0026gt;2020-06-04T00:00:00+00:00\u0026lt;/lastmod\u0026gt; \u0026lt;/url\u0026gt; \u0026lt;url\u0026gt; \u0026lt;!-- \u0026lt;kind\u0026gt;taxonomy\u0026lt;/kind\u0026gt; --\u0026gt; \u0026lt;loc\u0026gt;https://example.com/categories/hugo/\u0026lt;/loc\u0026gt; \u0026lt;lastmod\u0026gt;2020-06-04T00:00:00+00:00\u0026lt;/lastmod\u0026gt; \u0026lt;/url\u0026gt; \u0026lt;url\u0026gt; \u0026lt;!-- \u0026lt;kind\u0026gt;taxonomy\u0026lt;/kind\u0026gt; --\u0026gt; \u0026lt;loc\u0026gt;https://example.com/tags/hugo-defaults/\u0026lt;/loc\u0026gt; \u0026lt;lastmod\u0026gt;2020-06-04T00:00:00+00:00\u0026lt;/lastmod\u0026gt; \u0026lt;/url\u0026gt; \u0026lt;/urlset\u0026gt; Disable sitemap.xml There are two ways to disable generating of sitemap.xml\nDisable using config.toml This approach is recommended, when you want to disable sitemap.xml permanently everytime you build your website.\nAdd the \u0026quot;sitemap\u0026quot; value to the disableKinds configuration variable in your configuration file.\nconfig.toml title = \u0026quot;Hugo example site\u0026quot; baseurl = \u0026quot;https://www.example.com\u0026quot; disableKinds = [\u0026#34;sitemap\u0026#34;] [taxonomies] category = \u0026quot;categories\u0026quot; tag = \u0026quot;tags\u0026quot;  You can turn off multiple type of pages by giving comma separated values in disableKinds configuration.\nFor example, below is an example to turn off generation of sitemap.xml , RSS feed and robots.txt files all together.\n config.toml title = \u0026quot;Hugo example site\u0026quot; baseurl = \u0026quot;https://www.example.com\u0026quot; disableKinds = [\u0026#34;sitemap\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;robotsTXT\u0026#34;] [taxonomies] category = \u0026quot;categories\u0026quot; tag = \u0026quot;tags\u0026quot; Disable using command-line This approach is recommended, when you want to disable sitemap.xml for a specific build of your website.\nTo generate a hugo website without sitemap, execute following command from terminal:\nhugo --disableKinds=sitemap To serve website in the localhost environment without a sitemap, execute following command from terminal:\nhugo server --disableKinds=sitemap  You can disable multiple kind of pages like sitemap.xml , RSS feed and robots.txt by executing following command from terminal:\n hugo --disableKinds=sitemap,RSS,robotsTXT Customize sitemap.xml Hugo has a built-in Sitemap template, but if you want to customize sitemap.xml then first of all copy and paste below hugo\u0026rsquo;s default sitemap template in layouts/_default/sitemap.xml location:-\n/layouts/_default/sitemap.xml {{ printf \u0026#34;\u0026lt;?xml version=\\\u0026#34;1.0\\\u0026#34; encoding=\\\u0026#34;utf-8\\\u0026#34; standalone=\\\u0026#34;yes\\\u0026#34;?\u0026gt;\u0026#34; | safeHTML }} \u0026lt;urlset xmlns=\u0026#34;http://www.sitemaps.org/schemas/sitemap/0.9\u0026#34; xmlns:xhtml=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34;\u0026gt; {{ range .Data.Pages }} \u0026lt;url\u0026gt; \u0026lt;loc\u0026gt;{{ .Permalink }}\u0026lt;/loc\u0026gt;{{ if not .Lastmod.IsZero }} \u0026lt;lastmod\u0026gt;{{ safeHTML ( .Lastmod.Format \u0026#34;2006-01-02T15:04:05-07:00\u0026#34; ) }}\u0026lt;/lastmod\u0026gt;{{ end }}{{ with .Sitemap.ChangeFreq }} \u0026lt;changefreq\u0026gt;{{ . }}\u0026lt;/changefreq\u0026gt;{{ end }}{{ if ge .Sitemap.Priority 0.0 }} \u0026lt;priority\u0026gt;{{ .Sitemap.Priority }}\u0026lt;/priority\u0026gt;{{ end }}{{ if .IsTranslated }}{{ range .Translations }} \u0026lt;xhtml:link rel=\u0026#34;alternate\u0026#34; hreflang=\u0026#34;{{ .Language.Lang }}\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34; /\u0026gt;{{ end }} \u0026lt;xhtml:link rel=\u0026#34;alternate\u0026#34; hreflang=\u0026#34;{{ .Language.Lang }}\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34; /\u0026gt;{{ end }} \u0026lt;/url\u0026gt; {{ end }} \u0026lt;/urlset\u0026gt; Now let\u0026rsquo;s do changes in above template to meet our requirement:-\nExclude taxonomy pages from sitemap.xml This is most common use case where you want to skip taxonomy pages like category (/category/.) and tags (/tags/.) pages from sitemap.xml.\nNotice that we have added a condition {{ if ne .Kind \u0026quot;taxonomy\u0026quot; }} in default sitemap template to exclude taxonomy pages\n/layouts/_default/sitemap.xml {{ printf \u0026#34;\u0026lt;?xml version=\\\u0026#34;1.0\\\u0026#34; encoding=\\\u0026#34;utf-8\\\u0026#34; standalone=\\\u0026#34;yes\\\u0026#34;?\u0026gt;\u0026#34; | safeHTML }} \u0026lt;urlset xmlns=\u0026#34;http://www.sitemaps.org/schemas/sitemap/0.9\u0026#34; xmlns:xhtml=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34;\u0026gt; {{ range .Data.Pages }}{{ if ne .Kind \u0026#34;taxonomy\u0026#34; }} \u0026lt;url\u0026gt; \u0026lt;loc\u0026gt;{{ .Permalink }}\u0026lt;/loc\u0026gt;{{ if not .Lastmod.IsZero }} \u0026lt;lastmod\u0026gt;{{ safeHTML ( .Lastmod.Format \u0026#34;2006-01-02T15:04:05-07:00\u0026#34; ) }}\u0026lt;/lastmod\u0026gt;{{ end }}{{ with .Sitemap.ChangeFreq }} \u0026lt;changefreq\u0026gt;{{ . }}\u0026lt;/changefreq\u0026gt;{{ end }}{{ if ge .Sitemap.Priority 0.0 }} \u0026lt;priority\u0026gt;{{ .Sitemap.Priority }}\u0026lt;/priority\u0026gt;{{ end }}{{ if .IsTranslated }}{{ range .Translations }} \u0026lt;xhtml:link rel=\u0026#34;alternate\u0026#34; hreflang=\u0026#34;{{ .Language.Lang }}\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34; /\u0026gt;{{ end }} \u0026lt;xhtml:link rel=\u0026#34;alternate\u0026#34; hreflang=\u0026#34;{{ .Language.Lang }}\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34; /\u0026gt;{{ end }} \u0026lt;/url\u0026gt; {{ end }}{{ end }} \u0026lt;/urlset\u0026gt; \nExclude specific pages from sitemap.xml This is also very common use case where you want to skip some pages from sitemap.xml.\nNotice that we have added a condition {{ if ne .Params.sitemap_ignore true }} in default sitemap template to exclude pages based on sitemap_ignore flag\n/layouts/_default/sitemap.xml {{ printf \u0026#34;\u0026lt;?xml version=\\\u0026#34;1.0\\\u0026#34; encoding=\\\u0026#34;utf-8\\\u0026#34; standalone=\\\u0026#34;yes\\\u0026#34;?\u0026gt;\u0026#34; | safeHTML }} \u0026lt;urlset xmlns=\u0026#34;http://www.sitemaps.org/schemas/sitemap/0.9\u0026#34; xmlns:xhtml=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34;\u0026gt; {{ range .Data.Pages }}{{ if ne .Params.sitemap_ignore true }} \u0026lt;url\u0026gt; \u0026lt;loc\u0026gt;{{ .Permalink }}\u0026lt;/loc\u0026gt;{{ if not .Lastmod.IsZero }} \u0026lt;lastmod\u0026gt;{{ safeHTML ( .Lastmod.Format \u0026#34;2006-01-02T15:04:05-07:00\u0026#34; ) }}\u0026lt;/lastmod\u0026gt;{{ end }}{{ with .Sitemap.ChangeFreq }} \u0026lt;changefreq\u0026gt;{{ . }}\u0026lt;/changefreq\u0026gt;{{ end }}{{ if ge .Sitemap.Priority 0.0 }} \u0026lt;priority\u0026gt;{{ .Sitemap.Priority }}\u0026lt;/priority\u0026gt;{{ end }}{{ if .IsTranslated }}{{ range .Translations }} \u0026lt;xhtml:link rel=\u0026#34;alternate\u0026#34; hreflang=\u0026#34;{{ .Language.Lang }}\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34; /\u0026gt;{{ end }} \u0026lt;xhtml:link rel=\u0026#34;alternate\u0026#34; hreflang=\u0026#34;{{ .Language.Lang }}\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34; /\u0026gt;{{ end }} \u0026lt;/url\u0026gt; {{ end }}{{ end }} \u0026lt;/urlset\u0026gt; Now any page, you want to exclude from sitemap.xml, add the following property in front-matter of that page\nblog-page.md --- ... sitemap_ignore: true --- \nExclude taxonomy and specific pages from sitemap.xml Let\u0026rsquo;s combine the last two examples where you want to skip taxonomy pages and specific pages based sitemap_ignore flag. I am using the below sitemap.xml in my own website.\nNotice that we have combined the conditions of last two examples {{ if and (ne .Kind \u0026quot;taxonomy\u0026quot;) (ne .Params.sitemap_ignore true) }}\n/layouts/_default/sitemap.xml {{ printf \u0026#34;\u0026lt;?xml version=\\\u0026#34;1.0\\\u0026#34; encoding=\\\u0026#34;utf-8\\\u0026#34; standalone=\\\u0026#34;yes\\\u0026#34;?\u0026gt;\u0026#34; | safeHTML }} \u0026lt;urlset xmlns=\u0026#34;http://www.sitemaps.org/schemas/sitemap/0.9\u0026#34; xmlns:xhtml=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34;\u0026gt; {{ range .Data.Pages }}{{ if and (ne .Kind \u0026#34;taxonomy\u0026#34;) (ne .Params.sitemap_ignore true) }} \u0026lt;url\u0026gt; \u0026lt;loc\u0026gt;{{ .Permalink }}\u0026lt;/loc\u0026gt;{{ if not .Lastmod.IsZero }} \u0026lt;lastmod\u0026gt;{{ safeHTML ( .Lastmod.Format \u0026#34;2006-01-02T15:04:05-07:00\u0026#34; ) }}\u0026lt;/lastmod\u0026gt;{{ end }}{{ with .Sitemap.ChangeFreq }} \u0026lt;changefreq\u0026gt;{{ . }}\u0026lt;/changefreq\u0026gt;{{ end }}{{ if ge .Sitemap.Priority 0.0 }} \u0026lt;priority\u0026gt;{{ .Sitemap.Priority }}\u0026lt;/priority\u0026gt;{{ end }}{{ if .IsTranslated }}{{ range .Translations }} \u0026lt;xhtml:link rel=\u0026#34;alternate\u0026#34; hreflang=\u0026#34;{{ .Language.Lang }}\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34; /\u0026gt;{{ end }} \u0026lt;xhtml:link rel=\u0026#34;alternate\u0026#34; hreflang=\u0026#34;{{ .Language.Lang }}\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34; /\u0026gt;{{ end }} \u0026lt;/url\u0026gt; {{ end }}{{ end }} \u0026lt;/urlset\u0026gt; Summary In this tutorial, we\u0026rsquo;ve learned how to customize sitemap.xml for your hugo website. If you have any other requirements of sitemap.xml customization, or you are facing issue following the tutorial. Please comment, I\u0026rsquo;ll try to solve your problem as soon as possible.\n","permalink":"https://codingnconcepts.com/hugo/sitemap-hugo/","tags":["Hugo Defaults"],"title":"Customize sitemap in Hugo Website"},{"categories":["Java"],"contents":"In this tutorial, we\u0026rsquo;ll learn different ways to compare two strings in Java\nCompare Strings using \u0026ldquo;==\u0026rdquo; operator 1String string1 = \u0026#34;CodingNConcepts\u0026#34;; 2String string2 = \u0026#34;CodingNConcepts\u0026#34;; 3String string3 = new String(\u0026#34;CodingNConcepts\u0026#34;); 4String string4 = new String(\u0026#34;CodingNConcepts\u0026#34;); 5 6System.out.println(string1 == string2); // true 7System.out.println(string1 == string3); // false 8System.out.println(string3 == string4); // false 9 10string3 = string3.intern(); 11string4 = string4.intern(); 12 13System.out.println(string1 == string3); // true 14System.out.println(string3 == string4); // true Explanation  line 6: string1 and string2 both are initialized using literal so they both are referring to same string stored in String-Pool line 7: string3 is initialized using New so it always creates a new string object in Java heap memory whereas string1 refers to string from String-Pool line 8: Since String initialized using New always create a new string object, string3 and string4 both refers to different string object in heap memory line 10,11: When you call intern() on a string, it returns a string from String-Pool if exist otherwise a new string is created in String-Pool and returned.\nSo now after executing line 10 and 11, string3 and string4 refers to same string from String-Pool line 13,14: After executing line 10 and 11, all four strings string1, string2, string3 and string4 refers to same string from String-Pool  Compare Strings using equals() method String\u0026rsquo;s equals() method - returns true if the string argument is not null and both the comparing strings have the same sequence of characters in same case.\n1String string1 = \u0026#34;CodingNConcepts\u0026#34;; 2String string2 = \u0026#34;CodingNConcepts\u0026#34;; 3String string3 = new String(\u0026#34;CodingNConcepts\u0026#34;); 4String string4 = new String(\u0026#34;CODINGNCONCEPTS\u0026#34;); 5 6System.out.println(string1.equals(string2)); // true 7System.out.println(string1.equals(string3)); // true 8System.out.println(string1.equals(string4)); // false 9System.out.println(string1.equals(null)); // false Explanation  line 6: string1 and string2 both have same character sequence line 7: string1 and string3 both have same character sequence line 8: string1 and string4 both have same character sequence but case is different line 9: string argument is null ","permalink":"https://codingnconcepts.com/java/compare-two-strings-in-java/","tags":["Java String"],"title":"How to Compare two Strings in Java"},{"categories":["Java"],"contents":"In this tutorial, we\u0026rsquo;ll learn different ways to iterate over a list in Java.\nPrint List using for loop Let\u0026rsquo;s print list of prime numbers using basic and enhanced for loop\nList\u0026lt;Integer\u0026gt; primeNumbers = Arrays.asList(1, 2, 3, 5, 7); // basic for loop for(int i = 0; i \u0026lt; primeNumbers.size(); i++) { System.out.println(primeNumbers.get(i)); } // enhanced for loop for (Integer number : primeNumbers) { System.out.println(number); } Print List using forEach Java 8 introduced forEach method to loop through a List which is very convenient and easy to use.\nList\u0026lt;Integer\u0026gt; primeNumbers = Arrays.asList(1, 2, 3, 5, 7); // Iterable.forEach with lambda expression primeNumbers.forEach(number -\u0026gt; System.out.println(number)); // Iterable.forEach with method reference :: primeNumbers.forEach(System.out::println); // Stream.forEach with lambda expression primeNumbers.stream().forEach(number -\u0026gt; System.out.println(number)); // Stream.forEach with method reference :: primeNumbers.stream().forEach(System.out::println); Print List using Iterator Iterator is used to iterate over the list in forward direction.\n hasNext() Returns true if the iteration has more elements. next() Returns the next element in the iteration.  List\u0026lt;Integer\u0026gt; primeNumbers = Arrays.asList(1, 2, 3, 5, 7); Iterator\u0026lt;Integer\u0026gt; iterator = primeNumbers.iterator(); while(iterator.hasNext()) { System.out.println(iterator.next()); } Print List using ListIterator ListIterator is an iterator for lists that allows the programmer to traverse the list in either direction (forward or backward), and obtain the iterator\u0026rsquo;s current position in the list.\n hasNext() returns true if this list iterator has more elements when traversing the list in the forward direction. next() returns the next element in the list and advances the cursor position. hasPrevious() returns true if this list iterator has more elements when traversing the list in the reverse direction. previous() returns the previous element in the list and moves the cursor position backwards.  List\u0026lt;Integer\u0026gt; primeNumbers = Arrays.asList(1, 2, 3, 5, 7); ListIterator\u0026lt;Integer\u0026gt; listIterator = primeNumbers.listIterator(); // iterate forward while(listIterator.hasNext()) { System.out.println(listIterator.next()); } // iterate backward while(listIterator.hasPrevious()) { System.out.println(listIterator.previous()); } ","permalink":"https://codingnconcepts.com/java/iterate-list-in-java/","tags":["Java Collection"],"title":"How to Iterate over a List in Java"},{"categories":["Java"],"contents":"In this article, we\u0026rsquo;ll learn how to find middle element of a linked list using multiple approach in Java.\nApproach 1: Keep track of the LinkedList size In first approach, we can keep track of size of the linked list. We can have a size counter initialized as zero. Increase or decrease the counter by 1, on addition or deletion of nodes from linked list respectively.\nIn this case, middle element\u0026rsquo;s index will be (size-1)/2\nclass LinkedList\u0026lt;T\u0026gt; { Node\u0026lt;T\u0026gt; head = null; int size = 0; public Node\u0026lt;T\u0026gt; get(int index) { Node\u0026lt;T\u0026gt; node = head; // get by index \treturn node; } public void add(T t) { // add element \tsize++; } public void delete(int index) { // delete element \tsize--; } public void findMiddleElement() { get((size - 1) / 2); } } \nApproach 2: Traverse the LinkedList to find size Sometime we have given only the head node of the linked list and no information about the size.\nIn simplest approach, we can traverse through whole linked list starting from head till end to find the size of the linked list.\nIn this case, middle element\u0026rsquo;s index will be (size()-1)/2\nclass LinkedList\u0026lt;T\u0026gt; { Node\u0026lt;T\u0026gt; head = null; public Node\u0026lt;T\u0026gt; get(int index) { Node\u0026lt;T\u0026gt; node = head; // get by index \treturn node; } public int size() { Node\u0026lt;T\u0026gt; node = head; int size = 1; while (node.getNext() != null) { node = node.getNext(); size++; } return size; } public void findMiddleElement() { get((size() - 1) / 2); } } If linked list is having n elements, then this approach requires n iteration to get size and n/2 iteration to get middle elements.\nTotal iteration is (n + n/2)\n\nApproach 3: Fast and Slow pointers This approach is also applicable when size of the linked list is unknown and only head node is given.\nIn this approach, we iterate through the linked list using two pointers. Fast pointer jumps 2 nodes in each iteration, and the slow pointer jumps only one node per iteration.\nWhen the fast pointer reaches the end of the list, the slow pointer will be at the middle element.\nclass LinkedList\u0026lt;T\u0026gt; { Node\u0026lt;T\u0026gt; head = null; public Node\u0026lt;T\u0026gt; findMiddleElement() { Node\u0026lt;T\u0026gt; slow = head; Node\u0026lt;T\u0026gt; fast = head; while (fast != null \u0026amp;\u0026amp; fast.getNext() != null) { fast = fast.getNext().getNext(); slow = slow.getNext(); } return slow; } } This is best approach when size is unknown as we are able to find the middle elements in just n/2 iterations.\n\nSummary We learned that it is always good to keep track of linked list size to find the middle element. Moreover, when size of the linked list is unknown then Fast and slow pointer approach is the way to go.\n","permalink":"https://codingnconcepts.com/java/middle-element-of-linked-list-java/","tags":["Java Collection"],"title":"Find Middle Element of Linked List in Java"},{"categories":["Spring Boot"],"contents":"In this article, we\u0026rsquo;ll learn how to use @ConfigurationProperties with .yml file instead of .properties file for configuration in Spring Boot Project.\napplication.yml YAML (YAML Ain\u0026rsquo;t Markup Language) which is defined as .yml file, is becoming popular for configuration over traditional .properties file because of its simplicity and readability.\n# Peson properties person: # string name: Ashish Kumar Lahoti # string occupation: programmer # int age: 33 # float gpa: 3.5 # double fav_num: 1e+10 # boolean male: true # date birthday: 1986-08-22 # empty flaws: null # array hobbies: - bike riding - watching movies - online games - cooking # array movies: [\u0026#34;Dark Knight\u0026#34;, \u0026#34;Spider Man\u0026#34;, \u0026#34;Thor\u0026#34;] # map assets: {Car: 1, Bike: 2, Home: 1} # object array friends: - name: \u0026#34;eve\u0026#34; age: 28 - {name: \u0026#34;adam\u0026#34;, age: 26} - name: \u0026#34;chloe\u0026#34; age: 40 # multi line string using \u0026gt; description: \u0026gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua # multi line string with line break preserved using | signature: | Thanks \u0026amp; Regards, Ashish Kumar Lahoti email - lahoti.ashish20@gmail.com Points to note from above application.yml example:-\n You can comment in .yml file by adding # prefix You can define primitive types - String, int, float, double, boolean You can define date in standard date formats like YYYY-MM-DD You can define properties with empty or null values You can define array in two ways:-  Add new line for each element prefixed by - Add comma separated values like [ item1, item2, \u0026hellip;]   You can define map - key value pairs like { Key1: value1, Key2: value2, \u0026hellip;. } You can define array of objects You can define multiline string using prefix \u0026gt; or |. Please note that line break is preserved when you use |  @ConfigurationProperties We have defined person properties in our application.yml. Let\u0026rsquo;s map these properties to a configuration class file using @ConfigurationProperties annotation at class level\n@Configuration @ConfigurationProperties(\u0026#34;person\u0026#34;) public class PersonConfig { private String name; private String occupation; private int age; private float gpa; private double favNum; private boolean male; private String birthday; private String flaws; private String[] hobbies; private List\u0026lt;String\u0026gt; movies; private Map\u0026lt;String, Integer\u0026gt; assets; private List\u0026lt;Friend\u0026gt; friends; private String description; private String signature;\t// ... getters and setters } class Friend { private String name; private int age; // ...getters and setters } We have annotated PersonConfig class with @ConfigurationProperties(\u0026quot;person\u0026quot;). Spring boot will intialize the fields of PersonConfig with values from .yml file prefixed with \u0026ldquo;person\u0026rdquo; property for e.g. PersonConfig\u0026rsquo;s name field value will be initialized from \u0026ldquo;person.name\u0026rdquo; property.\nRelaxed Binding Spring Boot @ConfigurationProperties annotation supports relaxed binding which means that\nperson.fav-num person.favNum person.fav_num person.FAV_NUM Any of the above .yml property format can be mapped to PersonConfig\u0026rsquo;s favNum field.\nSummary In this article, we learned that Spring Boot configuration using .yml file is much simpler as compared to .properties file. If we compare .yml file of above example with .properties file. It will look something like this:-\napplication.properties person.name = Ashish Kumar Lahoti person.occupation = programmer person.age = 33 person.gpa = 3.5 person.fav_num = 1e+10 person.male = true person.birthday = 1986-08-22 person.flaws = null person.hobbies[0] = bike riding person.hobbies[1] = watching movies person.hobbies[2] = online games person.hobbies[3] = cooking person.movies = [\u0026#34;Dark Knight\u0026#34;, \u0026#34;Spider Man\u0026#34;, \u0026#34;Thor\u0026#34;] person.assets = {\u0026#39;Car\u0026#39;: 1, \u0026#39;Bike\u0026#39;: 2, \u0026#39;Home\u0026#39;: 1} person.friends[0].name = \u0026#34;adam\u0026#34; person.friends[0].age = 28 person.friends[1].name = \u0026#34;ben\u0026#34; person.friends[1].age = 26 person.friends[1].name = \u0026#34;chloe\u0026#34; person.friends[1].age = 40 person.description = Lorem ipsum dolor sit amet,\\n consectetur adipiscing elit, sed\\n do eiusmod tempor incididunt ut \\n labore et dolore magna aliqua person.signature = Thanks \u0026amp; Regards, \\n Ashish Kumar Lahoti \\n email - lahoti.ashish20@gmail.com ","permalink":"https://codingnconcepts.com/spring-boot/spring-configuration-properties-using-yml/","tags":["Spring Boot Basics"],"title":"Spring @ConfigurationProperties using YAML"},{"categories":["Spring Boot"],"contents":"In this article, we\u0026rsquo;ll learn how to install Spring Tool Plugin for Eclipse IDE to create a Spring Boot Project from Scratch using Spring Initializr.\nThe Spring Tools Plugin for the Eclipse IDE is well suited for getting started with Spring Boot Project. Follow the steps for installation and usage of Spring Tool for Eclipse IDE:-\nInstall Spring Tools Plugin for Eclipse IDE   You can install the Spring Tools plugin for Eclipse IDE into an existing Eclipse installation using the Eclipse Marketplace. Go to help -\u0026gt; Eclipse Marketplace and Just open Marketplace, search for Spring Tools and install the Spring Tools 3 (Standalone Edition).\nNote: Spring Tools plugin name might be different based on OS (Windows or Mac OS X) and Eclipse version you have installed.\n Spring Tools for Eclipse IDE\n    Once you click on install, next screen will be Confirm Selected Features. All features are selected by default. Click on confirm.\n  Next screen will ask you to accept the terms of license agreement and click finish\n  That\u0026rsquo;s it for installation. Spring Tools will be installed in your Eclipse in few minutes. once it installed the plugin, it will ask you to restart the eclipse.\nCreate Spring Boot Project Using Spring Tools The Spring Tools for Eclipse IDE come with a direct integration of Spring Initializr.\n  Go to File, select New and choose the Spring → Spring Starter Project. It will open a wizard New Spring Starter Project\n  Service URL has by default Spring Initializr endpoint but this wizard lets you choose in case you have custom one running within you company.\n  Wizard lets you choose Type (Maven, Gradle), Packaging (Jar, War), language (Java, Kotlin, Groovy), Java Version and Other Project metadata.\n Spring Initializr for Eclipse IDE\n    Go to next screen and choose Spring Boot Version and required Dependencies that match your interest and click finish. You end up with a ready-to-use Spring Boot project in your workspace - in just a few seconds.\n  Summary Congratulations!! You\u0026rsquo;ve learned how to quickly create Spring Boot Project in Eclipse IDE using Spring Initializr.\nIf you are not using Eclipse IDE then don\u0026rsquo;t worry, you can still create a Spring Boot Project using Spring Initializr by following this post link:-\n How to setup Spring Boot project using Spring Initializr\n","permalink":"https://codingnconcepts.com/spring-boot/spring-initializr-for-eclipse-ide/","tags":["Spring Boot Basics","Eclipse IDE"],"title":"Spring Initializr Plugin for Eclipse IDE"},{"categories":["Spring Boot"],"contents":"In this quick article, we\u0026rsquo;ll see @Controller and @RestController annotations and their difference in Spring MVC.\n@Controller @Component public @interface Controller { @AliasFor(annotation = Component.class) String value() default \u0026#34;\u0026#34;; } If you look at the above @Controller annotation definition, you will find out that it just a stereotype version of @Component annotation which is used to annotate class as a Spring Controller. It is mainly a controller part of Spring MVC (model-view-controller) Web application. It\u0026rsquo;s been there since the evolution of Spring Framework.\n@Controller annotation typically used at class level in combination with a @RequestMapping annotation at method level to handle web requests.\n@Controller @RequestMapping(\u0026#34;/users\u0026#34;) public class UserController { @GetMapping(\u0026#34;/{id}\u0026#34;, produces = \u0026#34;application/json\u0026#34;) public @ResponseBody getUser(@PathVariable int id) { return getUserById(id); } private User getUserById(int id){ // ... \t} } The request handling method is annotated with @ResponseBody. This annotation enables automatic serialization of the return object into the HttpResponse.\n@RestController @Controller @ResponseBody public @interface RestController { @AliasFor(annotation = Controller.class) String value() default \u0026#34;\u0026#34;; } If you look at the above @RestController annotation definition, you will find out that it is an advance version of @Controller which includes both the @Controller and @ResponseBody annotations and as a result, simplifies the controller implementation such that now @ResponseBody isn\u0026rsquo;t required.\n@RestController @RequestMapping(\u0026#34;/users\u0026#34;) public class UserController { @GetMapping(\u0026#34;/{id}\u0026#34;, produces = \u0026#34;application/json\u0026#34;) public getUser(@PathVariable int id) { return getUserById(id); } private User getUserById(int id){ // ... \t} } Every request handling method of the controller class automatically serializes return objects into HttpResponse.\n@Controller vs @RestController    @Controller @RestController     Added in Spring 2.5 version Relatively new, added in Spring 4.0 version   Stereotype version of @Component Specialized version of @Controller   Required @ResponseBody on method handler @ResponseBody is not required as it is @Controller + @ResponseBody   Traditional way to create Spring MVC Controller Preferred way to use in RESTFul Web Services   ","permalink":"https://codingnconcepts.com/spring-boot/spring-controller-vs-restcontroller/","tags":["Spring Boot REST"],"title":"Spring @Controller and @RestController"},{"categories":["Java"],"contents":"In this quick article, We\u0026rsquo;ll see usage of Java Math.pow() method which takes two arguments, a and b, and returns a to the power of b i.e. ab\nSyntax public double pow(double a, double b) Where,\n Parameter a is the base Parameter b is the exponent Returns ab  Example // Returns 8.0 double result = (int) Math.pow(2, 3); // Cast to int, returns 8 int intResult = (int) Math.pow(2, 3); // Returns 117.29730800599916 double doubleResult = Math.pow(2.5, 5.2); // Returns 1.0 double zeroPowerResult = Math.pow(2, 0); // Returns 2.0 double sameResult = Math.pow(2, 1); // Returns NaN double nanResult = Math.pow(2, Double.NaN); Points to note:-\n By default, returns the result in double You can cast the result to int Both arguments, base and exponent can have decimal points If second argument is zero then result will be 1.0 If second argument is 1 then result will be value of first argument If second argument is NaN then result will be NaN ","permalink":"https://codingnconcepts.com/java/math-pow-in-java/","tags":["Java Core"],"title":"Java Math.pow() method Usage"},{"categories":["Java"],"contents":"In this article, we\u0026rsquo;ll learn how to validate mobile phone number of different country\u0026rsquo;s format using Java Regex (Regular Expressions)\nPhone Number Format A typical mobile phone number has following component:\n+\u0026lt;country_code\u0026gt; \u0026lt;area_code\u0026gt; \u0026lt;subscriber_number\u0026gt; Where depending on the country,\n country_code is somewhere between 1 to 3 digits area_code and subscriber_number combined is somewhere between 8 to 11 digits\n  If you simply require a regex to match all country format then here it is,\n\u0026#34;^(\\\\+\\\\d{1,3}( )?)?((\\\\(\\\\d{1,3}\\\\))|\\\\d{1,3})[- .]?\\\\d{3,4}[- .]?\\\\d{4}$\u0026#34; \nIf you want to know how we came up with this regex? then please read this full article.\n1. Regex to match 10 digit Phone Number with No space This is simplest regex to match just 10 digits. We will also see here how to use regex to validate pattern:\nString regex = \u0026#34;^\\\\d{10}$\u0026#34;; Pattern pattern = Pattern.compile(regex); Matcher matcher = pattern.matcher(\u0026#34;9876543210\u0026#34;); matcher.matches(); // returns true if pattern matches, else returns false Let’s break the regex and understand,\n ^ start of expression d{10} is mandatory match of 10 digits without any space $ end of expression  You can make regex more flexible to match between 8 to 11 digits phone number with no space, using this regex:\nString noSpaceRegex = \u0026#34;^\\\\d{8,11}$\u0026#34;; \n2. Regex to match 10 digit Phone Number with WhiteSpaces, Hyphens or No space String spacesAndHyphenRegex = \u0026#34;^(\\\\d{3}[- ]?){2}\\\\d{4}$\u0026#34;; Let\u0026rsquo;s break the regex and understand,\n ^ start of expression d{3} is mandatory match of 3 digits [- ]? is optional match of whitespace or hyphen after 3 digits {2} is to repeat the above match d{3}[- ]? two times becomes total 6 digits d{4} is mandatory match of last 4 digits $ end of expression  This Pattern will match mobile phone numbers like 9876543210, 987 654 3210, 987-654-3210, 987 654-3210, 987 6543210, etc.\n3. Regex to match 10 digit Phone Number with Parentheses String parenthesesRegex = \u0026#34;^((\\\\(\\\\d{3}\\\\))|\\\\d{3})[- ]?\\\\d{3}[- ]?\\\\d{4}$\u0026#34;; Let\u0026rsquo;s break the regex and understand,\n ^ start of expression (\\\\(\\\\d{3}\\\\))|\\\\d{3}) is mandatory match of 3 digits with or without parentheses [- ]? is optional match of whitespace or hyphen after after 3 digits \\\\d{3}[- ]? is mandatory match of next 3 digits followed by whitespace, hyphen or no space \\\\d{4} is mandatory match of last 4 digits $ end of expression  This Pattern will match mobile phone numbers with spaces and hyphen, as well as numbers like (987)6543210, (987) 654-3210, (987)-654-3210 etc.\n4. Regex to match 10 digit Phone number with Country Code Prefix This regex is combined with regex to include parenthesis\nString countryCodeRegex = \u0026#34;^(\\\\+\\\\d{1,3}( )?)?((\\\\(\\\\d{3}\\\\))|\\\\d{3})[- .]?\\\\d{3}[- .]?\\\\d{4}$\u0026#34;; Let\u0026rsquo;s break the regex and understand,\n ^ start of expression (\\\\+\\\\d{1,3}( )?)? is optional match of country code between 1 to 3 digits prefixed with + symbol, followed by space or no space. ((\\\\(\\\\d{3}\\\\))|\\\\d{3})[- .]?\\\\d{3}[- .]?\\\\d{4} is mandatory match of 10 digits with or without parenthesis, followed by whitespace, hyphen or no space $ end of expression  This Pattern will match mobile phone numbers from previous examples as well as numbers like +91 (987)6543210, +111 (987) 654-3210, +66 (987)-654-3210 etc.\n5. Regex to match Phone Number of All Country Formats Before we start defining a regex, let\u0026rsquo;s look at some of the country phone number formats:-\nAbkhazia +995 442 123456 Afghanistan +93 30 539-0605 Australia +61 2 1255-3456 China +86 (20) 1255-3456 Germany +49 351 125-3456 Indonesia +62 21 6539-0605 Iran +98 (515) 539-0605 Italy +39 06 5398-0605 New Zealand +64 3 539-0605 Philippines +63 35 539-0605 Singapore +65 6396 0605 Thailand +66 2 123 4567 UK +44 141 222-3344 USA +1 (212) 555-3456 Vietnam +84 35 539-0605 Let\u0026rsquo;s extract some information from these numbers:-\n Country Code prefix starts with \u0026lsquo;+\u0026rsquo; and has 1 to 3 digits Last part of the number, also known as subscriber number is 4 digits in all of the numbers Most of the countries have 10 digits phone number after excluding country code. A general observation is that all countries phone number falls somewhere between 8 to 11 digits after excluding country code.  Let\u0026rsquo;s see again on regex from previous example to validate country code:\nString countryCodeRegex = \u0026#34;^(\\\\+\\\\d{1,3}( )?)?((\\\\(\\\\d{3}\\\\))|\\\\d{3})[- .]?\\\\d{3}[- .]?\\\\d{4}$\u0026#34;l The above regex is to match 10 digit phone numbers, Let\u0026rsquo;s make some changes in this and make it more flexible to match 8 to 11 digits phone numbers:-\nRegex to Match All Country Formats String allCountryRegex = \u0026#34;^(\\\\+\\\\d{1,3}( )?)?((\\\\(\\\\d{1,3}\\\\))|\\\\d{1,3})[- .]?\\\\d{3,4}[- .]?\\\\d{4}$\u0026#34;; Let\u0026rsquo;s break the regex and understand,\n ^ start of expression (\\\\+\\\\d{1,3}( )?)? is optional match of country code between 1 to 3 digits prefixed with \u0026lsquo;+\u0026rsquo; symbol, followed by space or no space. ((\\\\(\\\\d{1,3}\\\\))|\\\\d{1,3} is mandatory group of 1 to 3 digits with or without parenthesis followed by hyphen, space or no space. \\\\d{3,4}[- .]? is mandatory group of 3 or 4 digits followed by hyphen, space or no space \\\\d{4} is mandatory group of last 4 digits $ end of expression\n  6. Regex to match Phone Number of Specific Country Format As you saw in the previous example that we have to add some flexibility in our regex to match all countries\u0026rsquo; formats. If you want more strict validation of specific country format then here are examples of India and Singapore Phone number regex pattern:\nString indiaRegex = \u0026#34;^(\\\\+\\\\d{2}( )?)?((\\\\(\\\\d{3}\\\\))|\\\\d{3})[- .]?\\\\d{3}[- .]?\\\\d{4}$\u0026#34;; String singaporeRegex = \u0026#34;^(\\\\+\\\\d{2}( )?)?\\\\d{4}[- .]?\\\\d{4}$\u0026#34;; ","permalink":"https://codingnconcepts.com/java/java-regex-to-validate-phone-number/","tags":["Java Regex","Java String"],"title":"Java Regex to Validate Phone Number"},{"categories":["Spring Boot"],"contents":"This article demonstrate use of Spring @Value annotation with Primitives, Default value, Dates, List, Map, System Properties, Constructor Injection, Setter Injection, and Methods\u0026hellip;\nThis annotation is used for injecting values into fields in Spring-managed beans and its value typically comes from property files (.properties and .yml files), system properties and environment variables.\n1. Using @Value with Primitives application.properties\ncourse.title = \u0026quot;How to use Spring @Value annotation\u0026quot; course.duration = 30 course.rating = 4.5 course.page_views = 1e+10 course.trending = true We can set the values of primitive fields such as String, int, float, double and boolean from property file as below:-\n@Value(\u0026#34;${course.title}\u0026#34;) private String title; @Value(\u0026#34;${course.duration}\u0026#34;) private int duration; @Value(\u0026#34;${course.rating}\u0026#34;) private float rating; @Value(\u0026#34;${course.page_views}\u0026#34;) private double pageViews; @Value(\u0026#34;${course.trending}\u0026#34;) private boolean trending; \n2. Using @Value with Default value Default values can be provided for properties that might not be defined. In below example the property course.review is not defined so review field will be initialized with default value i.e. “No Reviews Yet”.\n// @Value(\u0026#34;${property: defaultValue}\u0026#34;) @Value(\u0026#34;${course.review: No Reviews Yet}\u0026#34;) private String review; \n3. Using @Value with Dates application.properties\ncourse.created_date = 2020-05-26 There is no direct support to initialize a LocalDate field using @Value annotation. We need to use SpEL (Spring Expression Language) to initialize LocalDate field by parsing a String property:\n// SpEL expression used to initialize a Date @Value(\u0026#34;#{T(java.time.LocalDate).parse(\u0026#39;${course.created_date}\u0026#39;)}\u0026#34;) private LocalDate createdDate; \n4. Using @Value with List application.properties\ncourse.tags = Java, Spring, Spring Boot, Annotation Any property having comma separated values can be initialized as a List using @Value annotation in latest version of Spring.\n// Comma separated property values auto initialize a List @Value(\u0026#34;${course.tags}\u0026#34;) private List\u0026lt;String\u0026gt; tags; If you are using old version of Spring, require SpEL expression to initialize a List:\n@Value(\u0026#34;#{\u0026#39;${course.tags}\u0026#39;.split(\u0026#39;,\u0026#39;)}\u0026#34;) private List\u0026lt;String\u0026gt; tags; SpEl expression can also be used to get specific value from comma separated values:\n@Value(\u0026#34;#{\u0026#39;${course.tags}\u0026#39;.split(\u0026#39;,\u0026#39;)[0]}\u0026#34;) private String firstTag; \n5. Using @Value with Map application.properties\ncourse.keyword_count = { 'keyword1': '12', 'keyword2': '44', 'keyword3': '85', 'keyword4': '100'} Note: the keys and values in the property Map must be in single quotes.\nWe can initialize a Map using above property using SpEL expression inside @Value annotation\n// SpEL expression used to initialize a Map @Value(\u0026#34;#{${course.keyword_count}}\u0026#34;) private Map\u0026lt;String, Integer\u0026gt; keywordCountMap; If we need to get the value of a specific key in the Map, all we have to do is add the key\u0026rsquo;s name in the expression:\nWe can use any one out of these two ways:-\n// way 1 - .key @Value(\u0026#34;#{${course.keyword_count}.keyword1}\u0026#34;) private Integer FirstKeywordCount; // way 2 - [\u0026#39;key\u0026#39;] @Value(\u0026#34;#{${course.keyword_count}[\u0026#39;keyword2\u0026#39;]}\u0026#34;) private Integer SecondKeywordCount; If we\u0026rsquo;re not sure whether the Map contains a certain key, we should choose a safer expression that will not throw an exception but set the value to null when the key is not found:\n@Value(\u0026#34;#{${course.keyword_count}[\u0026#39;unknownKey\u0026#39;]}\u0026#34;) private Integer unknownKeywordCount; We can also set default values for the properties or keys that might not exist:\n@Value(\u0026#34;#{${unknownMap : {key1: \u0026#39;1\u0026#39;, key2: \u0026#39;2\u0026#39;}}}\u0026#34;) private Map\u0026lt;String, Integer\u0026gt; unknownMap; @Value(\u0026#34;#{${course.keyword_count}[\u0026#39;unknownKey\u0026#39;] ?: 100}\u0026#34;) private Integer unknownKeyWithDefaultValue; Map entries can also be filtered before injection. Let\u0026rsquo;s assume we need to get only those entries whose keyword count is greater than 50:\n@Value(\u0026#34;#{${course.keyword_count}.?[value \u0026gt; \u0026#39;50\u0026#39;]}\u0026#34;) private Map\u0026lt;String, Integer\u0026gt; keywordCountMapFiltered; \n6. Using @Value with System Properties You can use @Value annotation for System properties similar to as they were defined in property file. Example of System Properties are as below\n//UTF-8 @Value(\u0026#34;${file.encoding}\u0026#34;) private String fileEncoding; //Mac OS X @Value(\u0026#34;${os.name}\u0026#34;) private String osName; // /Users/ashishkumarlahoti @Value(\u0026#34;${user.home}\u0026#34;) private String userHome We can also use the @Value annotation to inject all current system properties:\n@Value(\u0026#34;#{systemProperties}\u0026#34;) private Map\u0026lt;String, String\u0026gt; systemPropertiesMap; We can also use SpEL expressions to get the value from System Property Map:\n// /Library/Java/JavaVirtualMachines/jdk1.8.0_211.jdk/Contents/Home/jre @Value(\u0026#34;#{systemProperties[\u0026#39;java.home\u0026#39;]}\u0026#34;) private String javaHome; //Oracle Corporation @Value(\u0026#34;#{systemProperties[\u0026#39;java.vendor\u0026#39;]}\u0026#34;) private String javaVendor; We can also initialize some default value if System property is not available:\n@Value(\u0026#34;#{systemProperties[\u0026#39;unknown\u0026#39;] ?: \u0026#39;Default Value\u0026#39;}\u0026#34;) private String unknownSystemProperty; \n7. Using @Value with Constructor Injection When we use the @Value annotation, we\u0026rsquo;re not limited to a field injection. We can also use it together with constructor injection.\nLet\u0026rsquo;s see this in practice:\n@Component @PropertySource(\u0026#34;classpath:values.properties\u0026#34;) public class PriorityProvider { private String priority; @Autowired public PriorityProvider(@Value(\u0026#34;${priority:normal}\u0026#34;) String priority) { this.priority = priority; } // getter setter } In the above example, we inject a priority directly into our PriorityProvider‘s constructor.\nNote, we also provide a default value in case the property isn\u0026rsquo;t found.\n\n8. Using @Value with Setter Injection Similar to constructor injection, we can also use @Value with setter injection.\n@Component @PropertySource(\u0026#34;classpath:values.properties\u0026#34;) public class CollectionProvider { private List\u0026lt;String\u0026gt; values = new ArrayList\u0026lt;\u0026gt;(); @Autowired public void setValues(@Value(\u0026#34;#{\u0026#39;${listOfValues}\u0026#39;.split(\u0026#39;,\u0026#39;)}\u0026#34;) List\u0026lt;String\u0026gt; values) { this.values.addAll(values); } // getter setter } In the code above, we use the SpEL expression to inject a list of values into the setValues method.\n9. Using @Value with Methods When the @Value annotation is found on a method, Spring context will invoke it when all the spring configurations and beans are getting loaded. If the method has multiple arguments, then every argument value is mapped from the method annotation. If we want different values for different arguments then we can use @Value annotation directly with the argument.\n@Value(\u0026#34;Test\u0026#34;) public void printValues(String a, String b){ System.out.println(a + \u0026#34; \u0026amp; \u0026#34; + b); // Test \u0026amp; Test } @Value(\u0026#34;Test\u0026#34;) public void printOtherValues(String a, @Value(\u0026#34;Another Test\u0026#34;) String b){ System.out.println(a + \u0026#34; \u0026amp; \u0026#34; + b); // Test \u0026amp; Another Test } ","permalink":"https://codingnconcepts.com/spring-boot/spring-value-annotation/","tags":["Spring Boot Basics"],"title":"Spring @Value Annotation Guide"},{"categories":["Spring Boot"],"contents":"In this article, we\u0026rsquo;ll learn how to configure a Feign Client in your Spring Boot project to consume RESTFul APIs from other services.\nFeign Client is a Declarative REST Client in Spring Boot Web Application. It is very useful in microservice architecture to create feign client to consume RESTFul API endpoints exposed by other microservices.\n1. Project Setup For initial setup of your Spring Boot project, you should use Spring Initializr. Choose the OpenFeign and Spring Web as dependencies. If you are not sure, click the below link for pre-selected required dependencies:-\nhttps://start.spring.io/#!type=maven-project\u0026amp;language=java\u0026amp;platformVersion=2.3.0.RELEASE\u0026amp;packaging=jar\u0026amp;jvmVersion=1.8\u0026amp;groupId=com.example\u0026amp;artifactId=api\u0026amp;name=api\u0026amp;description=Create%20Feign%20Client%20to%20consume%20RESTFul%20APIs\u0026amp;packageName=com.example.api\u0026amp;dependencies=cloud-feign,web\n Also Read here How to setup a Spring Boot project using Spring Initalizr\n Assuming you chose build project as maven. A typical pom.xml for a web project look like this:-\npom.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.3.0.RELEASE\u0026lt;/version\u0026gt; \u0026lt;relativePath /\u0026gt; \u0026lt;!-- lookup parent from repository --\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;groupId\u0026gt;com.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;springboot-api\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;Create Feign Client to consume RESTFul APIs\u0026lt;/description\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;1.8\u0026lt;/java.version\u0026gt; \u0026lt;spring-cloud.version\u0026gt;Hoxton.SR4\u0026lt;/spring-cloud.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-openfeign\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;exclusions\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;org.junit.vintage\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-vintage-engine\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;/exclusions\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-cloud.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt;  \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 2. Enable Feign Client When you are working with spring boot project, you have nothing much to do to enable feign client for your project. Make sure:-\n You have spring-boot-starter-web and spring-cloud-starter-openfeign dependencies in your pom.xml or build.gradle You are using @SpringBootApplication and @EnableFeignClients annotations at your application starter class file ApiApplication.  Spring Boot is opinionated, when it sees the web and openfeign dependencies in the classpath, it sets up all the necessary default configuration required for Feign Client and automatically scans for the classes annotated with @FeignClient\npackage com.example.api; @SpringBootApplication @EnableFeignClients public class ApiApplication { public static void main(String[] args) { SpringApplication.run(ApiApplication.class, args); } } 3. Create Feign Client Next, we are going to create a feign client to consume RESTFul API endpoints. Let\u0026rsquo;s create a CommentFeignClient class -\n Annotated with @FeignClient which auto scan by spring boot application to generate feign client from this This feign client consumes the APIs from this URL: https://jsonplaceholder.typicode.com/  package com.example.api.client; @FeignClient(name = \u0026#34;commentFeignClient\u0026#34;, url = \u0026#34;https://jsonplaceholder.typicode.com/\u0026#34;) public interface CommentFeignClient { @GetMapping(\u0026#34;/comments\u0026#34;) List\u0026lt;Comment\u0026gt; getAllComments(); @GetMapping(\u0026#34;/comments/{commentId}\u0026#34;) Comment getCommentById(@PathVariable Long commentId); @GetMapping(\u0026#34;/comments\u0026#34;) List\u0026lt;Comment\u0026gt; getCommentsByPostId(@RequestParam Long postId); } 4. Feign Client Configuration Spring boot comes with default global configuration which is applied on each feign client you create such as connection timeout, read timeout and logger level. Good things is you can change these global configurations from property file.\napplication.yml feign: client: config: default: connectTimeout: 5000 readTimeout: 5000 loggerLevel: basic By default these configurations are applied on each feign clients. If you want to override these configuration for a specific feign client. It can be done using feign client name. Remember, we created our feign client using @FeignClient with name commentFeignClient\npackage com.example.api.client; @FeignClient(name = \u0026#34;commentFeignClient\u0026#34;, url = \u0026#34;https://jsonplaceholder.typicode.com/\u0026#34;) public interface CommentFeignClient { //... Let\u0026rsquo;s override configuration for commentFeignClient\nfeign: client: config: default: connectTimeout: 5000 readTimeout: 5000 loggerLevel: basic commentFeignClient: connectTimeout: 10000 readTimeout: 12000 loggerLevel: full logging: level: com.example.api.client: DEBUG Feign logging only responds to the DEBUG level so the logging level of package of feign client must be set to DEBUG level i.e. com.example.api.client, if you want to enable feign logging.\nThe loggerLevel that you may configure per client, tells Feign how much to log. Choices are:\n NONE, No logging (DEFAULT). BASIC, Log only the request method and URL and the response status code and execution time. HEADERS, Log the basic information along with request and response headers. FULL, Log the headers, body, and metadata for both requests and responses.  5. Consume Feign Client Now since we have created feign client, let\u0026rsquo;s create a service layer class CommentService and its implementation CommentServiceImpl to consume these APIs using the feign client\npublic interface CommentService { public List\u0026lt;Comment\u0026gt; getAllComments(); public Comment getCommentById(Long id); public List\u0026lt;Comment\u0026gt; getAllCommentsByPostId(Long postId); } @Service public class CommentServiceImpl implements CommentService { @Autowired private CommentFeignClient commentFeignClient;  @Override public List\u0026lt;Comment\u0026gt; getAllComments() { return commentFeignClient.getAllComments(); } @Override public Comment getCommentById(Long id) { return commentFeignClient.getCommentById(id); } @Override public List\u0026lt;Comment\u0026gt; getAllCommentsByPostId(Long postId) { return commentFeignClient.getCommentsByPostId(postId); } } Now since we have created our services classes and consumed APIs using feign client. Let\u0026rsquo;s create a controller CommentController to test feign client\n@RestController @RequestMapping(\u0026#34;/comments\u0026#34;) public class CommentController { @Autowired private CommentService commentService; @GetMapping public List\u0026lt;Comment\u0026gt; getAllComments() { return commentService.getAllComments(); } @GetMapping(params = \u0026#34;postId\u0026#34;) public List\u0026lt;Comment\u0026gt; getAllCommentsByUserId(@RequestParam Long postId) { return commentService.getAllCommentsByPostId(postId); } @GetMapping(\u0026#34;/{id}\u0026#34;) public Comment getCommentById(@PathVariable Long id) { return commentService.getCommentById(id); } } 6. Test Feign Client  That\u0026rsquo;s it. You have successfully created and tested feign client to consume APIs from given endpoint.\n Download the complete source code for creating feign client from github/springboot-api\n","permalink":"https://codingnconcepts.com/spring-boot/configure-feign-rest-client/","tags":["Spring Boot REST"],"title":"Configure Feign Client in Spring Boot"},{"categories":["Java"],"contents":"This article demonstrate use of String.format() in Java with many examples\u0026hellip;\nThe String.format() method is used to produce formatted string, numeric, and date/time data, and locale specific output. It requires a format string and argument list as input.\n1. Syntax //Returns a formatted string using the specified format string and arguments. static String format​(String format, Object... args)\t//Returns a formatted string using the specified locale, format string, and arguments. static String format​(Locale l, String format, Object... args)\tLet\u0026rsquo;s look into format specifier before we look into examples\nSyntax of format specifier %[argument_index$][flags][width][.precision]conversion Where,\n optional argument_index is position of argument. The first arg is referenced by 1$, the second by 2$, etc. optional flags is set of characters to modify the output format\nIf not specified - The result will include a leading space for positive values\n-\tThe result will be left-justified.\n#\tThe result should use a conversion-dependent alternate form\n+\tThe result will always include a sign\n0\tThe result will be zero-padded\n,\tThe result will include locale-specific grouping separators\n(\tThe result will enclose negative numbers in parentheses optional width is minimum number of characters in string output optional precision is used for floating numbers to indicate numbers after decimal places. required conversion is character indicating how it should be formatted\ns or S for string\nf for floating point numbers\nd for integers\nt for date and time\nn for line break  2. String Format Examples 2.1 String Template String[] fruits = new String[] {\u0026#34;Mango\u0026#34;, \u0026#34;Grapes\u0026#34;, \u0026#34;Banana\u0026#34;, \u0026#34;Kiwi\u0026#34;}; // String Concat System.out.println(String.format(\u0026#34;My favourite fruits are %1$s, %2$s, %3$s and %4$s\u0026#34;, fruits)); //Reverse String Concat System.out.println(String.format(\u0026#34;My favourite fruits are %4$s, %3$s, %2$s and %1$s\u0026#34;, fruits)); We have used formatter %1$s, %2$s, %3$s, %4$s to specify the position of string arguments and %n for line break.\nOutput My favourite fruits are Mango, Grapes, Banana and Kiwi My favourite fruits are Kiwi, Banana, Grapes and Mango \n2.2 String Line Break String format can be used to create multi line string in Java\nSystem.out.println(String.format(\u0026#34;Address:-%nUnit 505,%n32 Cross Street\u0026#34;, null)); Output Address:- Unit 505, 32 Cross Street \n2.3 String Padding Following String format will add left padding of 10 characters to foo\n%13s says that output will have min width of 13 including foo length, which is 3 hence (13 - 3 =) 10 left padding space.\nSystem.out.println(String.format(\u0026#34;%13s\u0026#34;, \u0026#34;foo\u0026#34;)); Output foo 3. Number Format Examples 3.1 Float Decimal Places System.out.println(Math.PI); // Rounding off Decimal Places System.out.println(String.format(\u0026#34;%.1f\u0026#34;, Math.PI)); System.out.println(String.format(\u0026#34;%.5f\u0026#34;, Math.PI)); System.out.println(String.format(\u0026#34;%.10f\u0026#34;, Math.PI)); We have used formatter %.1f, %.5f, and %.10f to show 1, 5 and 10 decimal places of PI respectively.\nOutput 3.141592653589793 3.1 3.14159 3.1415926536 \n3.2 Float Padding // Min Width with leading spaces System.out.println(String.format(\u0026#34;%10f\u0026#34;, Math.PI)); System.out.println(String.format(\u0026#34;%20f\u0026#34;, Math.PI)); System.out.println(String.format(\u0026#34;%30f\u0026#34;, Math.PI)); We have used formatter %10f, %20f, and %30f to show minimum 10, 20 and, 30 characters with leading space respectively. We see that string length 2.141593 is 8 characters which result in padding of 2, 12 and, 22 characters respectively.\nOutput 3.141593 3.141593 3.141593 \n3.3 Negative Floating Point Numbers // +ve Floating Numbers System.out.println(String.format(\u0026#34;%+20.5f\u0026#34;, Math.PI)); // + Flag show sign System.out.println(String.format(\u0026#34;%020.5f\u0026#34;, Math.PI)); // 0 Flag for leading zeros System.out.println(String.format(\u0026#34;%(20.5f\u0026#34;, Math.PI)); // ( Flag to show -ve numbers in parentheses  // -ve Floating Numbers System.out.println(String.format(\u0026#34;%+20.5f\u0026#34;, -Math.PI)); System.out.println(String.format(\u0026#34;%020.5f\u0026#34;, -Math.PI)); System.out.println(String.format(\u0026#34;%(20.5f\u0026#34;, -Math.PI)); Output +3.14159 00000000000003.14159 3.14159 -3.14159 -0000000000003.14159 (3.14159) \n3.4 Float with locale //Locale Specific System.out.println(String.format(Locale.FRANCE, \u0026#34;%f\u0026#34;, Math.PI)); System.out.println(String.format(Locale.FRANCE, \u0026#34;%f\u0026#34;, -Math.PI)); Output 3,141593 -3,141593 \n3.5 Format Number with Commas System.out.println(String.format(\u0026#34;%,d\u0026#34;, 1234567890)); Output 1,234,567,890 4. Date Format Examples 4.1 LocalDateTime Format LocalDateTime date = LocalDateTime.parse(\u0026#34;1986-08-22T05:45:59\u0026#34;); System.out.println(String.format(\u0026#34;My Birth Date is %1$te-%1$tm-%1$tY %1tT\u0026#34;, date)); System.out.println(String.format(\u0026#34;I was born on %1$teth %1tB, %1$tY\u0026#34;, date)); Output My Birth Date is 22-08-1986 05:45:59 I was born on 22th August, 1986 \n4.2 LocalDate Format Format LocalDate to yyyymmdd\nLocalDate date = LocalDate.parse(\u0026#34;2020-12-25\u0026#34;); // yyyymmdd System.out.println(String.format(\u0026#34;%1$tY%1$tm%1$te\u0026#34;, date)); Output 20201225 5. Print Format Examples 5.1 System.out.printf and System.out.format If you have to just print formatted output and doesn\u0026rsquo;t require returned output as string, you can use System.out.printf or System.out.format instead.\nString print = \u0026#34;Hello World !!!\u0026#34;; System.out.println(String.format(\u0026#34;Saying - %s\u0026#34;, print)); System.out.printf(\u0026#34;Saying - %s\u0026#34;, print); System.out.format(\u0026#34;Saying - %s\u0026#34;, print); All the three System.out print the same output\nOutput Saying - Hello World !!! Saying - Hello World !!! Saying - Hello World !!! ","permalink":"https://codingnconcepts.com/java/string-format-in-java/","tags":["Java String"],"title":"Java String.format() method Usage"},{"categories":["Spring Boot"],"contents":"In this article, we\u0026rsquo;ll learn step by step, how to build RESTFul API with Spring Boot. We\u0026rsquo;ll also learn the RestController, HTTP response codes and best practices along the way.\n1. Project Setup For initial setup of your Spring Boot project, you should use Spring Initializr. Read here How to setup a Spring Boot project using Spring Initalizr\nAssuming you chose build project as maven. A typical pom.xml for a web project look like this:-\npom.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.3.0.RELEASE\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;!-- lookup parent from repository --\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;groupId\u0026gt;com.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;api\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;Build RESTFul API using Spring Boot\u0026lt;/description\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;1.8\u0026lt;/java.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;exclusions\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;org.junit.vintage\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-vintage-engine\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;/exclusions\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 2. Enable Web MVC When you are working with spring boot project, you have nothing much to do to enable spring web mvc for your project. Make sure:-\n You have spring-boot-starter-web dependency in your pom.xml or build.gradle You are using @SpringBootApplication on your application starter class file.  Spring Boot is opinionated, when it sees the web dependency in the classpath, it sets up all the necessary default configuration required for API development so that you can just concentrate on your business logic.\npackage com.example.api; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class ApiApplication { public static void main(String[] args) { SpringApplication.run(ApiApplication.class, args); } } 3. Build RESTFul APIs We are creating a UserController class to build RESTFul APIs for CRUD operations. Few things to understand:-\n Use @RestController at class level, it helps to bind default HTTP Converters for you, e.g. when you return a User object from controller methods, it takes care of converting them in JSON. Use @RequestMapping at class level, to map APIs to URL. Use shorthand of @RequestMapping i.e. @GetMapping, @PostMapping, @PutMapping, @DeleteMapping at method level. Use @ResponseStatus at method level for appropriate HTTP Stats Code. Delegate the work to Service Layer, here using UserService  package com.example.api.controller; @RestController @RequestMapping(\u0026#34;/users\u0026#34;) public class UserController { @Autowired private UserService userService; @GetMapping public Users getAllUsers() { return userService.getAllUsers(); } @GetMapping(\u0026#34;/{id}\u0026#34;) public User getUserById(@PathVariable Long id) { return userService.getUserById(id); } @PostMapping @ResponseStatus(HttpStatus.CREATED) public Long createUser(User user) { return userService.createUser(user); } @PutMapping(\u0026#34;/{id}\u0026#34;) @ResponseStatus(HttpStatus.OK) public void updateUser(@PathVariable Long id, User user) { userService.updateUser(id, user); } @DeleteMapping(\u0026#34;/{id}\u0026#34;) @ResponseStatus(HttpStatus.OK) public void deleteUserById(@PathVariable Long id) { userService.deleteUserById(id); } } That\u0026rsquo;s it. Just start your application and test your APIs.\n Download the source code for this example from github/springboot-api\n","permalink":"https://codingnconcepts.com/spring-boot/build-restful-api-with-spring-boot/","tags":["Spring Boot REST"],"title":"Build RESTFul API with Spring Boot"},{"categories":["Spring Boot"],"contents":"In this article, we\u0026rsquo;ll learn how to create a Spring Boot project quickly from scratch use Spring Initializer.\nSpring Initializr It is highly recommended to use Spring Initializr for the initial setup of your Spring Boot Project. Some of the advantage of Spring Initializer:-\n  It is the quickest way to setup a project by selecting project build, language, spring boot version, project metadata, and required dependencies.\n  You will always be working on the latest stable spring boot version, the latest stable version is selected by default.\n  Auto generates pom.xml or build.gradle for you based on your selections.\n  You can use SHARE button to generate a URL for your selected configuration, e.g.\nhttps://start.spring.io/#!type=maven-project\u0026amp;language=java\u0026amp;platformVersion=2.3.0.RELEASE\u0026amp;packaging=jar\u0026amp;jvmVersion=1.8\u0026amp;groupId=com.example\u0026amp;artifactId=api\u0026amp;name=api\u0026amp;description=Build%20RESTFul%20API%20using%20Spring%20Boot\u0026amp;packageName=com.example.api\u0026amp;dependencies=web\nThe above URL will show following configuration pre-selected in Spring Initialzr\n Example of Spring Boot RESTFul API Project\n    You can quickly review the project using EXPLORE before generating a project.\n  You can GENERATE the project. It will download a .zip file, which you can extract and import in Spring STS, Eclipse, or IntelliJ IDE  Downloaded api.zip and its extracted files\n   Imported Spring Boot Project in Eclipse\n    That\u0026rsquo;s it. I hope this will encourage you to build a project using Spring Initalizr\nSpring Initializr for Eclipse IDE If you use Eclipse IDE for Java development then you can install plugin Spring Tool for Eclipse IDE which is very useful to quickly create a Spring Boot project within Eclipse using Spring Initializr.\n Read How to setup Spring Tool for Eclipse IDE and create Spring Boot Project\n","permalink":"https://codingnconcepts.com/spring-boot/setup-project-using-spring-initalizr/","tags":["Spring Boot Basics"],"title":"Setup a Spring Boot Project using Spring Initializr"},{"categories":["Javascript"],"contents":"In this article, we\u0026rsquo;ll learn how to implement Blockchain using Javascript.\nPrerequisite  Download and install NodeJs to run our blockchain code Download and install Visual Studio Code IDE for code development  Don\u0026rsquo;t worry if you don\u0026rsquo;t have prior experience with JavaScript, NodeJS, and VSCode. Just follow with me and you will learn basics of Blockchain which you can later implement in any other language.\nBlockchain Blockchain is nothing but a digital, distributed, immutable, and trusted ledger which can be used to record anything from financial transactions, government records to land titles, or even purchase orders.\nEach transaction record is a block, which are linked together chronologically to form a chain of blocks. If you want to change record in a particular block, you don\u0026rsquo;t rewrite it. Instead, the change is recorded in a new block.\n Also read Blockchain Basics and its Practical Use Cases\n Block Let\u0026rsquo;s see what a typical block in blockchain consist of:-\n Timestamp is date and time when the transaction took place. Record typically contains the details of a transaction like sender, receiver, amount. We are going to use actual names of sender and receiver in our program but in a practical use case like bitcoin, actual names are not revealed, a digital signature of sender and receiver is used instead. Hash is a digital fingerprint that represents the transaction in the block and is completely unique. If there is any change in transaction details, the hash would also change. Generally, it\u0026rsquo;s an alphanumeric sequence generated by applying some crypto algorithm like SHA-256 on transaction details. Previous Hash is the Hash of the previous block in blockchain. This is also used to generate Hash of the block. Nonce is an abbreviation for \u0026ldquo;number only used once,\u0026rdquo; which is a number added to a block in a blockchain that, when rehashed, meets the difficulty level restrictions. We will discuss more on this later  Step 1: Create Block (block.js) Now we know the what block consist of, let\u0026rsquo;s create it\nconst SHA256 = require(\u0026#39;crypto-js/sha256\u0026#39;); class Block { constructor(timestamp, previousHash, record, difficultyLevel) { this.timestamp = timestamp; this.record = record; this.previousHash = previousHash; const proofOfWork = this.proofOfWork(difficultyLevel); this.hash = proofOfWork.hash; this.nonce = proofOfWork.nonce; } /* Genesis Block */ static genesis() { return new this(new Date(), \u0026#34;\u0026#34;, \u0026#34;GENESIS\u0026#34; ); } /* Block Mining */ static mineBlock(previousBlock, record, difficultyLevel) { const timestamp = new Date(); const previousHash = previousBlock.hash; return new Block(timestamp, previousHash, record, difficultyLevel); } /* Generate Hash using SHA256 */ static computeHash(message){ return SHA256(message).toString(); } /* Proof of Work */ proofOfWork(difficultyLevel) { const message = this.timestamp + JSON.stringify(this.record) + this.previousHash; if(difficultyLevel){ const leadingZeros = \u0026#34;0\u0026#34;.repeat(difficultyLevel); let nonce = 0; while(true){ let hash = Block.computeHash(message + nonce); if(hash.substring(0, difficultyLevel) == leadingZeros){ return { hash, nonce }; } nonce++; } }else{ return { hash: Block.computeHash(message), nonce: 0 } } } } module.exports = Block; \nLet\u0026rsquo;s understand few more terms\n Genesis Block is the first block in blockchain which is not having any transaction details and previous hash. This is generally added at the time of creation of blockchain. Also known as Block Zero Difficulty Level is the restriction to generate hash of the block. More difficulty level, more time it takes to generate a hash. Block Mining is a process of adding a new block to the blockchain. Who adds new block is called Block Miner, also known as bitcoin miner in case of bitcoin. Anyone can register their computer to become one of the bitcoin miner in case of a public blockchain like bitcoin. All the bitcoin miners in bitcoin network get a copy of whole blockchain and each receives a notification when a new block is added to the blockchain. Proof of Work is a cryptographic hash puzzle which each Block Miner in the blockchain tries to solve. As soon as one of the Block Miner solves the puzzle, essentially means generated the hash of the block with said difficulty level, they broadcast this to the blockchain network and hash is validated by all the other Block Miners in the network.  What is Proof of Work for us? Out Proof of Work is to generate a hash with leading zeros based on difficulty level.\nDifficulty level of 5 means, generate a hash with 5 leading zeros, e.g. 00000b4d7m3h1s0k2s8bw0hn382\nHow we are going to achieve? We are going to calculate the hash by applying SHA-256 algorithm on the transaction details and nonce value. We will start with nonce value of 0 and keep incrementing it until we find the hash with leading zeros of difficulty level.\nStep 2: Create Blockchain (blockchain.js) Now we have learned a lot of terms, let\u0026rsquo;s quickly create a blockchain\nconst Block = require(\u0026#39;./block\u0026#39;); class Blockchain { constructor() { this.difficultyLevel = 1; this.chain = [Block.genesis()]; } addBlock(record) { const newBlock = Block.mineBlock(this.chain[this.chain.length-1], record, this.difficultyLevel); this.chain.push(newBlock); } } module.exports = Blockchain; Step 3: Test Blockchain (server.js) Let\u0026rsquo;s create few blocks of transaction with random sender, receiver and amount details. Also, let\u0026rsquo;s increase the difficulty level after every 2 transactions.\nconst Blockchain = require(\u0026#39;./blockchain\u0026#39;) const { performance } = require(\u0026#39;perf_hooks\u0026#39;); const blockchain = new Blockchain(); const userList = [\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;, \u0026#34;David\u0026#34;, \u0026#34;Eric\u0026#34;, \u0026#34;Franklin\u0026#34;, \u0026#34;Gavin\u0026#34;, \u0026#34;Harry\u0026#34;, \u0026#34;Iris\u0026#34;, \u0026#34;Joey\u0026#34;, \u0026#34;Kate\u0026#34;, \u0026#34;Leo\u0026#34;, \u0026#34;Monica\u0026#34;, \u0026#34;Nancy\u0026#34;, \u0026#34;Oscar\u0026#34;, \u0026#34;Phoebe\u0026#34;, \u0026#34;Quinn\u0026#34;, \u0026#34;Ross\u0026#34;, \u0026#34;Sofia\u0026#34;, \u0026#34;Tyler\u0026#34;, \u0026#34;Umar\u0026#34;, \u0026#34;Victor\u0026#34;, \u0026#34;Wilson\u0026#34;, \u0026#34;Xena\u0026#34;, \u0026#34;Yasmine\u0026#34;, \u0026#34;Zara\u0026#34;]; const addNBlocks = (n) =\u0026gt; { for(let i = 0; i \u0026lt; n; i++) { blockchain.addBlock({ sender: userList[Math.floor(Math.random() * userList.length)], receiver: userList[Math.floor(Math.random() * userList.length)], amount: Math.floor(Math.random() * 1000) }); } } const t0 = performance.now(); addNBlocks(2); var t1 = performance.now() console.log(\u0026#34;[Difficulty Level 1] Added first 2 blocks in \u0026#34; + (t1 - t0) + \u0026#34; milliseconds.\u0026#34;) blockchain.difficultyLevel = 3; addNBlocks(2); var t2 = performance.now() console.log(\u0026#34;[Difficulty Level 3] Added next 2 blocks in \u0026#34; + (t2 - t1) + \u0026#34; milliseconds.\u0026#34;) blockchain.difficultyLevel = 5; addNBlocks(2); var t3 = performance.now() console.log(\u0026#34;[Difficulty Level 5] Added next 2 blocks in \u0026#34; + (t3 - t2) + \u0026#34; milliseconds.\u0026#34;) /* Print Blockchain*/ console.log(blockchain.chain); Now everything is ready, go to terminal and run following commands\nnpm install --save crypto-js node server You will see an output like this.\nOutput [Difficulty Level 1] Added first 2 blocks in 6.2153230011463165 milliseconds. [Difficulty Level 3] Added next 2 blocks in 175.92524899542332 milliseconds. [Difficulty Level 5] Added next 2 blocks in 2065.910447001457 milliseconds. [ Block { timestamp: 2020-05-18T17:05:37.501Z, record: \u0026#39;GENESIS\u0026#39;, previousHash: \u0026#39;\u0026#39;, hash: '9636ccb176c9f4825d24e1b8db51e3ffb5d448ba112ec0db9672e80f6dc855c3', nonce: 0 }, Block { timestamp: 2020-05-18T17:05:37.504Z, record: { sender: 'Xena', receiver: 'Umar', amount: 770 }, previousHash: '9636ccb176c9f4825d24e1b8db51e3ffb5d448ba112ec0db9672e80f6dc855c3', hash: '0329bb14cb5d59a2ddce485019de8041c6790b4483afbad91516ec78e21a70f4', nonce: 24 }, Block { timestamp: 2020-05-18T17:05:37.509Z, record: { sender: 'Harry', receiver: 'Wilson', amount: 601 }, previousHash: '0329bb14cb5d59a2ddce485019de8041c6790b4483afbad91516ec78e21a70f4', hash: '05187dd8fa18b1ebd50565f1607e43ab9ad081955a71fb6f542cb91755192b49', nonce: 12 }, Block { timestamp: 2020-05-18T17:05:37.512Z, record: { sender: 'David', receiver: 'Quinn', amount: 600 }, previousHash: '05187dd8fa18b1ebd50565f1607e43ab9ad081955a71fb6f542cb91755192b49', hash: '000a0f95e605831a1fa0178351a195fc6f60752fd59e251ea56b1c0d464b8920', nonce: 7947 }, Block { timestamp: 2020-05-18T17:05:37.620Z, record: { sender: 'Yasmine', receiver: 'Umar', amount: 918 }, previousHash: '000a0f95e605831a1fa0178351a195fc6f60752fd59e251ea56b1c0d464b8920', hash: '000e8a70d4b6673f3a10cc68fdc21e0cda7a71aa0fe56d31a13cf95832596a45', nonce: 5384 }, Block { timestamp: 2020-05-18T17:05:37.686Z, record: { sender: 'Phoebe', receiver: 'Victor', amount: 336 }, previousHash: '000e8a70d4b6673f3a10cc68fdc21e0cda7a71aa0fe56d31a13cf95832596a45', hash: '000005b737aaa4faa3b87b56474dec9537eee843c2881cb5f6432ca9708bd7b5', nonce: 45944 }, Block { timestamp: 2020-05-18T17:05:38.178Z, record: { sender: 'Umar', receiver: 'Oscar', amount: 239 }, previousHash: '000005b737aaa4faa3b87b56474dec9537eee843c2881cb5f6432ca9708bd7b5', hash: '0000057a7a4c7caea164b4e5672a3c38fcf12c6c8bfb4b1c503ca876664f2660', nonce: 150796 } ] Observations from Output  As we increased difficulty level from 1, 3, to 5, it took more time to generate the hash and add new blocks. Blockchain technologies like bitcoin require to solve hash puzzle with the difficulty level of somewhere starting from 18 to 30. You can imagine the time requires to solve those puzzles. The first block of blockchain is GENESIS block with no transaction info and no previous hash value See the hash generated with 1, 3, and 5 leading zeros based on difficulty level See the variable nonce value keeps increasing with difficulty level, also tells us the number of attempts our hash algorithm took to generate hash.  Summary I hope you have now a basic understanding of Blockchain technology and how we can implement it. Please note that the above example is a very basic implementation of Blockchain. Real-world examples are very complicated but this is the first step to enter the Blockchain world.\n Please find the source code for this example on github\n","permalink":"https://codingnconcepts.com/javascript/blockchain-explained-using-javascript/","tags":["Javascript Coding"],"title":"Blockchain Explained using JavaScript"},{"categories":null,"contents":"Most of us think Blockchain as the technology behind Bitcoin. While this was its original purpose, blockchain is capable of so much more\u0026hellip;\nWhat is Blockchain?  Blockchain is digital, distributed, immutable and trusted ledger.\n Let\u0026rsquo;s understand each term one by one:-\nBlockchain is Digital Ledger You are familiar with the ledger, which is nothing but a book to record financial transactions. Similarly, Blockchain is a digital ledger which can be programmed to record things, and the things are not limited to financial transactions, but could be anything from government records to land titles, or even purchase orders.\n General Ledger\n  Each line of record in a ledger book can be assumed as a block in blockchain, which are linked together chronologically to form a chain of blocks.\nYou write a new record in the financial ledger book for any changes in previous transactions. Similarly, If you want to change record in a particular block, you don\u0026rsquo;t rewrite it. Instead, the change is recorded in a new block.\nBlockchain is Distributed Ledger Let\u0026rsquo;s assume that I am maintaining a shared ledger book with my friends where everyone records their mutual expenses. Let\u0026rsquo;s say, I lend $100 to my friend Ben and recorded in a shared ledger. Now my friends Charlie and David know the exact amount of money I lend to Ben and they\u0026rsquo;ve essentially endorsed the transaction and they made a record of it. Now when next month, Ben asked me how much money had initially lent him, we could easily go to anyone of my friends Charlie or David that have a record of that transaction. When you make new friends, they can also join you in shared ledger.\nSimilar to a shared ledger, Anyone can opt to connect their computer to the blockchain network as node. In doing so, their computer receives a copy of the blockchain that is updated automatically whenever a new block is added, sort of like a Facebook News Feed that gives a live update whenever a new status is posted.\nIn this sense, blockchain is distributed and data is shared.\nAdvantage  Reconciliation is not required as data is shared and each node is having copy of transaction. High availability as thousands of distributed nodes working in the network, doesn\u0026rsquo;t matter if few goes down.  Blockchain is Immutable Ledger Let\u0026rsquo;s look into the pieces which make up a Blockchain to understand its immutability\n  transaction: this is details of the transaction that occurred when the block was created\n  hash: this is a digital fingerprint that represents the transaction in the block and is completely unique. If there is any change in transaction details, the hash would also change. Generally, it\u0026rsquo;s an alphanumeric sequence generated by applying some crypto algorithm on transaction details\n  previousHash: this is the hash of the previous block in the chain.\n  Let\u0026rsquo;s look at the below example of blockchain. Where transaction is having sender, receiver, and amount details. For simplicity, we are generating hash by just combining transaction details, i.e.\nhash = sender + receiver + amount Please note that Block 1 is the first block in our Blockchain, also known as Genesis Block, is not having previousHash value.\nBlock 1 transaction { sender: Ash, receiver: Ben: amount: $100 } hash ashben100 previousHash Block 2 transaction { sender: Ben, receiver: Charlie: amount: $200 } hash bencharlie200 previousHash ashben100 Block 3 transaction { sender: Ash, receiver: David: amount: $300 } hash ashdavid300 previousHash bencharlie200 Let’s say a hacker attempts to edit the transaction amount in Block 2 from $200 to $999. As soon as they edit the dollar amount of the transaction, the block’s hash will change. The next block Block 3 in the chain will still contain the old previousHash, and the hacker would need to update that block in order to cover their tracks. However, doing so would change that block’s hash. And the next, and so on.\nBlock 2 (Tampered Amount) transaction { sender: Ben, receiver: Charlie: amount: $999 } hash bencharlie999 previousHash ashben100 Block 3 (Old Previous Hash) transaction { sender: Ash, receiver: David: amount: $300 } hash ashdavid300 previousHash bencharlie200 In order to change a single block, then, a hacker would need to change every single block after it on the blockchain. Recalculating all those hashes would take an enormous and improbable amount of computing power. In other words, once a block is added to the blockchain it becomes very difficult to edit and impossible to delete.\nIn this sense, Blockchains are immutable and tamper-resistant.\nBlockchain is Trusted Ledger When you transfer money to someone, you do it through a mediator, generally a bank. Now all the transaction records are centralized within the bank. There are more chances for hackers to tamper with records.\nMoreover, when you transfer a crypto currency like bitcoin, which is backed by blockchain technology, there is no mediator involved, essentially all of the nodes, millions in case of crypto currencies, in the blockchain network are mediators, having their own copy of records. If hackers want to tamper with any record, they need to do it in all those million copies of record.\nLet\u0026rsquo;s understand more on this, to become eligible for adding a new block in the blockchain, a node has to solve a very complex math problem and need to provide something called proof of work. Solving puzzle is intensive in terms of computation (time) and electricity consumption (money), which requires time as well as money.\nAs we saw earlier that hacker need to tamper with all those millions copies. If adding one block to the blockchain requires spending so much time and money, you can imagine how it will be to tamper with all those millions copies. Certainly it\u0026rsquo;s not worth the effort and more likely impossible.\nIn this sense, blockchain technology is trusted.\nBlockchain\u0026rsquo;s Use Cases 1. Bitcoin Most of the crypto currencies - Bitcoin, Dash, Ethereum, Litecoin, Ripple follows public blockchain. Public blockchains are open to everyone to view and access, also known as permissionless blockchain as you do not require authorization.\n Crypto Currencies\n  The bitcoin protocol is built on the blockchain. Introduced as digital currency, Bitcoin’s pseudonymous creator Satoshi Nakamoto referred to it as “a new electronic cash system that’s fully peer-to-peer, with no trusted third party.”\nHow Bitcoin Works? You have all these people, all over the world, who have bitcoin. There are likely many millions of people around the world who own at least a portion of a bitcoin. Let’s say one of those millions of people wants to spend their bitcoin on groceries. This is where the blockchain comes in.\n When one person pays another for goods using bitcoin, essentially a transaction is initiated. This transactions contains all the necessary information such as sender and receiver, but not the actual names, instead a unique digital signature sort of like a username is used along with amount, timestamp, etc. Bitcoin Block transaction: { type: BITCOIN sender: g4h4g5jnsm6bd4b8d0q6d8v4zx5k2la8d9n4c6f8, receiver: m1n2h3b4b5v6c7xz89sld8ff9d47d9dft47mkd, amount: 25 timestamp: dd-mm-yyyy hh:mm:sss } hash: ??????? previousHash: b4h84nv46sn29n4b5h6j7k8l2l3nx6b3n8l38xn40z54n2bv68c  This transaction joins the other transactions that have been made on the bitcoin network.  Bitcoin Miners The bitcoin blockchain is a public blockchain which means anyone can register themselves to be one of the Bitcoin Miner. Bitcoin miners are the nodes in bitcoin blockchain network. All the nodes in the network essentially having a copy of all transactions, and anytime new transactions are made they would be notified with the new block.\n All the Bitcoin miners in the network start picking up those transactions and validate by looking through all of the transactions that happen in the Blockchain so far that those are also valid. Each Bitcoin miner try to solve the cryptographic hash puzzle, also known as proof of work algorithm. Now, this is the consensus algorithm that public and permissionless blockchains use and essentially this is how they\u0026rsquo;re able to reach a consensus on which block should be next. As soon as one of the bitcoin miner solves the puzzle, essentially means generated the hash of the next block, what they\u0026rsquo;ll do is broadcast that hash of the block to all of the other nodes in the network. All the nodes verify the authenticity of the hash and once all approve, it is added as a new block in all the nodes in the network. Bitcoin miner is also rewarded with bitcoins for their work on solving the puzzle. Solving the puzzle also referred as mining  What if one of the bitcoin miner is hacker? Bitcoin miner is one of the node in bitcoin network, if bitcoin miner is a hacker and they manipulated their own copy of record then bitcoin protocol discourage the existence of such manipulated blockchain through a process called consensus. In the presence of multiple, differing copies of the blockchain, the consensus protocol will adopt the longest chain available.\nWhy cryptographic hash puzzle is time consuming? Each node try to solve hash puzzle to generate a unique hash from transaction details using SHA-256 algorithm, this might take less time. But some protocols like bitcoin protocol restrict hash to be generated with 32 leading zeros. Generating a hash with leading or trailing zeros is more complex. Similarly Generating a hash with 10 leading zeros is more computation intensive then 5 leading zeros.\nNow you will say that transaction details are fixed, it will generate hash based on these details. How we generate a hash with leading zeros? For this block is having a special field called nonce which is also included to generate hash. Each node do trial and error with keep changing the nonce value until they found the hash with specified leading zeros.\nSHA-256 ( nonce + transaction details ) = 00000h3bdju7vb3n9s73nf92n1b38d \n2. Private Blockchain Blockchain can also be used for business like supply chain, banking and government sectors. They are mostly private blockchains, which are accessible to a select group of authorized users - such as your company, a group of banks, or government agencies. This is also known as Permissioned blockchain.\nPrivate blockchain also uses a consensus algorithm but they are not as complex as public blockchain due to the limited number of nodes.\nNodes in the permissioned blockchain are trusted, so they generally know each other. Besides, they don\u0026rsquo;t always just represent users but entire organizations. So, in this case, it\u0026rsquo;s very important that our privacy is one of the main tenants of a permissioned Blockchain.\n3. Supply Chain Let\u0026rsquo;s take an example, let\u0026rsquo;s say that there\u0026rsquo;s a retailer that purchases 25 items in $1000. Now the manufacturer receives the order from the retailer and says, \u0026ldquo;OK, let\u0026rsquo;s approve\u0026rdquo;. Let\u0026rsquo;s make sure we have enough in the warehouse and let\u0026rsquo;s work with the shipping company. So, they go to the shipping company and they say, \u0026ldquo;OK, let\u0026rsquo;s ship this 100 items\u0026rdquo; and it\u0026rsquo;s going to cost them $100 to make the shipment.\nBlock 1 transaction: { type: BUY company: Star Retailer Ltd., items: 25, total_cost: $1000, discount: $50 } hash: buystartcompanyltd25100050 previousHash: - Block 2 transaction: { type: SHIP company: Shipping Bird Co., items: 25, total_cost: $100, dispatch_date: DD MM YY, arrival_date: DD MM YY } hash: shipshippingbirdco25100ddmmyyddmmyy previousHash: buystartcompanyltd25100050 There are some privacy concerns here,\n Manufactured should know all the information about retailer and shipment Retailer should not necessarily know about the shipping cost Shipment should not necessarily know about how many retailers spent Other retailers in the blockchain should not know about this retailer and shipment  So in this case, All of the organizations are part of the Blockchain, only the retailer which is part of the transaction that took place should be able to see that information. So, privacy must be part of the Blockchain for the business being able to control who can see particular transaction details.\n4. Smart Contracts One of the most successful business applications of Blockchain technology is something called Smart Contracts. Essentially this is code that\u0026rsquo;s running on the Blockchain and whenever certain conditions are met, they are automatically executed.\nSo, in the previous example of supply chain, whenever retailer made that purchase order to the manufacturer for this amount of goods there\u0026rsquo;s probably a manufacturing agent that double-checks that order has all the necessary information in it, they then probably go to the shipping agency to make sure they can cover the shipment and if the warehouse has the correct amount of goods. They\u0026rsquo;ll then make a shipment order. Now imagine if we could automate that whole process.\nThat\u0026rsquo;s what you can do with Smart Contracts, essentially code that will make sure that all the necessary information is met, and it\u0026rsquo;ll automatically create the shipment record. If any of those conditions is not met it could automatically release a refund to the retailer. This speeds up the whole process.\nReal Estate Smart Contract can automate the process title deeds, facilitate transactions and even grant access to properties through smart keys. The technology could streamline property sale, saving buyers time and money without the need to any middleman or real estate agent.\n5. Cross Border Payments People working in other countries generally send money back home from remittance agencies which takes hours, sometime few days and also they pay a good amount as fee. Blockchain technology would eliminate those Intermediaries and cut short the transfer time as well as transfer fee.\n Blockchain innovators for Cross Border Payments\n  6. Online Voting  In many countries, voter has to be present at the polling booth to cast their vote. There were always concerns about the authenticity of manual voting and voting machines. Voting is carried out online also in many countries but they also have concerns about security and fraud. Blockchain can successfully eliminate these concerns as it will present a clear record of the votes that have been cast. The tamper-proof feature of a blockchain makes it difficult to hack a blockchain-enabled voting system. With blockchain, voters can cast their vote from the comfort of their home. Citizens residing outside country can also cast their vote. This may result in a significant rise in voter turnout.\nWest Virginia has implemented a secure mobile voting application using blockchain technology that allows voters to receive, vote, and return their ballots electronically, first kind of project in United States history in 2018.\nCompanies working on online blockchain voting solution - FollowMyVote, Voatz, Scytl, Clear Ballot, Polyas, Intelivote, SMARTMATIC, electionrunner\n7. Inter-bank Payments The Monetary Authority of Singapore (MAS) announced Project Ubin, which use Blockchain and Distributed Ledger Technology (DLT) for inter-bank payments partnered with a consortium of financial institutions like Bank of America Merrill Lynch, Credit Suisse, DBS Bank, HSBC, JP Morgan, Mitsubishi UFJ Financial Group, OCBC, SGX, Standard Chartered, and UOB\n 8. Identity Management Identity of a person includes basic details (name, age, gender, nationality, address, contact, etc) and ID documents like birth certificate, driving license, voter card and unique identity card. These all details could be stored in distributed, secured, immutable blockchain records.\nBenefits  Distributed identity management system can be used by many services at the same time across the globe. Financial Services like banks can use this to verify customer identity for KYC (Know your customer) compliance. Educational Services like schools, universities can use this to provide academic certificates to student. This solves the problem of verifying the authenticity of certificates and avoid frauds of fake certificate. Government Bodies can use this to store birth certificates, marriage certificates, land titles to avoid corruption.  Summary I hope after reading this post, you have a basic understanding of blockchain technology and its practical usage. I will keep updating this post based on my findings. Thanks for reading.\nPlease read the next post if interested in some Blockchain coding - Blockchain implementation using JavaScript\n","permalink":"https://codingnconcepts.com/post/blockchain-explained/","tags":["Blockchain","Popular Posts"],"title":"Blockchain Explained"},{"categories":["Hugo"],"contents":"If you are using Hugo as a static site generator tool then you might have used hugo built-in shortcodes but here are some amazing hugo shortcodes which can be used in markdown files of your hugo website.\nShortcodes are simple snippets inside your content files calling built-in or custom templates.\nCreate Custom Shortcode To create a shortcode, place an HTML template in the layouts/shortcodes directory of your source organization. Consider the file name carefully since the shortcode name will mirror that of the file but without the .html extension. For example, layouts/shortcodes/myshortcode.html will be called with {{\u0026lt; myshortcode \u0026gt;}}\nHugo Shortcode Examples Current Year This is useful when you want to show current year in markdown.\nshortcode layouts/shortcodes/year.html\n{{ now.Format \u0026quot;2006\u0026quot; }} usage content/post/myblogpost.md\n--- # front-matter --- Top 10 things you should know in {{\u0026lt; year \u0026gt;}} result post/myblogpost.html\nTop 10 things you should know in 2020 \nLink to open in browser window By default when you create a link in hugo pages, it opens in same browser window. You can use this shortcode to open links in new browser window or tab.\nshortcode layouts/shortcodes/a_blank.html\n\u0026lt;a href=\u0026quot;{{ .Get \u0026quot;url\u0026quot; }}\u0026quot; target=\u0026quot;_blank\u0026quot;\u0026gt;{{ with .Get \u0026quot;title\u0026quot; }}{{.}}{{else}}{{.Get \u0026quot;url\u0026quot;}}{{end}}\u0026lt;/a\u0026gt; usage content/post/myblogpost.md\n--- # front-matter --- [Coding N Concepts](https://codingnconcepts.com/) opens in same browser window {{\u0026lt; a_blank title=\u0026quot;Coding N Concepts\u0026quot; url=\u0026quot;https://codingnconcepts.com/\u0026quot; \u0026gt;}} opens in new browser window. result post/myblogpost.html\nCoding N Concepts opens in same browser window\nCoding N Concepts opens in new browser window.\n\nAdd HTML elements in Code Block Sometime we need support to add some specific styling in our markdown file. Hugo doesn\u0026rsquo;t support adding raw HTML in markdown files by default but you can enable that by making unsafe property as true in config.toml file:\n[markup] [markup.goldmark.renderer] unsafe= true You can now use raw HTML elements in your markdown files but there is still a limitation that you can not use raw HTML in code blocks. That is where span hugo shortcode is useful. It creates a \u0026lt;/span\u0026gt; element with given style attributes.\nshortcode layouts/shortcodes/span.html\n\u0026lt;span {{ with .Get \u0026quot;style\u0026quot;}} style=\u0026quot;{{ . | safeCSS }}\u0026quot;{{ end }}\u0026gt;{{ .Get \u0026quot;text\u0026quot; }}\u0026lt;/span\u0026gt; usage content/post/myblogpost.md\n--- # front-matter --- ``` ▼ The trace first @ {{\u0026lt; span style=\u0026quot;color:red;\u0026quot; text=\u0026quot;test:1\u0026quot; \u0026gt;}} second @ {{\u0026lt; span style=\u0026quot;color:orange;font-style:italic;\u0026quot; text=\u0026quot;test:2\u0026quot; \u0026gt;}} third @ {{\u0026lt; span style=\u0026quot;color:green;background-color:yellow;\u0026quot; text=\u0026quot;test:3\u0026quot; \u0026gt;}} fourth @ {{\u0026lt; span style=\u0026quot;color:blue;border:1px solid blue;\u0026quot; text=\u0026quot;test:4\u0026quot; \u0026gt;}} (anonymous) @ {{\u0026lt; span style=\u0026quot;color:black;font-weight:bold;\u0026quot; text=\u0026quot;test:5\u0026quot; \u0026gt;}} ``` result post/myblogpost.html\n▼ The trace first @ test:1 second @ test:2 third @ test:3 fourth @ test:4 (anonymous) @ test:5 \nHighlighter This is useful when you want to highlight some of the content in markdown.\nshortcode layouts/shortcodes/highlight.html\n\u0026lt;mark\u0026gt;{{ with .Get 0 }}{{.}}{{end}}\u0026lt;/mark\u0026gt; usage content/post/myblogpost.md\n--- # front-matter --- This is the {{\u0026lt; highlight \u0026quot;most trending\u0026quot; \u0026gt;}} post of the decade. result post/myblogpost.html\nThis is the most trending post of the decade. \nStrike This is useful when you want to strike through some of the content in markdown.\nshortcode layouts/shortcodes/strike.html\n\u0026lt;strike\u0026gt;{{ with .Get 0 }}{{.}}{{end}}\u0026lt;/strike\u0026gt; usage content/post/myblogpost.md\n--- # front-matter --- This is {{\u0026lt; strike \u0026quot;not trending\u0026quot; \u0026gt;}} trending post of the decade. result post/myblogpost.html\nThis is the not trending trending post of the decade. \nCode Block Output This is useful when you want to show the output of certain code. It gives a beautiful title \u0026ldquo;Output\u0026rdquo;.\nshortcode layouts/shortcodes/code_output.html\n\u0026lt;div class=\u0026quot;code_output\u0026quot;\u0026gt;Output\u0026lt;/div\u0026gt; usage content/post/myblogpost.md\n--- # front-matter --- ``` {{\u0026lt; code_output \u0026gt;}} 1 2 3 ``` result post/myblogpost.html\nOutput 1 2 3 Escape Hugo Shortcode Sometime you might need to escape (i.e., prevent from executing) a shortcode in a Hugo markdown (.md) file, and display the shortcode as it is {{\u0026lt; myshortcode \u0026gt;}}\nA simple method that works at the time of writing, is adding /* after the opening double curly braces and the angle bracket or percent sign (i.e., {{\u0026lt; or {{%/*) and adding */ after the closing angle bracket or percent sign and double curly braces (i.e., \u0026gt;}} or */%}}). For example, this in markdown (.md) file\n{ {\u0026lt;/* myshortcode */\u0026gt;}} will be seen as this in generated HTML\n{{\u0026lt; myshortcode \u0026gt;}} ","permalink":"https://codingnconcepts.com/hugo/custom-shortcode-hugo/","tags":["Hugo Shortcode"],"title":"Useful Hugo Shortcodes"},{"categories":["Hugo"],"contents":"When you add structure data to your website, it helps google, bing or other website indexers to understand the content for your website and pages which leads to better search results for your website and eventually helps in SEO ranking.\nMark up schema is based on website type and its content. Suppose you have a blog website, then schema of your web pages will be of type \u0026ldquo;Article\u0026rdquo; or \u0026ldquo;BlogPosting\u0026rdquo;. You can go through the google\u0026rsquo;s example of adding structure data using JSON-LD for \u0026ldquo;Article\u0026rdquo; type of website pages.\nSchema of structure data for all type of websites and web pages can be found in documentation of schema.org\nMicrodata and JSON-LD are two ways to add mark up in order to structure your data. Google recommends using JSON-LD as it is more cleaner approach to express the structure of the data in JSON format embedded as a \u0026lt;script\u0026gt; in the \u0026lt;head\u0026gt; tag of your HTML. Its a clear separation of structure from HTML elements as compare to Microdata where you add special properties like itemprop, itemtype in HTML element tags everywhere.\nNow we know that JSON-LD is way to go. There are the steps to add structure data using JSON-LD in hugo website:\nCreate site_schema.html Partial First of all we are going to create a partial called site_schema.html which is responsible to generate structure data JSON-LD for hugo website and hugo blog pages. All you need to do is copy the below code snippet and save it under $hugo/layouts/partials/site_schema.html.\n{{ if .IsHome -}} \u0026lt;script type=\u0026quot;application/ld+json\u0026quot;\u0026gt; { \u0026quot;@context\u0026quot;: \u0026quot;http://schema.org\u0026quot;, \u0026quot;@type\u0026quot;: \u0026quot;WebSite\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;{{ .Site.Title }}\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;{{ .Site.BaseURL }}\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;{{ .Site.Params.description }}\u0026quot;, \u0026quot;thumbnailUrl\u0026quot;: \u0026quot;{{ .Site.Params.Logo | absURL }}\u0026quot;, \u0026quot;license\u0026quot;: \u0026quot;{{ .Site.Params.Copyright }}\u0026quot; } \u0026lt;/script\u0026gt; {{ else if .IsPage }} {{ $author := or (.Params.author) (.Site.Author.name) }} {{ $org_name := .Site.Title }} \u0026lt;script type=\u0026quot;application/ld+json\u0026quot;\u0026gt; { \u0026quot;@context\u0026quot;: \u0026quot;http://schema.org\u0026quot;, \u0026quot;@type\u0026quot;: \u0026quot;BlogPosting\u0026quot;, \u0026quot;articleSection\u0026quot;: \u0026quot;{{ .Section }}\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;{{ .Title | safeJS }}\u0026quot;, \u0026quot;headline\u0026quot;: \u0026quot;{{ .Title | safeJS }}\u0026quot;, \u0026quot;alternativeHeadline\u0026quot;: \u0026quot;{{ .Params.lead }}\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;{{ if .Description }}{{ .Description | safeJS }}{{ else }}{{if .IsPage}}{{ .Summary }}{{ end }}{{ end }}\u0026quot;, \u0026quot;inLanguage\u0026quot;: {{ .Site.LanguageCode | default \u0026quot;en-us\u0026quot; }}, \u0026quot;isFamilyFriendly\u0026quot;: \u0026quot;true\u0026quot;, \u0026quot;mainEntityOfPage\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;WebPage\u0026quot;, \u0026quot;@id\u0026quot;: \u0026quot;{{ .Permalink }}\u0026quot; }, \u0026quot;author\u0026quot; : { \u0026quot;@type\u0026quot;: \u0026quot;Person\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;{{ $author }}\u0026quot; }, \u0026quot;creator\u0026quot; : { \u0026quot;@type\u0026quot;: \u0026quot;Person\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;{{ $author }}\u0026quot; }, \u0026quot;accountablePerson\u0026quot; : { \u0026quot;@type\u0026quot;: \u0026quot;Person\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;{{ $author }}\u0026quot; }, \u0026quot;copyrightHolder\u0026quot; : \u0026quot;{{ $org_name }}\u0026quot;, \u0026quot;copyrightYear\u0026quot; : \u0026quot;{{ .Date.Format \u0026quot;2006\u0026quot; }}\u0026quot;, \u0026quot;dateCreated\u0026quot;: \u0026quot;{{ .Date.Format \u0026quot;2006-01-02T15:04:05.00Z\u0026quot; | safeHTML }}\u0026quot;, \u0026quot;datePublished\u0026quot;: \u0026quot;{{ .PublishDate.Format \u0026quot;2006-01-02T15:04:05.00Z\u0026quot; | safeHTML }}\u0026quot;, \u0026quot;dateModified\u0026quot;: \u0026quot;{{ .Lastmod.Format \u0026quot;2006-01-02T15:04:05.00Z\u0026quot; | safeHTML }}\u0026quot;, \u0026quot;publisher\u0026quot;:{ \u0026quot;@type\u0026quot;:\u0026quot;Organization\u0026quot;, \u0026quot;name\u0026quot;: {{ $org_name }}, \u0026quot;url\u0026quot;: {{ .Site.BaseURL }}, \u0026quot;logo\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;ImageObject\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;{{ .Site.Params.logo | absURL }}\u0026quot;, \u0026quot;width\u0026quot;:\u0026quot;32\u0026quot;, \u0026quot;height\u0026quot;:\u0026quot;32\u0026quot; } }, \u0026quot;image\u0026quot;: {{ if .Params.images }}[{{ range $i, $e := .Params.images }}{{ if $i }}, {{ end }}{{ $e | absURL }}{{ end }}]{{ else}}{{.Site.Params.logo | absURL }}{{ end }}, \u0026quot;url\u0026quot; : \u0026quot;{{ .Permalink }}\u0026quot;, \u0026quot;wordCount\u0026quot; : \u0026quot;{{ .WordCount }}\u0026quot;, \u0026quot;genre\u0026quot; : [ {{ range $index, $tag := .Params.tags }}{{ if $index }}, {{ end }}\u0026quot;{{ $tag }}\u0026quot; {{ end }}], \u0026quot;keywords\u0026quot; : [ {{ range $index, $keyword := .Params.keywords }}{{ if $index }}, {{ end }}\u0026quot;{{ $keyword }}\u0026quot; {{ end }}] } \u0026lt;/script\u0026gt; {{ end }} Note: I am using hugo as a static site generator for this blog website and after spending so much time here and there, i came up with this partial. You can do the changes in this partial as per your need.\nThe data to generate structure data json using this partial comes from the front-matter of the blog post and config.toml file. I have tried to feed in most of the data from front-matter and fallback as config.toml so that most of the blog post pages have their specific data.\nRelevant front-matter These are the relevant front-matter properties which are being used in generating JSON-LD schema for your blog page:-\nblog-page.md --- title: I am the name and headline of blog post structure data lead: I am alternativeHeadline of blog post structure data description: I am description of blog post structure data author: I am author, creator and accountablePerson of blog post structure data. I come from config.toml if not specified here date: I am copyrightYear, dateCreated and datePublished of blog post structure data lastmod: I am dateModified of blog post structure data. I am same as \u0026quot;date\u0026quot; if not specified. images: - \u0026quot;/img/image-1.png\u0026quot; - \u0026quot;/img/image-2.png\u0026quot; tags: - \u0026quot;genre 1 of blog post structure data\u0026quot; - \u0026quot;genre 2 of blog post structure data\u0026quot; keywords: - \u0026quot;keyword 1 of blog post structure data\u0026quot; - \u0026quot;keyword 2 of blog post structure data \u0026quot; --- Relevant config.toml These are the relevant config.toml configuration properties which are being used in generating JSON-LD schema for your website:-\nconfig.toml baseURL = \u0026quot;I am url of website structure data\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;I am name of website structure data\u0026quot; [Author] name = \u0026quot;I am fallback author of blog post structure data\u0026quot; [Params] description = \u0026quot;I am description of website structure data\u0026quot; logo = \u0026quot;favicon-32x32.png\u0026quot; copyright = \u0026quot;I am license of website structure data\u0026quot; Add partial to the \u0026lt;head\u0026gt; tag of baseof.html Once you created a partial, you need to add this partial in the \u0026lt;head\u0026gt; tag of html page under _default folder which generates your hugo website and blog HTML pages.\nIf you are using any theme in hugo website then this HTML page could be $hugo/themes/layouts/_default/baseof.html. If you have designed hugo website on your own then this HTML page could be $hugo/layouts/_default/baseof.html depending upon your naming convention. Just add the partial in HTML head tag like below:\nbaseof.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; ... ... {{ partial \u0026#34;site_schema.html\u0026#34; . }} \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Generated Structure Data JSON-LD The following structure data are generated in JSON-LD format.\nWebsite Main Page \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; ... ... ... \u0026lt;script type=\u0026#34;application/ld+json\u0026#34;\u0026gt; { \u0026#34;@context\u0026#34;: \u0026#34;http://schema.org\u0026#34;, \u0026#34;@type\u0026#34;: \u0026#34;WebSite\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Coding N Concepts\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://codingnconcepts.com/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Coding N Concepts is a technical blog for developers by developers to help you with coding problems, puzzle solving, interview preparation, learning concepts in simplified way.\u0026#34;, \u0026#34;thumbnailUrl\u0026#34;: \u0026#34;https://codingnconcepts.com/favicon-32x32.png\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;Ashish Lahoti\u0026#34; } \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Blog Post Page \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; ... ... ... \u0026lt;script type=\u0026#34;application/ld+json\u0026#34;\u0026gt; { \u0026#34;@context\u0026#34;: \u0026#34;http://schema.org\u0026#34;, \u0026#34;@type\u0026#34;: \u0026#34;BlogPosting\u0026#34;, \u0026#34;articleSection\u0026#34;: \u0026#34;hugo\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Structure Data Using JSON-LD for Hugo\u0026#34;, \u0026#34;headline\u0026#34;: \u0026#34;Structure Data Using JSON-LD for Hugo\u0026#34;, \u0026#34;alternativeHeadline\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Structure Data Using JSON-LD for Hugo\u0026#34;, \u0026#34;inLanguage\u0026#34;: \u0026#34;en-us\u0026#34;, \u0026#34;isFamilyFriendly\u0026#34;: \u0026#34;true\u0026#34;, \u0026#34;mainEntityOfPage\u0026#34;: { \u0026#34;@type\u0026#34;: \u0026#34;WebPage\u0026#34;, \u0026#34;@id\u0026#34;: \u0026#34;https://codingnconcepts/hugo/structure-data-json-ld\u0026#34; }, \u0026#34;author\u0026#34; : { \u0026#34;@type\u0026#34;: \u0026#34;Person\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Ashish Lahoti\u0026#34; }, \u0026#34;creator\u0026#34; : { \u0026#34;@type\u0026#34;: \u0026#34;Person\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Ashish Lahoti\u0026#34; }, \u0026#34;accountablePerson\u0026#34; : { \u0026#34;@type\u0026#34;: \u0026#34;Person\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Ashish Lahoti\u0026#34; }, \u0026#34;copyrightHolder\u0026#34; : \u0026#34;Coding N Concepts\u0026#34;, \u0026#34;copyrightYear\u0026#34; : \u0026#34;2020\u0026#34;, \u0026#34;dateCreated\u0026#34;: \u0026#34;2020-05-04T00:00:00.00Z\u0026#34;, \u0026#34;datePublished\u0026#34;: \u0026#34;2020-05-04T00:00:00.00Z\u0026#34;, \u0026#34;dateModified\u0026#34;: \u0026#34;2020-05-04T00:00:00.00Z\u0026#34;, \u0026#34;publisher\u0026#34;:{ \u0026#34;@type\u0026#34;:\u0026#34;Organization\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Coding N Concepts\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;http://localhost:1313/\u0026#34;, \u0026#34;logo\u0026#34;: { \u0026#34;@type\u0026#34;: \u0026#34;ImageObject\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://codingnconcepts/favicon-32x32.png\u0026#34;, \u0026#34;width\u0026#34;:\u0026#34;32\u0026#34;, \u0026#34;height\u0026#34;:\u0026#34;32\u0026#34; } }, \u0026#34;image\u0026#34;: \u0026#34;https://codingnconcepts/favicon-32x32.png\u0026#34;, \u0026#34;url\u0026#34; : \u0026#34;https://codingnconcepts/hugo/structure-data-json-ld\u0026#34;, \u0026#34;wordCount\u0026#34; : \u0026#34;857\u0026#34;, \u0026#34;genre\u0026#34; : [ \u0026#34;Hugo\u0026#34; , \u0026#34;SEO\u0026#34; ], \u0026#34;keywords\u0026#34; : [ \u0026#34;Schema markup using JSON-LD in hugo website\u0026#34;, \u0026#34;SEO optimization for hugo\u0026#34; ] } \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Verify Structure Data JSON-LD You can verify the structure data using Structured Data Testing Tool provided by Google where either you give a URL of your page or just copy paste whole HTML to verify. Look for the errors and correct them.\n","permalink":"https://codingnconcepts.com/hugo/structure-data-json-ld-hugo/","tags":["Hugo Partial"],"title":"Add Structure Data JSON-LD in Hugo Website Pages"},{"categories":["Java"],"contents":"The double colon :: operator is introduced in Java 8 for method reference. It is a shorthand syntax for lambda expression that executes one method. You can write more compact and readable code using double colon operator as compare to anonymous classes and lambda expression. We are going to understand its usage with lots of examples.\n1. Overview Prerequisite You should have a basic understanding of functional interface, lambda expressions and streams to understand these examples, if not then don\u0026rsquo;t worry, you will learn those concepts as well along the way.\nDouble colon refers to a method Double colon :: is basically refers to a single method, and this single method can be a\n A Static method ClassName::staticMethodName\ne.g. Integer.parseInteger, Double.parseDouble An Instance method Object::instanceMethodName\ne.g. System.out::println, String::toUpperCase A Constructor ClassName::new A Super method super::parentMethodName\n  Double colon returns a functional interface Double colon :: always return a functional interface. There are two ways to use this returned functional interface -\n Use this to initialize a functional interface and later execute a function.\nHere we either use java built-in functional interface like Function, Supplier, Consumer, BiFunction or we create our custom functional interface using @FunctionalInterface annotation. Use this to replace lambda expression in streams.\n  Don\u0026rsquo;t worry if it\u0026rsquo;s looking too complicated. Let\u0026rsquo;s deep dive into examples to understand them better.\n2. Static Method Syntax // Lambda expression (args) -\u0026gt; ClassName.staticMethodName(args) // Method Reference ClassName::staticMethodName \n2.1 Calculator Let\u0026rsquo;s create two static methods square and multiply in Calculator class.\nclass Calculator { public static double square(double num){ return Math.pow(num, 2); } public static double multiply(double num1, double num2) { return num1*num2; } } 2.1.1 Initialize Functional Interface Let’s initialize java built-in Function, BiFunction functional interface and apply it to find square and multiply respectively.\nFunction interface accepts one argument and returns one argument. Here, it takes one Double arg and return its square.\nBiFunction interface accepts two arguments and returns one argument. Here, it takes two Double args and return its multiplication.\n// Initialize functional interface Function\u0026lt;Double, Double\u0026gt; square = Calculator::square; BiFunction\u0026lt;Double, Double, Double\u0026gt; multiply = Calculator::multiply; // Execute function square.apply(3.0); multiply.apply(2.5, 5.0) Output 9.0 12.5 2.1.2 Replace Lambda Expression We generate square of list of Integer by replacing lambda expression with method reference.\nList\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1,2,3); // Lambda expression numbers.stream().map(number -\u0026gt; Calculator.square(number)).forEach(number -\u0026gt; System.out.println(number)); // Method Reference numbers.stream().map(Calculator::square).forEach(System.out::println); Output 1.0 4.0 9.0 \n2.2 Integer::parseInt We know that parseInt is a static method in Integer class.\n2.2.1 Initialize Functional Interface Let\u0026rsquo;s initialize java built-in Function functional interface and apply it to parse String to Integer.\nFunction interface takes one argument and returns one argument. Here in example, it takes a String argument and returns Integer.\n// Initialize functional interface Function\u0026lt;String, Integer\u0026gt; parseInt = Integer::parseInt; // Execute function parseInt.apply(\u0026#34;2019\u0026#34;); Output 2019 2.2.2 Replace Lambda Expression Let\u0026rsquo;s parse a list of String to Integer using its static parseInt method. We see that how we can replace lambda expression with method reference resulting in same output.\nList\u0026lt;String\u0026gt; years = Arrays.asList(\u0026#34;2019\u0026#34;, \u0026#34;2020\u0026#34;, \u0026#34;2021\u0026#34;); // Lambda Expression years.stream().map(year -\u0026gt; Integer.parseInt(year)).forEach(year -\u0026gt; System.out.println(year)); // Method Reference years.stream().map(Integer::parseInt).forEach(System.out::println); Output 2019 2020 2021 \n3. Instance Method Syntax // Lambda expression (args) -\u0026gt; object.instanceMethodName(args) // Method Reference object::instanceMethodName \n3.1 Calculator Let\u0026rsquo;s create two instance methods square and multiply in Calculator class.\nclass Calculator { public double square(double num){ return Math.pow(num, 2); } public double multiply(double num1, double num2) { return num1*num2; } } 3.1.1 Initialize Functional Interface Let’s initialize java built-in Function, BiFunction functional interface and apply it to find square and multiply respectively.\n// Initialize functional interface Function\u0026lt;Double, Double\u0026gt; square = new Calculator()::square; BiFunction\u0026lt;Double, Double, Double\u0026gt; multiply = new Calculator()::multiply; // Execute function square.apply(3.0); multiply.apply(2.5, 5.0) Output 9.0 12.5 3.1.2 Replace Lambda Expression We generate square of list of Integer by replacing lambda expression with method reference.\nList\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1,2,3); // Lambda expression numbers.stream().map(number -\u0026gt; new Calculator().square(number)).forEach(number -\u0026gt; System.out.println(number)); // Method Reference numbers.stream().map(new Calculator()::square).forEach(System.out::println); Output 1.0 4.0 9.0 \n3.2 System.out::println 3.2.1 Initialize Functional Interface Let\u0026rsquo;s initialize java built-in Supplier functional interface to print a String.\nSupplier interface accepts one argument and returns nothing. Here in example, it accepts a String argument and print it.\n// Initialize functional interface Consumer\u0026lt;String\u0026gt; println = System.out::println; // Execute function println.accept(\u0026#34;Learning Method Reference a.k.a Colon Operator ::\u0026#34;); Output Learning Method Reference a.k.a Colon Operator :: 3.2.2 Replace Anonymous Class and Lambda Expression We will print a list of String and see how double colon :: method reference makes the code more concise and readable as compare to anonymous class and lambda expression.\nList\u0026lt;String\u0026gt; languages = Arrays.asList(\u0026#34;java\u0026#34;, \u0026#34;javascript\u0026#34;, \u0026#34;css\u0026#34;); // Anonymous Class languages.forEach(new Consumer\u0026lt;String\u0026gt;() { @Override public void accept(String str) { System.out.println(str); } }); // Lambda expression languages.forEach(str -\u0026gt; System.out.println(str)); // Method Reference languages.forEach(System.out::println); Output java javascript css 3.2.3 Print a list of Integer Let\u0026rsquo;s print a list of integer using lambda expression and double colon :: method reference.\nList\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1,2,3); // Lambda expression numbers.forEach(number-\u0026gt;System.out.println(number)); // Method Reference numbers.forEach(System.out::println); Output 1 2 3 \n3.3 String::toUpperCase 3.3.1 Initialize Functional Interface Let\u0026rsquo;s initialize java built-in Function functional interface and execute it to change String to UPPERCASE.\n// Initialize functional interface Function\u0026lt;String, String\u0026gt; toUpperCase = String::toUpperCase; // Execute function toUpperCase.apply(\u0026#34;java\u0026#34;); Output JAVA 3.3.2 Replace Lambda Expression Let\u0026rsquo;s look at the example where we use multiple method references to print the String in uppercase.\nList\u0026lt;String\u0026gt; languages = Arrays.asList(\u0026#34;java\u0026#34;, \u0026#34;javascript\u0026#34;, \u0026#34;css\u0026#34;); // Lambda expression languages.stream().map(str -\u0026gt; str.toUpperCase()).forEach(str -\u0026gt; System.out.println(str)); // Method Reference languages.stream().map(String::toUpperCase).forEach(System.out::println); Output JAVA JAVASCRIPT CSS \n4. Constructor Double colon :: operator can be used to create an instance by calling constructor.\nSyntax ClassName::new \n4.1 Create an int[10] array // Default int[] array1 = new int[10]; // Method Reference IntFunction\u0026lt;int[]\u0026gt; arrayMaker = int[]::new; int[] array2 = arrayMaker.apply(10); \n4.2 Create HashMap // Default Map map1 = new HashMap(); // Method Reference Supplier\u0026lt;Map\u0026gt; mapMaker = HashMap::new; Map map2 = mapMaker.get(); \n5. Super Method Syntax super::parentMethodName We create square and multiply instance methods in Calculator class and then call those methods in our inherited AdvanceCalculator class using super::parentMethodName to create advance methods squareAndAdd and squareAndMultiply\nclass Calculator { public double square(double num){ return Math.pow(num, 2); } public double multiply(double num1, double num2) { return num1*num2; } } class AdvanceCalculator extends Calculator { public double squareAndAdd(double num1, double num2) { Function\u0026lt;Double, Double\u0026gt; square = super::square; return square.apply(num1) + square.apply(num2); } public double squareAndMultiply(double num1, double num2) { Function\u0026lt;Double, Double\u0026gt; square = super::square; BiFunction\u0026lt;Double, Double, Double\u0026gt; multiply = super::multiply; return multiply.apply(square.apply(num1), square.apply(num2)); } } \n6. Real World Practical example Let\u0026rsquo;s create a Class Tutorial with properties name, duration and rating.\nclass Tutorial { private String name; private Integer duration; private Double rating; public Tutorial(String name) { this.name = name; this.duration = 0; this.rating = 0.0; } public Tutorial(String name, Integer duration) { this.name = name; this.duration = duration; this.rating = 0.0; } public Tutorial(String name, Integer duration, Double rating) { this.name = name; this.duration = duration; this.rating = rating; } public String getName() { return name; }\tpublic void setName(String name) { this.name = name; } public Integer getDuration() { return duration; } public void setDuration(Integer duration) { this.duration = duration; } public Double getRating() { return rating; } public void setRating(Double rating) { this.rating = rating; } @Override public String toString() { return \u0026#34;Tutorial[ \u0026#34; + name + \u0026#34;\\t- \u0026#34; + duration + \u0026#34;min, rating=\u0026#34; + rating + \u0026#34; ]\u0026#34;; } public static int compareByRating(Tutorial t1, Tutorial t2) { return t1.getRating().compareTo(t2.getRating()); } public static int compareByDuration(Tutorial t1, Tutorial t2) { return t1.getDuration().compareTo(t2.getDuration()); } } Let\u0026rsquo;s create a few tutorials\n// List of tutorials List\u0026lt;Tutorial\u0026gt; tutorials = Arrays.asList(new Tutorial[] { new Tutorial(\u0026#34;Streams in Java 8\u0026#34;, 30, 4.2), new Tutorial(\u0026#34;What\u0026#39;s new in Java 11\u0026#34;, 25, 4.8), new Tutorial(\u0026#34;Core Java Concepts\u0026#34;, 45, 3.5)}); \n6.1 Print the list of tutorials // Lambda Expression tutorials.forEach(tutorial -\u0026gt; System.out.println(tutorial)); // Method Reference tutorials.forEach(System.out::println); Output Tutorial[ Streams in Java 8\t- 30min, rating=4.2 ] Tutorial[ What's new in Java 11\t- 25min, rating=4.8 ] Tutorial[ Core Java Concepts\t- 45min, rating=3.5 ] \n6.2 Get list of tutorial names in uppercase // Lambda Expression tutorials.stream().map(tutorial -\u0026gt; tutorial.getName()).map(name -\u0026gt; name.toUpperCase()).forEach(s -\u0026gt; System.out.println(s)); // Method Reference tutorials.stream().map(Tutorial::getName).map(String::toUpperCase).forEach(System.out::println); Output STREAMS IN JAVA 8 WHAT'S NEW IN JAVA 11 CORE JAVA CONCEPTS \n6.3 Sort Tutorials by Rating // Lambda Expression tutorials.stream().sorted((tutorial1, tutorial2) -\u0026gt; Tutorial.compareByRating(tutorial1, tutorial2)).forEach(tutorial -\u0026gt; System.out.println(tutorial)); // Method Reference tutorials.stream().sorted(Tutorial::compareByRating).forEach(System.out::println);\tOutput Tutorial[ Core Java Concepts\t- 45min, rating=3.5 ] Tutorial[ Streams in Java 8\t- 30min, rating=4.2 ] Tutorial[ What's new in Java 11\t- 25min, rating=4.8 ] \n6.4 Sort Tutorials by Duration // Lambda Expression tutorials.stream().sorted((tutorial1, tutorial2) -\u0026gt; Tutorial.compareByDuration(tutorial1, tutorial2)).forEach(tutorial -\u0026gt; System.out.println(tutorial)); // Method Reference tutorials.stream().sorted(Tutorial::compareByDuration).forEach(System.out::println);\tOutput Tutorial[ What's new in Java 11\t- 25min, rating=4.8 ] Tutorial[ Streams in Java 8\t- 30min, rating=4.2 ] Tutorial[ Core Java Concepts\t- 45min, rating=3.5 ] \n6.5 Create New Instance of Tutorial Each constructor method reference returns a Functional Interface. One-arg constructor returns Function and two-arg constructor returns BiFunction functional interface comes default in Java 8 so we are creating TriFunction functional interface on our own to call three-arg constructor.\n@FunctionalInterface interface TriFunction\u0026lt;A, B, C, R\u0026gt; { R apply(A a, B b, C c); default \u0026lt;V\u0026gt; TriFunction\u0026lt;A, B, C, V\u0026gt; andThen( Function\u0026lt;? super R, ? extends V\u0026gt; after) { Objects.requireNonNull(after); return (A a, B b, C c) -\u0026gt; after.apply(apply(a, b, c)); } } // Create an instance from one arg constructor Function\u0026lt;String, Tutorial\u0026gt; tutorial1 = Tutorial::new; Tutorial t1 = tutorial1.apply(\u0026#34;Tutorial 1\u0026#34;); // Create an instance from two arg constructor BiFunction\u0026lt;String, Integer, Tutorial\u0026gt; tutorial2 = Tutorial::new; Tutorial t2 = tutorial2.apply(\u0026#34;Tutorial 2\u0026#34;, 25); // Create an instance from three arg constructor TriFunction\u0026lt;String, Integer, Double, Tutorial\u0026gt; tutorial3 = Tutorial::new; Tutorial t3 = tutorial3.apply(\u0026#34;Tutorial 3\u0026#34;, 30, 4.9); Arrays.asList(t1, t2, t3).forEach(System.out::println); Output Tutorial[ Tutorial 1\t- 0min, rating=0.0 ] Tutorial[ Tutorial 2\t- 25min, rating=0.0 ] Tutorial[ Tutorial 3\t- 30min, rating=4.9 ] \n7. Conclusion In this article, we saw how to use double colon operator introduced in Java 8. It is very useful to keep your code concise and readable specially in streams where you can replace lambda expressions with method reference using double colon operator.\nModern IDEs such as Eclipse (Quick Fix Feature) and IntelliJ IDEA (Intention Feature) provide built in support to convert lambda expression to an equivalent method reference.\n","permalink":"https://codingnconcepts.com/java/double-colon-operator-in-java-8/","tags":["Java Streams"],"title":"Double Colon (::) Operator in Java 8"},{"categories":["Spring Boot"],"contents":"Spring boot use tomcat as default embedded tomcat server to run a web application but you can configure jetty server to replace tomcat in easy steps.\nAdd spring-boot-starter-jetty dependency We need to do two things here:-\n Exclude default dependency spring-boot-starter-tomcat added in spring-boot-start-web Add spring-boot-starter-jetty dependency.  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;exclusions\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-tomcat\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;/exclusions\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-jetty\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; That\u0026rsquo;s it. You have replaced tomcat with jetty server.\n\nObservations When you build spring boot maven project, it smartly replace tomcat jars with jetty dependency jars from maven dependency as follows:\n▼ Maven Dependencies ► tomcat-embed-core-x.y.z.jar ► tomcat-embed-el-x.y.z.jar ► tomcat-embed-websocket-x.y.z.jar ► jetty.servlets-x.y.z.jar ► jetty.continuation-x.y.z.jar ► jetty-http-x.y.z.jar ► jetty-webapp-x.y.z.jar ► jetty-servlet-x.y.z.jar ► jetty-security-x.y.z.jar ► jetty-server-x.y.z.jar  When you start spring boot application, You will in the logs that jetty is serving your web application now:-\n2020-04-25 13:25:02.208 - INFO [main] c.a.s.SpringbootApplication : Starting SpringbootMicroserviceApplication on Ashishs-MBP with PID 2910 2020-04-25 13:25:02.213 - INFO [main] c.a.s.SpringbootApplication : No active profile set, falling back to default profiles: default 2020-04-25 13:25:03.317 - INFO [main] o.s.b.w.e.j.JettyServletWebServerFactory : Server initialized with port: 8080 2020-04-25 13:25:03.320 - INFO [main] org.eclipse.jetty.server.Server : jetty-9.4.27.v20200227; built: 2020-02-27T18:37:21.340Z; git: a304fd9f351f337e7c0e2a7c28878dd536149c6c; jvm 1.8.0_211-b12 2020-04-25 13:25:03.350 - INFO [main] o.e.j.s.h.ContextHandler.application : Initializing Spring embedded WebApplicationContext 2020-04-25 13:25:03.476 - INFO [main] o.e.jetty.server.handler.ContextHandler : Started o.s.b.w.e.j.JettyEmbeddedWebAppContext@30c3ae63 2020-04-25 13:25:03.476 - INFO [main] org.eclipse.jetty.server.Server : Started @2273ms ","permalink":"https://codingnconcepts.com/spring-boot/configure-embedded-jetty-server/","tags":["Spring Boot Basics"],"title":"Configure embedded Jetty server in spring boot"},{"categories":["Spring Boot"],"contents":"When we create RESTFul APIs in spring boot application in microservices environment. It becomes essential to log incoming API request and response and push it to centralized logging system such as Splunk or ELK for debugging. Also all the logs related to one request should have some common id to relate them. In this post we are going to solve these problems.\n1. Create RESTFul API Let\u0026rsquo;s create a RestController to expose RESTFul API\n@RestController @RequestMapping(\u0026#34;/posts\u0026#34;) public class PostController { @GetMapping public List\u0026lt;Post\u0026gt; getAllPosts() { return Arrays.asList(new Post[] { new Post[] { new Post(\u0026#34;spring\u0026#34;, \u0026#34;Spring Boot\u0026#34;, \u0026#34;All about Spring boot microservice\u0026#34;), new Post(\u0026#34;java\u0026#34;, \u0026#34;Java\u0026#34;, \u0026#34;Learn Streams in Java\u0026#34;), new Post(\u0026#34;javascript\u0026#34;, \u0026#34;JavaScript\u0026#34;, \u0026#34;Whats new in ES6\u0026#34;)\t}); } }  \n2. Create API Logger At this point we have exposed API but we haven\u0026rsquo;t logged it yet. Let\u0026rsquo;s create an API logger which is having following configurable properties:-\n app.api.logging.enable If true then api logger will be enabled and log all api request and response app.api.logging.url-patterns If provided in a comma separated url patterns, only those api request and response will be logged. default value is '*' means all api request and response will be printed app.api.logging.requestIdParamName If provided request parameter in incoming api request will be logged across all logs to serve that request. default value is requestId. If not provided, new request id (uuid) will be generated to log across all logs.  import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression; import org.springframework.boot.web.servlet.FilterRegistrationBean; import org.springframework.context.annotation.Bean; import org.springframework.stereotype.Component; @Component @ConditionalOnExpression(\u0026#34;${app.api.logging.enable:true}\u0026#34;) public class ApiLoggingFilterConfig { @Value(\u0026#34;${app.api.logging.url-patterns:*}\u0026#34;) \tprivate String[] urlPatterns; @Value(\u0026#34;${app.api.logging.requestIdParamName:requestId}\u0026#34;) \tprivate String requestIdParamName; @Bean public FilterRegistrationBean\u0026lt;ApiLoggingFilter\u0026gt; loggingFilter() { FilterRegistrationBean\u0026lt;ApiLoggingFilter\u0026gt; registrationBean = new FilterRegistrationBean\u0026lt;\u0026gt;(); registrationBean.setFilter(new ApiLoggingFilter(requestIdParamName)); registrationBean.addUrlPatterns(urlPatterns); return registrationBean; } } Now we will create ApiLoggingFilter which is nothing but a Servlet Filter. This filter intercepts all api request and response and log them. It also make use of slf4j MDC to print requestId across all the logs serve that request. ApiLoggingFilter class is long. you can expand below to see code.\n Click to expand ApiLoggingFilter import java.io.BufferedReader; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.util.Collection; import java.util.Enumeration; import java.util.HashMap; import java.util.Locale; import java.util.Map; import java.util.UUID; import javax.servlet.Filter; import javax.servlet.FilterChain; import javax.servlet.ReadListener; import javax.servlet.ServletException; import javax.servlet.ServletInputStream; import javax.servlet.ServletOutputStream; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse; import javax.servlet.WriteListener; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletRequestWrapper; import javax.servlet.http.HttpServletResponse; import org.apache.commons.io.output.TeeOutputStream; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.slf4j.MDC; public class ApiLoggingFilter implements Filter { private static final Logger LOGGER = LoggerFactory.getLogger(ApiLoggingFilter.class); private String requestIdParamName; ApiLoggingFilter(String requestIdParamName) { this.requestIdParamName = requestIdParamName; } @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { try { HttpServletRequest httpServletRequest = (HttpServletRequest) request; HttpServletResponse httpServletResponse = (HttpServletResponse) response; Map\u0026lt;String, String\u0026gt; requestMap = this.getTypesafeRequestMap(httpServletRequest); BufferedRequestWrapper bufferedRequest = new BufferedRequestWrapper(httpServletRequest); BufferedResponseWrapper bufferedResponse = new BufferedResponseWrapper(httpServletResponse); String requestId = requestMap.containsKey(requestIdParamName) ? requestMap.get(requestIdParamName) : UUID.randomUUID().toString(); MDC.put(\u0026#34;REQUEST_ID\u0026#34;, requestId); final StringBuilder logRequest = new StringBuilder(\u0026#34;HTTP \u0026#34;).append(httpServletRequest.getMethod()) .append(\u0026#34; \\\u0026#34;\u0026#34;).append(httpServletRequest.getServletPath()).append(\u0026#34;\\\u0026#34; \u0026#34;).append(\u0026#34;, parameters=\u0026#34;) .append(requestMap).append(\u0026#34;, body=\u0026#34;).append(bufferedRequest.getRequestBody()) .append(\u0026#34;, remote_address=\u0026#34;).append(httpServletRequest.getRemoteAddr()); LOGGER.info(logRequest.toString()); try { chain.doFilter(bufferedRequest, bufferedResponse); } finally { final StringBuilder logResponse = new StringBuilder(\u0026#34;HTTP RESPONSE \u0026#34;) .append(bufferedResponse.getContent()); LOGGER.info(logResponse.toString()); MDC.clear(); } } catch (Throwable a) { LOGGER.error(a.getMessage()); } } private Map\u0026lt;String, String\u0026gt; getTypesafeRequestMap(HttpServletRequest request) { Map\u0026lt;String, String\u0026gt; typesafeRequestMap = new HashMap\u0026lt;String, String\u0026gt;(); Enumeration\u0026lt;?\u0026gt; requestParamNames = request.getParameterNames(); while (requestParamNames.hasMoreElements()) { String requestParamName = (String) requestParamNames.nextElement(); String requestParamValue; if (requestParamName.equalsIgnoreCase(\u0026#34;password\u0026#34;)) { requestParamValue = \u0026#34;********\u0026#34;; } else { requestParamValue = request.getParameter(requestParamName); } typesafeRequestMap.put(requestParamName, requestParamValue); } return typesafeRequestMap; } private static final class BufferedRequestWrapper extends HttpServletRequestWrapper { private ByteArrayInputStream bais = null; private ByteArrayOutputStream baos = null; private BufferedServletInputStream bsis = null; private byte[] buffer = null; public BufferedRequestWrapper(HttpServletRequest req) throws IOException { super(req); // Read InputStream and store its content in a buffer. \tInputStream is = req.getInputStream(); this.baos = new ByteArrayOutputStream(); byte buf[] = new byte[1024]; int read; while ((read = is.read(buf)) \u0026gt; 0) { this.baos.write(buf, 0, read); } this.buffer = this.baos.toByteArray(); } @Override public ServletInputStream getInputStream() { this.bais = new ByteArrayInputStream(this.buffer); this.bsis = new BufferedServletInputStream(this.bais); return this.bsis; } String getRequestBody() throws IOException { BufferedReader reader = new BufferedReader(new InputStreamReader(this.getInputStream())); String line = null; StringBuilder inputBuffer = new StringBuilder(); do { line = reader.readLine(); if (null != line) { inputBuffer.append(line.trim()); } } while (line != null); reader.close(); return inputBuffer.toString().trim(); } } private static final class BufferedServletInputStream extends ServletInputStream { private ByteArrayInputStream bais; public BufferedServletInputStream(ByteArrayInputStream bais) { this.bais = bais; } @Override public int available() { return this.bais.available(); } @Override public int read() { return this.bais.read(); } @Override public int read(byte[] buf, int off, int len) { return this.bais.read(buf, off, len); } @Override public boolean isFinished() { return false; } @Override public boolean isReady() { return true; } @Override public void setReadListener(ReadListener readListener) { } } public class TeeServletOutputStream extends ServletOutputStream { private final TeeOutputStream targetStream; public TeeServletOutputStream(OutputStream one, OutputStream two) { targetStream = new TeeOutputStream(one, two); } @Override public void write(int arg0) throws IOException { this.targetStream.write(arg0); } public void flush() throws IOException { super.flush(); this.targetStream.flush(); } public void close() throws IOException { super.close(); this.targetStream.close(); } @Override public boolean isReady() { return false; } @Override public void setWriteListener(WriteListener writeListener) { } } public class BufferedResponseWrapper implements HttpServletResponse { HttpServletResponse original; TeeServletOutputStream tee; ByteArrayOutputStream bos; public BufferedResponseWrapper(HttpServletResponse response) { original = response; } public String getContent() { return bos.toString(); } public PrintWriter getWriter() throws IOException { return original.getWriter(); } public ServletOutputStream getOutputStream() throws IOException { if (tee == null) { bos = new ByteArrayOutputStream(); tee = new TeeServletOutputStream(original.getOutputStream(), bos); } return tee; } @Override public String getCharacterEncoding() { return original.getCharacterEncoding(); } @Override public String getContentType() { return original.getContentType(); } @Override public void setCharacterEncoding(String charset) { original.setCharacterEncoding(charset); } @Override public void setContentLength(int len) { original.setContentLength(len); } @Override public void setContentLengthLong(long l) { original.setContentLengthLong(l); } @Override public void setContentType(String type) { original.setContentType(type); } @Override public void setBufferSize(int size) { original.setBufferSize(size); } @Override public int getBufferSize() { return original.getBufferSize(); } @Override public void flushBuffer() throws IOException { tee.flush(); } @Override public void resetBuffer() { original.resetBuffer(); } @Override public boolean isCommitted() { return original.isCommitted(); } @Override public void reset() { original.reset(); } @Override public void setLocale(Locale loc) { original.setLocale(loc); } @Override public Locale getLocale() { return original.getLocale(); } @Override public void addCookie(Cookie cookie) { original.addCookie(cookie); } @Override public boolean containsHeader(String name) { return original.containsHeader(name); } @Override public String encodeURL(String url) { return original.encodeURL(url); } @Override public String encodeRedirectURL(String url) { return original.encodeRedirectURL(url); } @SuppressWarnings(\u0026#34;deprecation\u0026#34;) @Override public String encodeUrl(String url) { return original.encodeUrl(url); } @SuppressWarnings(\u0026#34;deprecation\u0026#34;) @Override public String encodeRedirectUrl(String url) { return original.encodeRedirectUrl(url); } @Override public void sendError(int sc, String msg) throws IOException { original.sendError(sc, msg); } @Override public void sendError(int sc) throws IOException { original.sendError(sc); } @Override public void sendRedirect(String location) throws IOException { original.sendRedirect(location); } @Override public void setDateHeader(String name, long date) { original.setDateHeader(name, date); } @Override public void addDateHeader(String name, long date) { original.addDateHeader(name, date); } @Override public void setHeader(String name, String value) { original.setHeader(name, value); } @Override public void addHeader(String name, String value) { original.addHeader(name, value); } @Override public void setIntHeader(String name, int value) { original.setIntHeader(name, value); } @Override public void addIntHeader(String name, int value) { original.addIntHeader(name, value); } @Override public void setStatus(int sc) { original.setStatus(sc); } @SuppressWarnings(\u0026#34;deprecation\u0026#34;) @Override public void setStatus(int sc, String sm) { original.setStatus(sc, sm); } @Override public String getHeader(String arg0) { return original.getHeader(arg0); } @Override public Collection\u0026lt;String\u0026gt; getHeaderNames() { return original.getHeaderNames(); } @Override public Collection\u0026lt;String\u0026gt; getHeaders(String arg0) { return original.getHeaders(arg0); } @Override public int getStatus() { return original.getStatus(); } } }  \n3. application.yml Let\u0026rsquo;s setup properties related to ApiLoggingFilterConfig file in .properties or .yml file\n We have enabled api logger app.api.logging.enabled=true We have given comma separated url-patterns for which we want to print all api request and response app.api.logging.url-patterns=/posts/*,/users/* We have given requestIdParamName whose value will be printed in api request and response. If parameter is not there then uuid will be generated and printed. Last but not least, we have changed default logging pattern of spring boot to print REQUEST_ID\nDefault Spring Boot Logging Pattern is as follows:- \u0026quot;%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}\u0026quot;   app: api: logging: enable: true url-patterns: \u0026#34;/users/*,/posts/*\u0026#34; requestIdParamName: reqId logging: level: root: INFO com.abc.demo: DEBUG pattern: console: \u0026#34;%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%8.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %X{REQUEST_ID} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}\u0026#34; \n4. Logs That\u0026rsquo;s it. Let\u0026rsquo;s execute some RESTFul API and look at the logs:-\nhttp://localhost:8080/posts?reqId=1234 2020-04-23 21:09:44.107 - INFO 3240 --- ApiLoggingFilter: 1234 HTTP GET \u0026quot;/posts\u0026quot; , parameters={requestId=1234}, body=, remote_address=0:0:0:0:0:0:0:1 2020-04-23 21:09:44.110 - INFO 3240 --- ApiLoggingFilter: 1234 HTTP RESPONSE [{\u0026quot;id\u0026quot;:1,\u0026quot;title\u0026quot;:\u0026quot;Spring Boot\u0026quot;,\u0026quot;body\u0026quot;:\u0026quot;All about Spring boot microservice\u0026quot;},{\u0026quot;id\u0026quot;:2,\u0026quot;title\u0026quot;:\u0026quot;Java\u0026quot;,\u0026quot;body\u0026quot;:\u0026quot;Learn Streams in Java\u0026quot;},{\u0026quot;id\u0026quot;:3,\u0026quot;title\u0026quot;:\u0026quot;JavaScript\u0026quot;,\u0026quot;body\u0026quot;:\u0026quot;Whats new in ES6\u0026quot;}] http://localhost:8080/posts When reqId is not passed as parameter, default uuid will be printed across all logs\n2020-04-23 21:09:44.107 - INFO 3240 --- ApiLoggingFilter: 754be6a6-b00a-4c98-b681-2d0041b4f72c HTTP GET \u0026quot;/posts\u0026quot; , parameters={requestId=1234}, body=, remote_address=0:0:0:0:0:0:0:1 2020-04-23 21:09:44.110 - INFO 3240 --- ApiLoggingFilter: 754be6a6-b00a-4c98-b681-2d0041b4f72c HTTP RESPONSE [{\u0026quot;id\u0026quot;:1,\u0026quot;title\u0026quot;:\u0026quot;Spring Boot\u0026quot;,\u0026quot;body\u0026quot;:\u0026quot;All about Spring boot microservice\u0026quot;},{\u0026quot;id\u0026quot;:2,\u0026quot;title\u0026quot;:\u0026quot;Java\u0026quot;,\u0026quot;body\u0026quot;:\u0026quot;Learn Streams in Java\u0026quot;},{\u0026quot;id\u0026quot;:3,\u0026quot;title\u0026quot;:\u0026quot;JavaScript\u0026quot;,\u0026quot;body\u0026quot;:\u0026quot;Whats new in ES6\u0026quot;}] \n5. Summary We saw in this post that how we can create custom logger to print API request and response. Also incoming request can have requestId parameter which can be printed across all the logs which serves that request. This parameter can be further passed down in downstream microservices to further print it in the logs. This way a request can be tracked end to end from the logs.\nPlease find the complete source code of custom logging API on github springboot-microservice\n","permalink":"https://codingnconcepts.com/spring-boot/custom-api-request-response-logging/","tags":["Spring Boot REST"],"title":"Custom API Request \u0026 Response Logging in spring boot."},{"categories":["Spring Boot"],"contents":"In spring boot microservices based application, where microservices talks to each other using RESTFul APIs. We can expose some important information about microservice such as name, version, description over some endpoints say /info and also realtime status or health over some endpoint say /health to create application dashboards, realtime alerts, track microservice updates and so on\u0026hellip;\nActuator Good news is that both endpoints come out of the box with Spring Boot Actuator. To enable this, just add spring-boot-starter-actuator dependency in your spring boot application.\npom.xml \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \nWhen you start your application after adding actuator dependency, You will see following in the startup logs that actuator exposed two endpoints i.e. /actuator/info and /actuator/health\n2020-04-20 18:36:12.881 INFO [main] o.s.b.a.e.web.EndpointLinksResolver: Exposing 2 endpoint(s) beneath base path '/actuator' \n/actuator/info endpoint  (info endpoint with no data)\n  We see that initially /actuator/info endpoint gives an empty JSON. We will now add some properties related to app info.\napplication.yml info: app: name: spring boot microservice version: 1.0.0_RELEASE description: more details about sprint boot microservice contact-support: apisupportgroup@abc.com copyright: copyright (c) abc.com license: MIT tech-used: - name: java version: 11.x - name: spring-boot version: 2.x \nThat\u0026rsquo;s all we need to do to make this data available on the /actuator/info endpoint. Spring will automatically add all the properties prefixed with info to the endpoint.\n (info endpoint with app info)\n  /actuator/info endpoint can be used to -\n create a dashboard of microservices info check for version update of particular microservice and so and so forth\u0026hellip;  \n/actuator/health endpoint By default endpoint show the current status of the running application.\n (health endpoint with status up and running)\n  /actuator/health endpoint can be used to -\n create a dashboard of microservices with realtime status check the heartbeat of microservice and so and so forth\u0026hellip; ","permalink":"https://codingnconcepts.com/spring-boot/configure-info-and-health-endpoints/","tags":["Spring Boot Basics","Spring Boot REST"],"title":"info and health endpoints in spring boot"},{"categories":["Interview Questions"],"contents":"These Microservices based interview questions are based on my personal interview experience and feedback from other interviewees. These questions verifies your theoretical as well as practical knowledge about microservices. Keep following this post for regular updates.\nQ1. What do you understand by microservices? When you break an entire application architecture into smaller services where\n Each service is independently serves a functionality of that application Each service has their own development, build process, deployment and testing cycle  This kind of setup is known as microservices based architecture.\nQ2. What are the advantage of microservices over monolithic application?    Monolithic application Microservices based application     Single code base for entire application so one small code change requires the build process, testing and deployment of entire application. Each microservice can be developed, build, deployed and tested independently and code change in one microservice doesn\u0026rsquo;t affect entire application.   Single code base for entire application so can be written in one technology. Each Microservice can be written in different technology stack like Java, Scala, Python, NodeJs etc.   Monolithic application can be scaled vertically by adding more servers. It can be scaled both vertically and horizontally by adding more servers and running multiple copies of each microservice behind a load balancer.   If something goes wrong with monolithic application and its down means whole application is down. It is fault tolerant and continue to run with limited functionality if something goes wrong in few microservices and they are down.    \nQ3. You have to migrate an existing monolithic application to microservices. What will be your approach? Migrating from monolithic application to microservices is a long term process where we gradually :-\n Pick one functionality of monolithic application Copy the functionality from monolithic application in terms of source code, database, schema Create an independent microservice which serves the same functionality Integrate monolithic application with this microservice Remove the source code, database, schema etc from monolithic application when integration with microservice is successful.  Repeat the above 5 steps until our entire monolithic application is converted into microservices.\nQ4. What are the best practices to design microservices based application ? These are few best practices to design microservice:-\n One functionality one microservice Separate data source for each microservice Follow twelve factors from The Twelve-Factor App  \nQ5. What are the challenges in microservices based application ? The challenges with microservices are as follows:-\n Require good investment for infrastructure setup. It is a nightmare to manage development, build, test, deployment and release cycles manually. DevOps is must to implement CI/CD (Continuous integration, continuous delivery) automation. Difficult to troubleshoot or debug an issue spanning across multiple microservices. Overhead of inter communication between microservices Challenges in development and testing where two or more microservices are involved. Difficult to make configuration change across large fleet of microservices. Operation and maintenance overhead. Challenges comes with distributes system such as Network latency, fault tolerance, distributed transactions, unreliable networks, handling asynchronous operations.  \nQ6. How do you troubleshoot an issue using logs in microservices based application ? For troubleshooting an issue using logs in microservices based application,\n We should have a centralized logging system where each microservice push their logs to Splunk or ELK (Elastic Logstash Kibana) and we can use their built in dashboards to look at the logs for debugging. We can generate a requestId for each external request, which is passed to all the microservices which are involved in handling the request. Include this requestId in all log messages pushed to splunk or ELK. We can troubleshoot any request end to end using this requestId if something goes wrong.   Also read how to create custom logger to print API request and response along with incoming requestId\n \nQ7. How do you manage configuration in microservices based application ? If we want to modify the configuration for a microservice that has been replicated a hundred times (one hundred processes are running). If the configuration for this microservice is packaged with the microservice itself, we’ll have to redeploy each of the one hundred instances. This can result in some instances using the old configuration, and some using the new one, at some point. Moreover, sometimes microservices use external connections which, for example, require URLs, usernames, and passwords. If you want to update these settings, it would be useful to have this configuration shared across services.\nWe use externalize configuration to solve this problem by keeping the configuration information in an external store such as github, database, filesystem, or environment variables or even a configuration server. At startup, microservices load the configuration from the external store or configuration server.\nNetflix Archaius and Spring Cloud Config Server provides ready made solution for externalize configuration.\n\nQ8. How do microservices communicate with each other ? Microservices often communicate with each other using RESTful APIs over HTTP. The communication can be broadly divided into two categories:-\n RestTemplate, WebClient, FeignClient can be used for synchronous communication between microservices ActiveMQ, RabbitMQ, Kafka can be used for asynchronous communication across microservices.  \nQ9. How do you manage authentication and authorization in microservices based application ? Session based authentication works well with stateful monolith applications but token based authentication and authorization is recommended for microservices based application to maintain the statelessness. A typical flow of token based authentication is as follows:-\n User sends a login request with username and password. If you are using Api gateway then it is responsible for generating the token and hence authentication. It achieves this by communicating with authorization and users service. User receives a token on successful login which is typically stored in browser cookies. Token holds the user\u0026rsquo;s information in the encrypted format. When user make any request of resources, this token is sent in Authorization header of each request. Microservices decrypts the token and evaluate user information to authorize for resource access and send the response accordingly.  JWT JWT (Json Web Token) is widely used token based authentication mechanism. JWT consist of three parts:\n header contains type, fixed value JWT and the hashing algorithm used by JWT { \u0026quot;typ\u0026quot;: \u0026quot;JWT\u0026quot;, \u0026quot;alg\u0026quot;: \u0026quot;HS256\u0026quot; }  payload typically contains user authorization related information such as id, name, roles, permissions etc. It also contains the expiry period of token. { \u0026quot;id\u0026quot;: 12345, \u0026quot;name\u0026quot;: \u0026quot;admin_user\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;admin_user@organization.com\u0026quot;, \u0026quot;roles\u0026quot;: [\u0026quot;admin\u0026quot;], \u0026quot;permissions\u0026quot;: [\u0026quot;can_access_resource_1\u0026quot;, \u0026quot;can_access_resource_2\u0026quot;] }  signature is required to verify the authenticity of token. It consists of the encoded header, the payload and the secret key. HMACSHA256( base64UrlEncode(header) + \u0026quot;.\u0026quot; + base64UrlEncode(payload), secret )   All microservices can verify the token based on the signature so there are no further calls to the authorization server after login.\nAuthentication \u0026amp; Authorization flow using JWT  User Authentication \u0026amp; Authorization flow using JWT\n  \nQ10. How do you handle distributed transaction across microservices ? Transactions are easy to handle in monolithic application with single code base, single data source and deployment on single server whereas it becomes a challenge to handle a distributed transaction across microservices where each microservice has its own data store and deployed on different servers. There are different approach to handle distributed transactions:\n1. Avoid if at all possible First and foremost approach is to avoid them completely.\nIf we can not avoid transaction between two microservices. Just think,\nAre they meant to be together? Merge them in one microservice?\nCan we redesign them in such a way so that transaction becomes unnecessary.\n2. Two-phase commit protocol (2PC) Two phase commit protocol commits into 2 steps:\n Prepare Phase The transaction coordinator send a prepare command to each participant in the transaction Each participant then checks if they could commit the transaction. Commit Phase If that’s the case, they respond with “prepared” and the transaction coordinator sends a commit command to all participants. The transaction was successful, and all changes get committed.\nor Rollback Phase If any of the participant doesn’t answer the prepare command or responds with “failed”, the transaction coordinator sends an abort command to all participants. This rolls back all the changes performed within the transaction.  Its an old, complicated and slow approach because of all the coordination things and should be avoided.\n3. The Saga pattern Saga is one of the well known pattern for distributed transactions.\nA saga is a sequence of local transactions where each transaction updates data within a single service. The first transaction is initiated by an external request corresponding to the system operation, and then each subsequent step is triggered by the completion of the previous one.\nThere are a two ways to implement a saga transaction:-\nEvents/Choreography In this approach there is no central coordination, executes a transaction and then publishes an event. This event is listened by one or more services which execute local transactions and publish (or not) new events.\nThe distributed transaction ends when the last service executes its local transaction and does not publish any events or the event published is not heard by any of the saga’s participants.\nLet’s see how it would look like in our e-commerce example:\n Event Saga Pattern (Success Use Case)\n  \n Order Service saves a new order, set the state as pending and publish an event called ORDER_CREATED_EVENT. The Payment Service listens to ORDER_CREATED_EVENT, charge the client and publish the event BILLED_ORDER_EVENT. The Stock Service listens to BILLED_ORDER_EVENT, update the stock, prepare the products bought in the order and publish ORDER_PREPARED_EVENT. Delivery Service listens to ORDER_PREPARED_EVENT and then pick up and deliver the product. At the end, it publishes an ORDER_DELIVERED_EVENT Finally, Order Service listens to ORDER_DELIVERED_EVENT and set the state of the order as concluded.  In the case above, if the state of the order needs to be tracked, Order Service could simply listen to all events and update its state.\nRollback For Rollback, you have to implement another operation/transaction to compensate for what has been done before.\nSuppose that Stock Service has failed during a transaction. Let’s see what the rollback would look like:\n Event Saga Pattern (Failure Use Case)\n  \n Stock Service produces PRODUCT_OUT_OF_STOCK_EVENT; Both Order Service and Payment Service listen to the previous message:  Payment Service refund the client Order Service set the order state as failed    Note that it is crucial to define a common shared ID for each transaction, so whenever you throw an event, all listeners can know right away which transaction it refers to.\nIt is simple, easy to understand, does not require much effort to build.\nCommand/Orchestration when a coordinator service is responsible for centralizing the saga’s decision making and sequencing business logic.\n Please read this post for for more details on Command/Orchestration pattern\n \nQ11. What is service discovery pattern in microservices ? Service discovery is a pattern in microservices which solves the problem of service registry and discovery.\nService Discovery registers entries of all of the services running under that application. Whenever a service is up and running, it registers itself with discovery server and thereafter discovery server polls those services to check their heartbeats if they are up or down.\nWhen one service (client) wants to make a request to another service, it can talk to discovery server to locate the service in two ways:-\n1. Client side service discovery Client asks the address of service from discovery server and then once client gets the address, it requests to the service directly.\nClient ask service_address ⟹ Discovery Server give service_address ⟹ Client make request ⟹ Service return response ⟹ Client\nNetflix Eureka is one of the implementation of client side service discovery pattern. 2. Server side service discovery Client request to discovery server which redirect the request to appropriate service and get the response back and redirect to client.\nClient make request ⟹ Discovery Server redirect request ⟹ Service return response ⟹ Discovery Server redirect response ⟹ Client\n\nQ12. What is circuit breaker pattern in microservices ? Circuit breaker is popular pattern for fault tolerance in microservices.\nProblem Services sometimes call other services to handle requests. There is always a possibility that the other service is unavailable or taking longer time to respond. Precious resources such as threads might be consumed in the caller service while waiting for the other service to respond. This might lead to resource exhaustion, which would make the calling service unable to handle other requests. The failure of one service can potentially cascade to other services throughout the application.\nSolution Thats where circuit breaker comes into play to prevent service failure from cascading to other services.\n Circuit Breaker\n  Consider one service calling another service like an electric circuit breaker. When all works fine circuit breaker is closed.\n  When service detects that something is wrong with another service, the circuit breaks (circuit breaker is open).\n✦ When to break circuit?\n✓ When m out of last n requests failed (When 3 out of last 5 requests failed)\n✓ Request is considered failed if it responds after timeout period of t seconds (say 2s)\n  Once circuit breaks, service do not attempt to call another service.\n✦ What to do when circuit breaks?\n● throw an error or\n● return a fallback \u0026ldquo;default\u0026rdquo; response or\n● save previous responses from cache\n  After waiting for sleep window of x seconds (say 10s), service attempts to call another service (circuit breaker is half open)\n● If request fails then circuit breaks (circuit breaker is open). It repeats step 2 and 3 again.\n● If gets a successful response back then circuit gets closed. Resume the requests again. All works fine.\n  Netflix Hystrix is one of the implementation of circuit breaker pattern.\n\nQ13. What is API gateway pattern in microservices ? API gateway pattern is a good approach to consider when building large or complex microservices based application.\nAPI Gateway Flow  API Gateway\n  API Gateway Features API gateway provides a single entry point to access microservices and facilitate following features:-\n  Reverse proxy or gateway routing The API Gateway offers a reverse proxy to redirect or route HTTP requests to the endpoints of the internal microservices. The gateway provides a single endpoint or URL for the client apps and then internally maps the requests to a group of internal microservices. This routing feature helps to decouple the client apps from the microservices.\n  Request aggregation As part of the gateway pattern you can aggregate multiple client HTTP requests targeting multiple internal microservices into a single client request. This pattern is especially convenient when a client page/screen needs information from several microservices. With this approach, the client app sends a single request to the API Gateway that dispatches several requests to the internal microservices and then aggregates the results and sends everything back to the client app. The main benefit and goal of this design pattern is to reduce chattiness and round-trips between the client apps and the backend API.\n  Cross-cutting concerns or gateway offloading. Depending on the features offered by each API Gateway product, you can offload functionality from individual microservices to the gateway, which simplifies the implementation of each microservice by consolidating cross-cutting concerns into one tier. This is especially convenient for specialized features that can be complex to implement properly in every internal microservice, such as the following functionality:\n Authentication \u0026amp; Authorization Authentication and Authorization is done at API gateway level and services do not need do further check.\nAPI gateway authenticates incoming request by evaluating OAuth token given by OAuth authentication server on successful authentication. This OAuth token can be used in subsequent requests. After successful authentication API gateway authorize the request using access token (eg, send in custom HTTP header). Based on authorization, gateway route the request to services. Logging, debugging API gateway logs each incoming requests and outgoing response to centralized logging system where other microservices also push their logs. API gateway generates a request_id for each incoming request which is passed through all the microservices serving that request. Any request can be traced end to end using this request_id. Response Caching\nAPI gateway can use caching mechanism for some of the request to provide response without routing request to underlying microservices. Load balancing\nAPI gateway can load balance incoming request if multiple instances of same microservice is running. Retry policies, circuit breaker API gateway can provide a fault tolerant system by implementing retry policies and circuit breaker. IP whitelisting\nAdvantage of API gateway is that you need to provide only one IP for whitelisting when distributing APIs to thirdparty if required. Encryption\nAPI gateway can provide encrypted communication to clients while underlying microservices communication remain unencrypted. API gateway decrypts the incoming request, route to microservices, encrypt the response and send to clients. SSL Certificate management\nAPI gateway communication can be secured by providing SSL certificate to clients since API gateway is exposed whereas underlying microservices can communicate without SSL certification under a secure network.    API Gateway - Cross Cutting Concerns  API Gateway - Cross Cutting Concerns\n  Netflix Zuul is one of the implementation of API Gateway pattern.\nBackend for Frontend (BFF) When you have multiple API gateways and each API gateway provide different API tailored for different clients app then this pattern is called Backend for Frontend (BFF) pattern.\n Multiple API Gateways - Backend for Frontend (BFF)\n   \nQ14. Could you explain a high level microservice architecture ?  Microservice High Level Architecture\n  The diagram say it all, Let\u0026rsquo;s see them one by one:\n Client — Client can be a Mobile App, Dynamic Single Page Web Application using Angular, ReactJS, Vue, WebComponents or any traditional clients which renders HTML. CDN (Content Delivery Network) — CDN is a system of distributed servers or networks of servers in locations all over the world. It delivers content from the website or mobile application to people more quickly and efficiently, based on the geographic locations of the user, the origin of the webpage, and the content delivery server. Load Balancer (Hardware/Software) — If there is a high value of incoming traffic and it is affecting system performance and ultimately user experience, application traffic needs to be distributed evenly and efficiently at multiple servers in a server farm. The load balancer sits between client devices and backend servers, receiving and then distributing incoming requests to any available server based on the load balancing algorithm such as Round Robin, Weighted Round Robin, Random, Least Connection, Weighted Least Connection, etc. Web Apps — Clients like Mobile App or SPA can talk to API gateway directly whereas traditional clients can talk to API gateway through load balanced web apps which are hosted on any web server like Apache, Tomcat, Heroku, etc. API Gateway (Zuul) — It’s a server that provides single entry point to talk with microservices. It offers reverse proxy for request routing and request aggregation. It is also responsible for cross cutting concerns such as Authentication \u0026amp; Authorization, logging, Response caching, Encryption, SSL certificate management, rate limiting, spike arrest. Any request coming from clients first go through the API Gateway after that it routes requests to the appropriate microservice. Netflix Zuul provides implementation of API Gateway. Service Discovery (Eureka) — Service Discovery holds the information like IP address, running port about all the microservices under applications. Microservice registers themselves with discovery server when up and running. Netflix Eureka provides implementation of Service Discovery. Management — Management Endpoints (Actuator endpoints) allow you to monitor and interact with your application. Spring Boot actuator includes several built-in endpoints and you can also add your own. Like, the health endpoint provides basic application health information. It’s widely used by containers to check the health and other parameters of the application. Microservices — These microservices are designed around business capabilities, can be deployed independently and loosely coupled. Communication among themselves happens through rest call. Event Bus (Kafka, RabbitMQ) — Event buses are used in microservices based application to avoid messy communication network and keep the communication across microservices clean, loosely coupled, non blocking, asynchronous. Event buses are nothing but a publish/subscribe system like Kafka, RabbitMQ which are used for async tasks like notifications, alerts, background jobs etc to improve performance significantly. Logging and Monitoring (ELK, Splunk) — Microservices based applications requires a centralized logging and monitoring system. One client request could be served by many services all together. In case of any failure, we need to track the request flow end to end across microservice, and this is where logging and monitoring tools helps like ELK (Elastic Search, Logstash and Kibana), Splunk, Grafana.  \nQ15. What is 12 Factor App ? The Twelve-Factor App is a mythology for writing microservices. Following is an easy to understand summary of those 12 factors:-\n1. Codebase One codebase, multiple deploys.\nWe should have only one repository for each microservice in our source control such as git, subversion. All the microservice deployment should be from that repository.\n2. Dependencies Explicitly declare and isolate dependencies.\nWe should use dependency manager in our microservice such as maven (pom.xml) or gradle (build.gradle) for Java. Benefit is new developer can check out code onto their machine, requiring only language runtime and dependency manager as prerequisite.\n3. Config Store config in the environment.\nWe should create a Spring Cloud Config Server to manage configurations of all microservices across all environments like dev, staging, prod.\nWe should not declare configuration inside source code because configuration varies across deployments but code does not.\n4. Backing services Treat backing services as attached resources.\nWe should integrate microservice with resources like datastores, messaging systems, caching system or other microservices from the configuration only. All the resource URL, locator, credentials should come from configuration no matter if it is a thirdparty resource or developed by your organization.\n5. Build, Release \u0026amp; Run Strictly separate build and run stages.\nWe should use release management tools like Jenkins to create pipelines to separate the build (building executable by compiling source code), release (executable with configuration) and run (deployment of release to specific environment) stages.\nRelease should have a unique id such as timestamp or version like v1.0.0 which can not be mutated. Any change must be a new release.\n6. Processes Execute the app as one or more stateless processes.\nMicroservice we build, should be stateless and should not rely on in-memory cache or filesystem to store data since it usually wiped out on restart. Any data that need to be persist must be stored in backing service like database. However distributed cache like memcache, ehcache or Redis can be used.\nWe should also never use and rely on \u0026ldquo;sticky sessions\u0026rdquo;.\n7. Port Binding Export services via port binding.\nWe should always create a standalone microservice using spring boot which is having embedded Tomcat or Jetty webserver. As soon as service starts, it is ready to serve over HTTP by binding to a port. We should not rely on creating a war and then deploying to webserver.\n8. Concurrency Scale out via the process model.\nEach microservice in application should be able to handle more load by scaling out (deploying multiple copies on microservice behind load balancer).\n9. Disposability Maximize robustness with fast startup and graceful shutdown\nWe should try to minimize the startup time of microservice and handle the shutdown gracefully. Microservice should be able to start and stop at moment\u0026rsquo;s notice to facilitate fast elastic scaling, rapid deployment of code or config changes.\n10. Dev/Prod parity Keep development, staging, and production as similar as possible.\nWe should adapt CI/CD (Continuous Integration/Continuos Delivery) by combining DevOps automation tools like Jenkins to build pipelines, Docker to containerize build with all dependencies, Chef and Puppet to automate delivery process. CI/CD process minimize the gap between development, testing, staging and production environments.\n11. Logs Treat logs as event streams\nMicroservice should not manage log files itself, instead treat it as event stream and route it to a centralized log indexing and analysis system such as Splunk or ELK (Elastic logstash Kibana) or data warehousing system such as Hadoop/Hive.\n12. Admin processes Run admin/management tasks as one-off processes\nAll admin/management tasks for a microservice like database migration should be deployed and run separately.\n","permalink":"https://codingnconcepts.com/top-microservices-interview-questions/","tags":["Interview Q\u0026A","Microservice Q\u0026A"],"title":"Top Microservices Interview Questions"},{"categories":["Spring Boot"],"contents":"When you create a Spring @RestController in a Spring Boot application to define API endpoints then it renders JSON response by default if jackson2 is in classpath.\nJSON responses are not pretty print by default but you can enable it with just one property change.\nLet\u0026rsquo;s create a @RestController class.\n@RequestMapping(\u0026#34;/posts\u0026#34;) public class PostController { @GetMapping public List\u0026lt;Post\u0026gt; getAllPosts() { return Arrays.asList(new Post[] { new Post(1, \u0026#34;post title 1\u0026#34;, \u0026#34;post body 1\u0026#34;), new Post(2, \u0026#34;post title 2\u0026#34;, \u0026#34;post body 2\u0026#34;), new Post(3, \u0026#34;post title 3\u0026#34;, \u0026#34;post body 3\u0026#34;)\t}); } } Look at default JSON Response,\nWe see that by default JSON response is not pretty print. Just add following property depending upon you are using .properties or .yml file\napplication.properties spring.jackson.serialization.indent_output = true application.yml spring: jackson: serialization: indent_output: true \nRestart your application after adding property. You will now see pretty print JSON response.\n","permalink":"https://codingnconcepts.com/spring-boot/pretty-print-json-response/","tags":["Spring Boot Basics"],"title":"Pretty print JSON response in spring boot"},{"categories":["Spring Boot","Kafka"],"contents":"This post describes how to configure Kafka producer and consumer in spring boot application and also explains how to create service classes to send and receive Kafka messages to and from configured kafka topic respectively.\nSetup Spring Boot Project First of all, if you are using maven to build your spring boot project then add org.springframework.kafka dependency in pom.xml as highlighted below:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.1.3.RELEASE\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;!-- lookup parent from repository --\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;groupId\u0026gt;com.abc\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springboot-kafka\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;springboot-kafka\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;Kafka configuration for Spring Boot\u0026lt;/description\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;1.8\u0026lt;/java.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.kafka\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-kafka\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.kafka\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-kafka-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \t\u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; Note: If you build your spring boot project using gradle then please add kafka dependency similarly.\nKafka Producer and Consumer Configuration Next, add the Kafka producer and consumer yml configuration in application.yml.\nThings to note here,\n app.topic.cosumer You can give the comma separated kafka topic names if you want consumer service to consume from multiple kafka topics app.topic.producer You can give only one kafka topic name where you want producer service to publish messages spring.kafka.properties.ssl If you want to configure secure SSL communication between consumer/producer and kafka server then configure key-store and trust-store otherwise remove this config. spring.kafka.properties.ssl.endpoint.identification.algorithm Provide an empty string to this property if you have enabled SSL for kafka, otherwise spring boot startup throw error. spring.kafka.properties.producer Kafka producer config spring.kafka.properties.consumer Kafka consumer config  Here assumption is Kafka is running as a cluster of 3 server - localhost:9200, localhost:9300, localhost:9400\n#APP SPECIFIC CUSTOM PROPERTIES app: topic: producer: \u0026lt;PRODUCER_TOPIC_NAME\u0026gt; consumer: \u0026lt;CONSUMER_TOPIC_NAME_1, CONSUMER_TOPIC_NAME_2, CONSUMER_TOPIC_NAME_3\u0026gt; #LOGGING PROPERTIES logging: level: root: DEBUG #SPRING PROPETIES spring: kafka: properties: #Server host name verification is disabled by setting ssl.endpoint.identification.algorithm to an empty string ssl.endpoint.identification.algorithm: ssl: protocol: SSL trust-store-location: \u0026lt;/app/store/truststore.jks\u0026gt;, trust-store-password: \u0026lt;TURST_STORE_PASSWORD\u0026gt; key-store-location: \u0026lt;/app/store/keystore.jks\u0026gt; key-store-password: \u0026lt;KEY_STORE_PASSWORD\u0026gt; key-password: \u0026lt;KEY_PASSWORD\u0026gt; producer: bootstrap-servers: \u0026lt;localhost:9200,localhost:9300,localhost:9400\u0026gt; retries: 0 acks: all key-serializer: org.apache.kafka.common.serialization.StringSerializer value-serializer: org.apache.kafka.common.serialization.StringSerializer consumer: bootstrap-servers: \u0026lt;localhost:9200,localhost:9300,localhost:9400\u0026gt; group-id: \u0026lt;KAFKA_CONSUMER_GROUP_ID\u0026gt; auto-offset-reset: earliest key-deserializer: org.apache.kafka.common.serialization.StringDeserializer value-deserializer: org.apache.kafka.common.serialization.StringDeserializer \nSpring Boot Kafka Producer If you want to create a producer service to send messages to a Kafka topic then you need to create two Classes,\nCreate KafkaProducerConfig Class First, create a KafkaProducerConfig class which uses producer configuration defined in application.yml and define a KafkaTemplate bean which creates an instance of Kafka producer. We will use this instance in our producer service class.\npackage com.abc.demo.config; import java.util.HashMap; import java.util.Map; import org.apache.kafka.common.config.SslConfigs; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.kafka.core.DefaultKafkaProducerFactory; import org.springframework.kafka.core.KafkaTemplate; import org.springframework.kafka.core.ProducerFactory; @Configuration public class KafkaProducerConfig { @Autowired private ProducerFactory\u0026lt;Integer, String\u0026gt; producerFactory; public Map\u0026lt;String, Object\u0026gt; producerConfig(){ Map\u0026lt;String, Object\u0026gt; kafkaAutoConfig = ((DefaultKafkaProducerFactory\u0026lt;Integer, String\u0026gt;) producerFactory).getConfigurationProperties(); Map\u0026lt;String, Object\u0026gt; producerConfig = new HashMap\u0026lt;\u0026gt;(); producerConfig.putAll(kafkaAutoConfig); producerConfig.compute(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, (k,v) -\u0026gt; (String)v); producerConfig.compute(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, (k,v) -\u0026gt; (String)v); producerConfig.compute(SslConfigs.SSL_KEY_PASSWORD_CONFIG, (k,v) -\u0026gt; (String)v); return producerConfig; } @Bean public KafkaTemplate\u0026lt;String, String\u0026gt; kafkaTemplate(){ return new KafkaTemplate\u0026lt;\u0026gt;(new DefaultKafkaProducerFactory\u0026lt;\u0026gt;(producerConfig())); } } \nCreate KafkaProducerService Class Second, create a KafkaProducerService class and its implementation class KafkaProducerServiceImpl. We are using producer instance created by KafkaTemplate to send kafka message to given kafka topic.\nPlease read more about KafkaTemplate which comes with overloaded send method to send messages with key, partition and routing information.\npackage com.abc.demo.service; public interface KafkaProducerService { public void send(String topic, String data); } package com.abc.demo.service; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.kafka.core.KafkaTemplate; import org.springframework.stereotype.Service; @Service public class KafkaProducerServiceImpl implements KafkaProducerService { @Autowired private KafkaTemplate\u0026lt;String, String\u0026gt; kafkaTemplate; @Override public void send(String topic, String data) { kafkaTemplate.send(topic, data); } } \nSpring Boot Kafka Consumer If you want to create a consumer service to receive messages from a single Kafka topic or multiple Kafka topics then you need to create two Classes,\nCreate KafkaConsumerConfig Class First, create a KafkaConsumerConfig class which uses consumer configuration defined in application.yml and define a ConcurrentKafkaListenerContainerFactory bean which is responsible to create listener for given Kafka bootstrap server. We have also used @EnableKafka annotation at class level which tells spring boot to detect @KafkaListener annotation applied to any method in spring boot application. We will use this annotation in our consumer service class.\npackage com.abc.demo.config; import java.util.HashMap; import java.util.Map; import org.apache.kafka.common.config.SslConfigs; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.kafka.annotation.EnableKafka; import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory; import org.springframework.kafka.core.ConsumerFactory; import org.springframework.kafka.core.DefaultKafkaConsumerFactory; @EnableKafka @Configuration public class KafkaConsumerConfig { @Autowired private ConsumerFactory\u0026lt;Integer, String\u0026gt; consumerFactory; public Map\u0026lt;String, Object\u0026gt; consumerConfig(){ Map\u0026lt;String, Object\u0026gt; kafkaAutoConfig = ((DefaultKafkaConsumerFactory\u0026lt;Integer, String\u0026gt;) consumerFactory).getConfigurationProperties(); Map\u0026lt;String, Object\u0026gt; consumerConfig = new HashMap\u0026lt;\u0026gt;(); consumerConfig.putAll(kafkaAutoConfig); consumerConfig.compute(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, (k,v) -\u0026gt; (String)v); consumerConfig.compute(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, (k,v) -\u0026gt; String)v); consumerConfig.compute(SslConfigs.SSL_KEY_PASSWORD_CONFIG, (k,v) -\u0026gt; (String)v); return consumerConfig; } @Bean public ConcurrentKafkaListenerContainerFactory\u0026lt;String, String\u0026gt; kafkaListenerContainerFactory(){ ConcurrentKafkaListenerContainerFactory\u0026lt;String, String\u0026gt; factory = new ConcurrentKafkaListenerContainerFactory\u0026lt;\u0026gt;(); factory.setConsumerFactory(new DefaultKafkaConsumerFactory\u0026lt;\u0026gt;(consumerConfig())); return factory; } } \nCreate KafkaConsumerService Class Second, create a KafkaConsumerService class and its implementation class KafkaConsumerServiceImpl. We have used @KafkaListener annotation at method passing kafka consumer topic names, which will be detected by spring boot application automatically. You will be able to consumer messages from kafka topic using this method.\npackage com.abc.demo.service; public interface KafkaConsumerService { public void receive(String data); } package com.abc.demo.service; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.kafka.annotation.KafkaListener; import org.springframework.messaging.handler.annotation.Payload; import org.springframework.stereotype.Service; @Service public class KafkaConsumerServiceImpl implements KafkaConsumerService{ private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerServiceImpl.class); @KafkaListener(topics = {\u0026#34;#{\u0026#39;${spring.kafka.consumer.topic}\u0026#39;.split(\u0026#39;,\u0026#39;)}\u0026#34;}) public void receive(@Payload String data) { logger.info(\u0026#34;data: {}\u0026#34;, data); } } \nSummary Spring boot provides a wrapper over kafka producer and consumer implementation in Java which helps us to easily configure-\n Kafka Producer using KafkaTemplate which provides overloaded send method to send messages in multiple ways with keys, partitions and routing information. Kafka Consumer using @EnableKafka annotation which auto detects @KafkaListener annotation applied to any method and that methods becomes a Kafka Listener.  You can download complete source code from github\n","permalink":"https://codingnconcepts.com/spring-boot/configure-kafka-producer-and-consumer/","tags":["Spring Boot Kafka"],"title":"Configure Kafka Producer and Consumer in spring boot"},{"categories":["Javascript"],"contents":"Async functions and Await keyword are latest additions in JavaScript as part of ECMAScript 2017 release which introduced a new way of writing asynchronous functions. In this post we will talk about why we should use async/wait, its syntax and practical usage with example.\nWhy Async/Await? In earlier days, you would have used callbacks to handle asynchronous operations. However, callbacks have limited functionality and often leads to unmanageable code if you are handling multiple async calls, it leads to heavily nested callback code which is also known as callback hell.\nLater, Promises were introduced in ES6 to overcome the problems of callback functions and improved code readability. Finally Async/Await introduced in ES2017, which are nothing but the syntactic improved version of promises. Its underlying is Promise with improved syntax which provides,\n better way to chain promises and pass values between chained promises more concise and readable code compare to promises debugging is easy better error handling   Also read this post for more details on promises in javascript\n Syntax async When async keyword is applied before a function, it turns into asynchronous function and always return a promise object.\n1async function hello() { 2 //return Promise.resolve(\u0026#34;Hello\u0026#34;); 3 return \u0026#34;Hello\u0026#34;; 4} 5 6console.log(hello()); 7hello().then(data =\u0026gt; console.log(data)); Output Promise {\u0026lt;resolved\u0026gt;: \u0026quot;Hello\u0026quot;} Hello We see in above code snippet that when we execute async function hello(), it wraps the string value in promise object and return a resolved promise. We can also explicitly return the resolved promise object, line 2 and line 3 are same.\nWe further used then on resolved promise object to get Hello string (line 7)\nawait // works only inside async functions let value = await promise; await keyword works only inside async function and it makes the function execution wait until the returned promise settles (either resolve or reject).\n1async function hello() { 2 let promise = new Promise((resolve, reject) =\u0026gt; { 3 setTimeout(() =\u0026gt; resolve(\u0026#34;Hello\u0026#34;), 5000) 4 }); 5 6 let value = await promise; // wait until the promise resolves 7 8 return value; 9} 10 11hello().then(data =\u0026gt; console.log(data)); Please note that in above code snippet when we execute async function hello(), function execution literally waits for 5s at line 6 before returning resolved promise object. CPU resources are not utilized in this wait period and can be used for other work.\nAlso note that if you use await keyword inside non-async function, it returns SyntaxError like below:\nfunction hello() { let promise = Promise.resolve(\u0026quot;Hello\u0026quot;); let value = await promise; ⓧ Uncaught SyntaxError: await is only valid in async function return value; } Usage Let\u0026rsquo;s see one of the practical example of getting data from multiple HTTP endpoints using fetch API.\n1. Create three promise objects We have created a common function getData and used this to create three parameterized promise objects getUser, getPosts and getComments to fetch data from their respective HTTP endpoint.\n//create a common getData function let getData = (url) =\u0026gt; new Promise(function (resolve, reject ){ fetch(url) .then(response =\u0026gt; { return response.json(); }) .then(data =\u0026gt; { resolve(data); }) .catch(error =\u0026gt; { reject(error); }); }); //create multiple promises from common getData function let getUsers = getData(\u0026#39;https://jsonplaceholder.typicode.com/users\u0026#39;); let getPosts = (userId) =\u0026gt; getData(`https://jsonplaceholder.typicode.com/posts?userId=${userId}`); let getComments = (postId) =\u0026gt; getData(`https://jsonplaceholder.typicode.com/comments?postId=${postId}`); \n2. Promise Chaining Our goal is to fetch all comments on first post of first user.\nWe are first fetching all users from getUsers promise and chaining it with getPost promise by passing firstUser. Further chaining it with getComments promise by passing firstPost.\n//promise chaining of multiple asynchronous calls getUsers.then(users =\u0026gt; { let firstUser = users[0]; return getPosts(firstUser.id); }).then(posts =\u0026gt; { let firstPost = posts[0]; return getComments(firstPost.id); }).then(comments =\u0026gt; { console.log(comments); }).catch(error =\u0026gt; console.error(error)); Output ▼ (5) [{…}, {…}, {…}, {…}, {…}] ➤ 0: {postId: 1, id: 1, name: \u0026quot;id labore ex et quam laborum\u0026quot;, email: \u0026quot;Eliseo@gardner.biz\u0026quot;, body: \u0026quot;laudantium enim quasi est quidem magnam voluptate …utem quasi↵reiciendis et nam sapiente accusantium\u0026quot;} ➤ 1: {postId: 1, id: 2, name: \u0026quot;quo vero reiciendis velit similique earum\u0026quot;, email: \u0026quot;Jayne_Kuhic@sydney.com\u0026quot;, body: \u0026quot;est natus enim nihil est dolore omnis voluptatem n…iatur↵nihil sint nostrum voluptatem reiciendis et\u0026quot;} ➤ 2: {postId: 1, id: 3, name: \u0026quot;odio adipisci rerum aut animi\u0026quot;, email: \u0026quot;Nikita@garfield.biz\u0026quot;, body: \u0026quot;quia molestiae reprehenderit quasi aspernatur↵aut …mus et vero voluptates excepturi deleniti ratione\u0026quot;} ➤ 3: {postId: 1, id: 4, name: \u0026quot;alias odio sit\u0026quot;, email: \u0026quot;Lew@alysha.tv\u0026quot;, body: \u0026quot;non et atque↵occaecati deserunt quas accusantium u…r itaque dolor↵et qui rerum deleniti ut occaecati\u0026quot;} ➤ 4: {postId: 1, id: 5, name: \u0026quot;vero eaque aliquid doloribus et culpa\u0026quot;, email: \u0026quot;Hayden@althea.biz\u0026quot;, body: \u0026quot;harum non quasi et ratione↵tempore iure ex volupta…ugit inventore cupiditate↵voluptates magni quo et\u0026quot;} length: 5 ➤ __proto__: Array(0) \n3. async/await Let\u0026rsquo;s achieve the same goal of fetching comments using async/await,\n//async and await makes code cleaner and readable async function getCommentsOfFirstPostByFirstUser(){ let users = await getUsers; let firstUser = users[0]; let posts = await getPosts(firstUser.id); let firstPost = posts[0]; let comments = await getComments(firstPost.id); return comments; } getCommentsOfFirstPostByFirstUser().then(comments =\u0026gt; console.log(comments)); Output ▼ (5) [{…}, {…}, {…}, {…}, {…}] ➤ 0: {postId: 1, id: 1, name: \u0026quot;id labore ex et quam laborum\u0026quot;, email: \u0026quot;Eliseo@gardner.biz\u0026quot;, body: \u0026quot;laudantium enim quasi est quidem magnam voluptate …utem quasi↵reiciendis et nam sapiente accusantium\u0026quot;} ➤ 1: {postId: 1, id: 2, name: \u0026quot;quo vero reiciendis velit similique earum\u0026quot;, email: \u0026quot;Jayne_Kuhic@sydney.com\u0026quot;, body: \u0026quot;est natus enim nihil est dolore omnis voluptatem n…iatur↵nihil sint nostrum voluptatem reiciendis et\u0026quot;} ➤ 2: {postId: 1, id: 3, name: \u0026quot;odio adipisci rerum aut animi\u0026quot;, email: \u0026quot;Nikita@garfield.biz\u0026quot;, body: \u0026quot;quia molestiae reprehenderit quasi aspernatur↵aut …mus et vero voluptates excepturi deleniti ratione\u0026quot;} ➤ 3: {postId: 1, id: 4, name: \u0026quot;alias odio sit\u0026quot;, email: \u0026quot;Lew@alysha.tv\u0026quot;, body: \u0026quot;non et atque↵occaecati deserunt quas accusantium u…r itaque dolor↵et qui rerum deleniti ut occaecati\u0026quot;} ➤ 4: {postId: 1, id: 5, name: \u0026quot;vero eaque aliquid doloribus et culpa\u0026quot;, email: \u0026quot;Hayden@althea.biz\u0026quot;, body: \u0026quot;harum non quasi et ratione↵tempore iure ex volupta…ugit inventore cupiditate↵voluptates magni quo et\u0026quot;} length: 5 ➤ __proto__: Array(0) Summary We see that async/await are much easier to use as compare to promises.\n","permalink":"https://codingnconcepts.com/javascript/async-await-in-javascript/","tags":["Javascript Interview","Javascript ES6"],"title":"Async/Await in JavaScript"},{"categories":["Javascript"],"contents":"Promises are introduced natively in ES6. They are very similar to our promises. As we keep or break our promises, Javascript promises are also either resolve or reject. In this post we will talk about why we should use promises, promise syntax, promise states and its practical usage with examples using fetch API.\nWhy Promises? In earlier days, you would have used callbacks to handle asynchronous operations. However, callbacks have limited functionality and often leads to unmanageable code if you are handling multiple async calls, it leads to heavily nested callback code which is also known as callback hell.\nPromises were introduced to improve code readability and better handling of async calls and errors.\nPromise Syntax Let\u0026rsquo;s look at the syntax of simple promise object.\nlet promise = new Promise(function (resolve, reject) { // asynchronous call }); Promise takes a callback function as an argument and that callback function takes two arguments — the first is a resolve function, and the second one is a reject function. A promise can either be fulfilled with a value or rejected with a reason (error).\nPromise States A promise object has one of three states:\n pending: is the initial state. fulfilled: is success state. resolve() method is called. rejected: is failed state, reject() is called.   Usage We generally use async calls using fetch API to get data from the HTTP endpoints. Let\u0026rsquo;s look at the example, how promises can be used in such case.\n//create a promise object let getUsers = new Promise(function (resolve, reject ){ fetch(\u0026#39;https://jsonplaceholder.typicode.com/users\u0026#39;) .then(response =\u0026gt; { return response.json(); }) .then(data =\u0026gt; { resolve(data); }) .catch(error =\u0026gt; { reject(error); }); }); //call promise object getUsers .then((data) =\u0026gt; { console.log(data); }) .catch(error =\u0026gt; { console.log(error); }); Chained Promises Promise chaining comes into play when you have to use output of one async call as input of another async call. You can chain multiple promises in this case.\nLet’s look at the below example where we first fetch users list using getUser async call then chain it with getPosts by passing userId.\n//create a common getData function let getData = (url) =\u0026gt; new Promise(function (resolve, reject ){ fetch(url) .then(response =\u0026gt; { return response.json(); }) .then(data =\u0026gt; { resolve(data); }) .catch(error =\u0026gt; { reject(error); }); }); let getUsers = getData(\u0026#39;https://jsonplaceholder.typicode.com/users\u0026#39;); let getPosts = (userId) =\u0026gt; getData(`https://jsonplaceholder.typicode.com/posts?userId=${userId}`); //chained promises to fetch all posts by first user (userId = 1) getUsers.then((data) =\u0026gt; { const user = data[0]; return getPosts(user.id); }) .then((data) =\u0026gt; { console.log(data); }) .catch(error =\u0026gt; { console.log(error); }); Output ▼ (10) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}] ➤ 0: {userId: 1, id: 1, title: \u0026quot;sunt aut facere repellat provident occaecati excepturi optio reprehenderit\u0026quot;, body: \u0026quot;quia et suscipit↵suscipit recusandae consequuntur …strum rerum est autem sunt rem eveniet architecto\u0026quot;} ➤ 1: {userId: 1, id: 2, title: \u0026quot;qui est esse\u0026quot;, body: \u0026quot;est rerum tempore vitae↵sequi sint nihil reprehend…aperiam non debitis possimus qui neque nisi nulla\u0026quot;} ➤ 2: {userId: 1, id: 3, title: \u0026quot;ea molestias quasi exercitationem repellat qui ipsa sit aut\u0026quot;, body: \u0026quot;et iusto sed quo iure↵voluptatem occaecati omnis e…↵molestiae porro eius odio et labore et velit aut\u0026quot;} ➤ 3: {userId: 1, id: 4, title: \u0026quot;eum et est occaecati\u0026quot;, body: \u0026quot;ullam et saepe reiciendis voluptatem adipisci↵sit … ipsam iure↵quis sunt voluptatem rerum illo velit\u0026quot;} ➤ 4: {userId: 1, id: 5, title: \u0026quot;nesciunt quas odio\u0026quot;, body: \u0026quot;repudiandae veniam quaerat sunt sed↵alias aut fugi…sse voluptatibus quis↵est aut tenetur dolor neque\u0026quot;} ➤ 5: {userId: 1, id: 6, title: \u0026quot;dolorem eum magni eos aperiam quia\u0026quot;, body: \u0026quot;ut aspernatur corporis harum nihil quis provident …s↵voluptate dolores velit et doloremque molestiae\u0026quot;} ➤ 6: {userId: 1, id: 7, title: \u0026quot;magnam facilis autem\u0026quot;, body: \u0026quot;dolore placeat quibusdam ea quo vitae↵magni quis e…t excepturi ut quia↵sunt ut sequi eos ea sed quas\u0026quot;} ➤ 7: {userId: 1, id: 8, title: \u0026quot;dolorem dolore est ipsam\u0026quot;, body: \u0026quot;dignissimos aperiam dolorem qui eum↵facilis quibus…↵ipsam ut commodi dolor voluptatum modi aut vitae\u0026quot;} ➤ 8: {userId: 1, id: 9, title: \u0026quot;nesciunt iure omnis dolorem tempora et accusantium\u0026quot;, body: \u0026quot;consectetur animi nesciunt iure dolore↵enim quia a…st aut quod aut provident voluptas autem voluptas\u0026quot;} ➤ 9: {userId: 1, id: 10, title: \u0026quot;optio molestias id quia eum\u0026quot;, body: \u0026quot;quo et expedita modi cum officia vel magni↵dolorib…it↵quos veniam quod sed accusamus veritatis error\u0026quot;} length: 10 ➤ __proto__: Array(0) Promise.all() Promise.all() is useful when you want to execute multiple async calls and wait for all of them to finish and get collective output.\nPromise.all() takes an array of promises and return an array of the results in the same sequence of promises. It throws an exception if any one of the async call fails.\nLet’s look at the below example, where we fetch the result of three async calls getUsers, getPosts and getComments all together.\n//create a common getData function let getData = (url) =\u0026gt; new Promise(function (resolve, reject ){ fetch(url) .then(response =\u0026gt; { return response.json(); }) .then(data =\u0026gt; { resolve(data); }) .catch(error =\u0026gt; { reject(error); }); }); //create multiple promises from common getData function let getUsers = getData(\u0026#39;https://jsonplaceholder.typicode.com/users\u0026#39;); let getPosts = getData(\u0026#39;https://jsonplaceholder.typicode.com/posts\u0026#39;); let getComments = getData(\u0026#39;https://jsonplaceholder.typicode.com/comments\u0026#39;); //fetch data to get users, posts and comments collectively Promise.all([getUsers, getPosts, getComments]).then(result =\u0026gt; { console.log(result); }); Output ▼ (3) [Array(10), Array(100), Array(500)] ➤ 0: (10) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}] ➤ 1: (100) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}] ➤ 2: (500) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …] length: 3 ➤ __proto__: Array(0) Promise.allSettled() Promise.allSettled() is similar to Promise.all() to execute multiple async calls. The only difference between these two,\n Promise.all() is either all resolve or any reject, means if any async call fails, it returns an error. Promise.allSettled() is all settle, means it doesn\u0026rsquo;t return error if any async call fails. It gives the collective output of all successful and failed async calls.  Let\u0026rsquo;s look at the below example, where getPostsFails aync call returns 404 error since url endpoint doesn\u0026rsquo;t exist but you still able to fetch data for getUsers and getComments async calls.\n//create a common getData function let getData = (url) =\u0026gt; new Promise(function (resolve, reject ){ fetch(url) .then(response =\u0026gt; { if(response.ok){ return response.json(); }else{ throw `Error ${response.status}`; } }) .then(data =\u0026gt; { resolve(data); }) .catch(error =\u0026gt; { reject(error); }); }); //create multiple promises from common getData function let getUsers = getData(\u0026#39;https://jsonplaceholder.typicode.com/users\u0026#39;); let getPostsFails = getData(\u0026#39;https://jsonplaceholder.typicode.com/postsfailes\u0026#39;); let getComments = getData(\u0026#39;https://jsonplaceholder.typicode.com/comments\u0026#39;); //fetch data to get users, posts and comments collectively regardless of any error Promise.allSettled([getUsers, getPostsFails, getComments]).then(result =\u0026gt; { console.log(result); }); Output ▼ (3) [{…}, {…}, {…}] ➤ 0: {status: \u0026quot;fulfilled\u0026quot;, value: Array(10)} ➤ 1: {status: \u0026#34;rejected\u0026#34;, reason: \u0026#34;Error 404\u0026#34;} ➤ 2: {status: \u0026quot;fulfilled\u0026quot;, value: Array(500)} length: 3 ➤ __proto__: Array(0) Promise.race() Promise.race() is useful when you are interested in fetching data from any one of the async call out of multiple async calls, whichever resolve first.\nLook at the below example where we are interested in any data out of getTodos, getUsers and getComments, whichever resolves first. In our case getUsers resolved first and returned user list.\nPlease note that if you execute the same code snippet again and again, result might differ based on network connectivity and which one resolve first.\n//create a common getData function let getData = (url) =\u0026gt; new Promise(function (resolve, reject ){ fetch(url) .then(response =\u0026gt; { return response.json(); }) .then(data =\u0026gt; { resolve(data); }) .catch(error =\u0026gt; { reject(error); }); }); //create multiple promises from common getData function let getTodos = getData(\u0026#39;https://jsonplaceholder.typicode.com/todos\u0026#39;); let getUsers = getData(\u0026#39;https://jsonplaceholder.typicode.com/users\u0026#39;); let getComments = getData(\u0026#39;https://jsonplaceholder.typicode.com/comments\u0026#39;); //fetch either todos or users or comments whichever resolves first Promise.race([getTodos, getUsers, getComments]).then(result =\u0026gt; { console.log(result); }); Output ▼ (10) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}] ➤ 0: {id: 1, name: \u0026quot;Leanne Graham\u0026quot;, username: \u0026quot;Bret\u0026quot;, email: \u0026quot;Sincere@april.biz\u0026quot;, address: {…}, …} ➤ 1: {id: 2, name: \u0026quot;Ervin Howell\u0026quot;, username: \u0026quot;Antonette\u0026quot;, email: \u0026quot;Shanna@melissa.tv\u0026quot;, address: {…}, …} ➤ 2: {id: 3, name: \u0026quot;Clementine Bauch\u0026quot;, username: \u0026quot;Samantha\u0026quot;, email: \u0026quot;Nathan@yesenia.net\u0026quot;, address: {…}, …} ➤ 3: {id: 4, name: \u0026quot;Patricia Lebsack\u0026quot;, username: \u0026quot;Karianne\u0026quot;, email: \u0026quot;Julianne.OConner@kory.org\u0026quot;, address: {…}, …} ➤ 4: {id: 5, name: \u0026quot;Chelsey Dietrich\u0026quot;, username: \u0026quot;Kamren\u0026quot;, email: \u0026quot;Lucio_Hettinger@annie.ca\u0026quot;, address: {…}, …} ➤ 5: {id: 6, name: \u0026quot;Mrs. Dennis Schulist\u0026quot;, username: \u0026quot;Leopoldo_Corkery\u0026quot;, email: \u0026quot;Karley_Dach@jasper.info\u0026quot;, address: {…}, …} ➤ 6: {id: 7, name: \u0026quot;Kurtis Weissnat\u0026quot;, username: \u0026quot;Elwyn.Skiles\u0026quot;, email: \u0026quot;Telly.Hoeger@billy.biz\u0026quot;, address: {…}, …} ➤ 7: {id: 8, name: \u0026quot;Nicholas Runolfsdottir V\u0026quot;, username: \u0026quot;Maxime_Nienow\u0026quot;, email: \u0026quot;Sherwood@rosamond.me\u0026quot;, address: {…}, …} ➤ 8: {id: 9, name: \u0026quot;Glenna Reichert\u0026quot;, username: \u0026quot;Delphine\u0026quot;, email: \u0026quot;Chaim_McDermott@dana.io\u0026quot;, address: {…}, …} ➤ 9: {id: 10, name: \u0026quot;Clementina DuBuque\u0026quot;, username: \u0026quot;Moriah.Stanton\u0026quot;, email: \u0026quot;Rey.Padberg@karina.biz\u0026quot;, address: {…}, …} length: 10 ➤ __proto__: Array(0) Summary It is always better to use Promises over callback functions as Promises has a lot to offer in terms of,\n Resolve a successful anyc call response using Promise.resolve(response) Reject async call response based on status or data using Promise.reject(response) Better error handling using Promise.catch(onRejection) Chaining of multiple async calls using Promise.then(onFulfillment, onRejection) Get collective result of multiple async calls using Promise.all([promise1, promise2, ...]) Get collective result of multiple async calls regardless of any error using Promise.allSettled([promise1, promise2, ...]) Get any one result whichever resolves first out of many async calls using Promise.race([promise1, promise2, ...]) ","permalink":"https://codingnconcepts.com/javascript/promises-in-javascript/","tags":["Javascript Interview","Javascript ES6"],"title":"Promises in JavaScript"},{"categories":["Interview Questions","Javascript"],"contents":"This post is a collection of tricky interview questions based on different concepts in JavaScript. The difficulty level of question will increase as you read forward down the line in this post.\nQ1. Number operators. Guess the output? console.log( 2 + \u0026#34;2\u0026#34; ); console.log( \u0026#34;2\u0026#34; + \u0026#34;2\u0026#34; ); console.log( 2 - \u0026#34;2\u0026#34; ); console.log( \u0026#34;2\u0026#34; - \u0026#34;2\u0026#34; ); console.log( \u0026#34;A\u0026#34; - \u0026#34;A\u0026#34; ); Think for a while before looking at the output.\nOutput 22 22 0 0 NaN Here is the explanation,\nJavascript + operator behaves as,\n number operator when both operands are number concat operator if any one or both of the operands are string.  Javascript - operator always behaves as number operator. if any one or both of the operands are string, Javascript attempts to convert it to a number, if not able to convert then return NaN.\n\nQ2. Relational Operators. Guess the output ? console.log( 10 \u0026lt; 20 \u0026lt; 30 ); console.log( 30 \u0026gt; 20 \u0026gt; 10 ); Have you guessed true in both the cases ? No, its not correct.\nOutput true false The output is true and false. Here is the explanation,\nIn Javascript relational operators are evaluated from left to right, false equals 0, and true equals 1 for number comparisons.\nSo comparison evaluation is something like this,\n10 \u0026lt; 20 \u0026lt; 30 =\u0026gt; true \u0026lt; 30 =\u0026gt; 1 \u0026lt; 30 =\u0026gt; true 30 \u0026gt; 20 \u0026gt; 10 =\u0026gt; true \u0026gt; 10 =\u0026gt; 1 \u0026gt; 10 =\u0026gt; false  \nQ3. Comparison Operators. Guess the output ? console.log( null == 0 ); console.log( null \u0026gt; 0 ); console.log( null \u0026gt;= 0 ); You might have guessed false in all the three cases but its not correct.\nOutput false false true In Javascript, equality check == and comparisons \u0026gt; \u0026lt; \u0026gt;= \u0026lt;= behaves differently.\nFor equality comparison,\n null and undefined are comparable. 0, false and \u0026quot;\u0026quot; (empty string) are comparable. null and 0 are not comparable so null == 0 returns false.  For number comparison,\n if one operand is number, it attempts to convert other operand to number. null becomes 0 and undefined becomes NaN for number comparison so null \u0026gt; 0 returns false whereas null \u0026gt;= 0 returns true.  \nQ4. forEach loop. Guess the output? const elements = [1, 2, 3, 4, 5]; elements.forEach(element =\u0026gt; { console.log(element); if(element == 2){ return; //break;  //continue;  } }) Have you guessed it will print 1 and 2 ? Let\u0026rsquo;s look at the output,\nOutput 1 2 3 4 5 Yes, its confusing in Javascript. The reason is that we are passing a callback function in forEach loop which will be executed for each element no matter if we return.\nIf you use break or continue instead of return, you get either one of the error since these are not applicable for a callback function:\nUncaught SyntaxError: Illegal break statement Uncaught SyntaxError: Illegal continue statement From Official MDN docs:\nThere is no way to stop or break a forEach loop other than throwing an exception. If you need such behavior, the forEach method is the wrong tool. Early termination may be accomplished with:\n A simple for loop A for...of / for...in loops  \nQ5. Variable hoisting. Guess the output? var foo = 1; function myFun(){ console.log(foo); var foo = 2; } myFun(); Have you guessed foo = 1 or foo = 2?\nIt\u0026rsquo;s neither one of them. It will print undefined. Here is the explanation,\nHoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.\nLet’s see how it is interpreted by the compiler in hoisting process,\nvar foo; foo = 1; function myFun(){ var foo; // var hoisted and initialized with undefined console.log(foo); // undefined foo = 2; } myFun(); \nQ6. Closure. Guess the output? for (var i = 0; i \u0026lt; 3; i++) { setTimeout(function() { console.log(i); }, i*1000); } Have you guessed it will print 0, 1, 2 after every 1 second ? Let\u0026rsquo;s look at the output,\nOutput 3 3 3 Actually it will print 3, 3, 3 after every 1 second. This is because of JavaScript Closure. Here is the explanation,\nclosure A JavaScript closure is when an inner function has access to its outer function\u0026rsquo;s scope. In the following line of code:\nsetTimeout(function() { console.log(i); }, i*1000);  variable i is used in an inner function whereas it is actually declared in outer for loop. Inner function will be able to access the value of i through Closure.\nhoisting In Javascript hoisting process, declaration of i will be moved to the top of their scope, since i is defined using var in for loop, declaration of i will be moved to global scope in hoisting process.\nAfter three iteration of for loop, value of global scoped variable i will be 3. All three closures will refer to this same i variable from global scope.\nlet if i were defined using let instead of var in for loop, output would have been different. Why?\nlet is block scoped as opposed to var which is function scoped. Since for loop is also a block, value of i in each iteration is block scoped within that iteration and each closure has its own copy of i variable. Let\u0026rsquo;s look at the code,\nfor (let i = 0; i \u0026lt; 3; i++) { setTimeout(function() { console.log(i); }, i*1000); } Output 0 1 2 \nQ7. this keyword. Guess the output? var a = new Person(\u0026#34;a\u0026#34;); var b = Person var c = Person(\u0026#34;c\u0026#34;); function Person(fname) { this.fname = fname; } console.log(\u0026#34;1.\u0026#34;, fname); console.log(\u0026#34;2.\u0026#34;, a.fname); console.log(\u0026#34;3.\u0026#34;, b.fname); console.log(\u0026#34;4.\u0026#34;, c.fname); Think for a while before looking at the output.\nOutput 1. c 2. a 3. undefined Uncaught TypeError: Cannot read property 'fname' of undefined Here is the explanation,\n fname will print c. When you execute Person(\u0026quot;c\u0026quot;) function, this refers to global object window and this.fname is assigned value as c. a.fname will print a. When you execute function using new keyword new Person(\u0026quot;a\u0026quot;), this refers to newly created object. b.fname will print undefined since you are just assigning a function object and not executing it. Person object is not having property named as fname function Person(\u0026quot;c\u0026quot;) doesn\u0026rsquo;t return anything so c is undefined and c.fname will throw error   Also read this post to understand all about this keyword with examples ","permalink":"https://codingnconcepts.com/tricky-javascript-interview-questions/","tags":["Interview Q\u0026A","JavaScript Q\u0026A"],"title":"Tricky Javascript Interview Questions"},{"categories":["Javascript"],"contents":"This is frequently asked question in JavaScript interview. We can compare primitive types, array and object using two comparison operators == and === available in JavaScript. This post describes the difference between these two with many examples.\n\u0026ldquo;==\u0026rdquo; operator  == is also known as abstract comparison operator which compares only content of operand and not type. == attempts to convert the operands to compatible type before comparison. String and number with same content are equal. == converts the string to number before comparison. 0, false and empty string \u0026quot;\u0026quot; are comparable and equal. null and undefined are comparable and equal. Two arrays with exactly same elements are not equal because both refers to different object in memory. Similarly two objects with exactly same properties are not equals because both refers to different object in memory.  \u0026ldquo;===\u0026rdquo; operator  === is also known as strict comparison operator which compares both content and its type. === does not attempt to convert the operand to compatible types before comparison and compare directly. It has better performance compare to == Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions. Two numbers are strictly equal when they are numerically equal (have the same number value). NaN is not equal to anything, including NaN. Confusing in JavaScript. Positive zero (+0) and negative zero (-0) are strictly equal. Confusing in JavaScript since content is different. Two boolean values are strictly equal only if both either true or false. Two objects are strictly equal only if they refer to the same Object. null only strictly equals to null undefined only strictly equals to undefined  Compare \u0026ldquo;==\u0026rdquo; and \u0026ldquo;===\u0026rdquo; console.log(\u0026#34;cnc\u0026#34; == \u0026#34;cnc\u0026#34;); // true, same content and type console.log(\u0026#34;cnc\u0026#34; === \u0026#34;cnc\u0026#34;); // true, same content and type  console.log(12345 == 12345); // true, same content and type console.log(12345 === 12345); // true, same content and type  console.log(false == false); // true, same content and type console.log(false === false); // true, same content and type  console.log(12345 == \u0026#34;12345\u0026#34;); // true, comparable and equal console.log(12345 === \u0026#34;12345\u0026#34;); // false, different type  console.log(0 == false); // true, comparable and equal console.log(0 === false); // false, different type  console.log(\u0026#34;\u0026#34; == false); // true, comparable and equal console.log(\u0026#34;\u0026#34; === false); // false, different type  console.log(null == undefined); // true, comparable and equal console.log(null === undefined); // false, different type  console.log([] == []); // false, both refers to different object in memory console.log([] === []); // false, both refers to different object in memory  console.log([1, 2] == [1, 2]); // false, both refers to different object in memory console.log([1, 2] === [1, 2]); // false, both refers to different object in memory  console.log({} == {}); // false, both refers to different object in memory console.log({} === {}); // false, both refers to different object in memory  var array1 = [1, 2, 3, 4, 5]; var array2 = array1; console.log(array1 == array2); // true, both refers to same array console.log(array1 === array2); // true, both refers to same array  var obj1 = { app : \u0026#34;cnc\u0026#34;}; var obj2 = obj1; console.log(obj1 == obj2); // true, both refers to same object console.log(obj1 === obj2); // true, both refers to same object  console.log(+0 == -0); // true, confusing, content is different console.log(+0 === -0); // true, confusing, content is different  console.log(NaN == NaN); // false, confusing, content and type is same console.log(NaN === NaN); // false, confusing, content and type is same The last two comparisons are very confusing in Javascript, Remember always\n NaN is not equal to NaN +0 is equal to -0  Also remember, === is recommended to use for comparison where ever possible as it is faster then == in terms of performance.\nObject.is() ES6 has introduced a new method Object.is() to compare two values, let\u0026rsquo;s check it out\nconsole.log(Object.is(\u0026#34;cnc\u0026#34;, \u0026#34;cnc\u0026#34;)); // true, same content and type console.log(Object.is(12345, 12345)); // true, same content and type console.log(Object.is(false, false)); // true, same content and type  console.log(Object.is(12345, \u0026#34;12345\u0026#34;)); // false, different type console.log(Object.is(0, false)); // false, different type console.log(Object.is(\u0026#34;\u0026#34;, false)); // false, different type console.log(Object.is(null, undefined)); // false, different type  console.log(Object.is([], [])); // false, both refers to different object in memory console.log(Object.is([1, 2], [1, 2])); // false, both refers to different object in memory console.log(Object.is({}, {})); // false, both refers to different object in memory  var array1 = [1, 2, 3, 4, 5]; var array2 = array1; console.log(Object.is(array1, array2)); // true, both refers to same array  var obj1 = { app : \u0026#34;cnc\u0026#34;}; var obj2 = obj1; console.log(Object.is(obj1, obj2)); // true, both refers to same object  console.log(Object.is(+0, -0)); // false, es6 is good, different content console.log(Object.is(NaN, NaN)); // true, es6 is good, same content and type You see that Object.is() makes the NaN and +0/-0 comparison less confusing.\nSummary Where == compares only content, === compares both content and type of operands. Strict comparison operator === does not attempt to convert the operands to compatible types and provide better performance as compare to abstract comparison operator ==.\nLast, Object.is() introduced in ES6 works very much similar to strict operator === and also avoid confusion of NaN comparisons and +0/-0 comparisons. It is recommended to use Object.is().\n","permalink":"https://codingnconcepts.com/javascript/comparison-operators-in-javascript/","tags":["Javascript Interview","Javascript Core"],"title":"Difference in == and === comparison operators in JavaScript"},{"categories":["Javascript"],"contents":"The this keyword in JavaScript is very important concept but at the same time very confusing to understand.\nIn JavaScript, this keyword refers to the object it belongs to. It has different values depending on where it is used:\n In a method, this refers to the owner object where method is defined. Alone, this refers to the global object. In a function, this refers to the global object. In a function, in strict mode, this is undefined. When a function called with new keyword, this refers to new object instance In a DOM event, this refers to the element that received the event. Function prototype methods call(), apply() and bind() can be used to refer this to any object.  this in a Method  When you execute a method of an object, this refers to the object where method is defined.\nIn the below example this refers to the person object since fullName() method is defined inside person object.\nvar person = { firstName: \u0026#34;John\u0026#34;, lastName : \u0026#34;Doe\u0026#34;, fullName : function() { return this.firstName + \u0026#34; \u0026#34; + this.lastName; } }; console.log(person.fullName()); // John Doe Let\u0026rsquo;s see one more example below where obj1 and obj2 are executing their own increment() methods so here this refers to obj1 and obj2 respectively\nvar increment = function(){ return console.log(this.a + 1); } var obj1 = { a: 1, increment: increment }; var obj2 = { a: 2, increment: increment }; obj1.increment(); //this = obj1 obj2.increment(); //this = obj2 Output 2 3 this Alone  When you use this alone, it refers to global object\nLet\u0026rsquo;s try what is the value of this when used alone:\nconsole.log(this); //this = window Output Window {parent: Window, opener: null, top: Window, length: 4, frames: Window, …} We see that this refers to Window object, which is global object of browser.\nRemember: In strict mode, when used alone, this also refers to the global object.\nthis in a Function (default)  For a function (which is at top level or not inside any function), this refers to global object.\nfunction topLevelFunction(){ console.log(this); } topLevelFunction(); //this = window In the above case this refers to the global object window of browser\nthis in a Function (strict)  However, for a function (which is at top level or not inside any function) in strict mode, this refers to undefined\nLook at the below example where this refers to undefined in strict mode function:\n\u0026#39;use strict\u0026#39;; function topLevelFunction(){ console.log(this); } topLevelFunction(); //this = undefined one more example, where increment() function is called in strict mode, this refers to undefined and throw error.\nvar a = 1; var increment = function(){ \u0026#39;use strict\u0026#39;; return console.log(this.a + 1); } increment(); //this = undefined Output Uncaught TypeError: Cannot read property 'a' of undefined this with new  When a function is called using new keyword, then the function is known as a constructor function and returns a new object. In this case, this refers to a newly created object.\nvar Person = function(firstName, lastName){ this.firstName = firstName; this.lastName = lastName; this.getFullName = function(){ console.log(`${this.firstName}${this.lastName}`); } } let person1 = new Person(\u0026#34;Albert\u0026#34;, \u0026#34;Einstein\u0026#34;); let person2 = new Person(\u0026#34;Isaac\u0026#34;, \u0026#34;Newton\u0026#34;); person1.getFullName(); //this = person1 person2.getFullName(); //this = person2 Output Albert Einstein Isaac Newton this with Explicit binding  Function has call(), apply() and bind() prototype methods which can be called on function to change the context of this explictly.\nLet\u0026rsquo;s look at these methods one by one and also see the differences\ncall() ƒ.call(this, arg1, arg2, ...)  When a function is called using call() method,\n first argument is referred by this subsequent comma separated arguments are method arguments   Remember: “call() arguments are separated by commas”.\n apply() ƒ.apply(this, [arg1, arg2, ...])  When a function is called using apply() method,\n first argument is referred by this second argument is an array of values, are method arguments   Remember: “apply() accepts arguments as an Array”\n bind() ƒ.bind(this)  When a function is called using bind() method\n argument passed to bind() function is referred by this returns new bind function whose context is passed argument   Remember: “bind() method doesn\u0026rsquo;t call the function. It returns a new function which can be called later.\n Let\u0026rsquo;s look at the example, how to use these three function prototype methods call(), apply() and bind()\nlet numObj1 = {num: 1}; let numObj2 = {num: 2}; let sumFn = function(...args){ console.log(this.num + args.reduce((a,b)=\u0026gt; a+b, 0)); } sumFn.call(numObj1, 1, 2, 3, 4); //this = numObj1 sumFn.call(numObj2, 1, 2, 3, 4); //this = numObj2  sumFn.apply(numObj1, [1,2,3,4]); //this = numObj1 sumFn.apply(numObj2, [1,2,3,4]); //this = numObj2  let sumBindFn1 = sumFn.bind(numObj1); // return Fn let sumBindFn2 = sumFn.bind(numObj2); // return Fn sumBindFn1(1, 2, 3, 4); //this = numObj1 sumBindFn2(1, 2, 3, 4); //this = numObj2 output: 11 12 11 12 11 12 ","permalink":"https://codingnconcepts.com/javascript/this-keyword-in-javascript/","tags":["Javascript Interview","Javascript Core"],"title":"Understand all about this keyword in JavaScript"},{"categories":["Javascript"],"contents":"Let\u0026rsquo;s first look at example of each:\n// ES5 Function Constructor function Person(name) { this.name = name; } // ES6 Class class Person { constructor(name) { this.name = name; } } For simple constructors, they look pretty similar.\nThe main difference in the constructor comes when using inheritance. If we want to create a Student class that subclasses Person and add a studentId field, this is what we have to do in addition to the above.\n// ES5 Function Constructor function Student(name, studentId) { // Call constructor of superclass to initialize superclass-derived members.  Person.call(this, name); // Initialize subclass\u0026#39;s own members.  this.studentId = studentId; } Student.prototype = Object.create(Person.prototype); Student.prototype.constructor = Student; // ES6 Class class Student extends Person { constructor(name, studentId) { super(name); this.studentId = studentId; } } It\u0026rsquo;s much more verbose to use inheritance in ES5 and the ES6 version is easier to understand and remember.\n","permalink":"https://codingnconcepts.com/javascript/classes-in-javascript/","tags":["Javascript Interview","Javascript ES6"],"title":"Classes in JavaScript"},{"categories":["Javascript"],"contents":"This is frequently asked question in JavaScript interview. This post describes the Function prototype methods call(), apply() and bind() with their syntax, usage and practical examples.\nWhat is Function.prototype?  First of all we need to understand that all these three functions call, apply and bind are prototype of Function. What does that mean?\nLet\u0026rsquo;s print Function\u0026rsquo;s structure to understand it.\nconsole.dir(Function); ▼ ƒ Function() arguments: (...) caller: (...) length: 1 name: \u0026quot;Function\u0026quot; ▼ prototype: ƒ () arguments: (...) caller: (...) length: 0 name: \u0026quot;\u0026quot; ➤ constructor: ƒ Function() ➤ apply: ƒ apply() ➤ bind: ƒ bind() ➤ call: ƒ call() ➤ toString: ƒ toString() ➤ Symbol(Symbol.hasInstance): ƒ [Symbol.hasInstance]() ➤ get arguments: ƒ () ➤ set arguments: ƒ () ➤ get caller: ƒ () ➤ set caller: ƒ () You can see apply, bind and call are prototype functions of Function, that means you can use these three functions on any new function you define.\nWhen to use call(), bind() and apply()  When you define a new function and call it from somewhere in your code, it is executed in a context. This context is called this and it refers to an object. This object can vary depending upon how you called a function.\nvar a = 1; var increment = function(){ return console.log(this.a + 1); } var obj1 = { a: 2, increment: increment }; var obj2 = { a: 3, increment: increment }; increment(); //this = window obj1.increment(); //this = obj1 obj2.increment(); //this = obj2 Output 2 3 4 We can see in above code snippet that we called same increment() function in three different context which changes the this reference and resulting into three different output.\nHere,\n first increment() function is called in global context where this binds to global object. window is the global object if you are working in browser. next two increment() functions are called in implicit context where this binds to the object on which function is called. This is called implicit context because function is tightly coupled with object (defined inside object) and this reference binds to object at compile time when you call a function from object like obj.ƒn()  Sometime we may want to call a function in explicit context where we can control on this reference at runtime when calling a function. This is where call(), apply() and bind() comes into play. Let\u0026rsquo;s call the same increment() function using call(), apply() and bind() methods.\nvar increment = function(){ return console.log(this.a + 1); } var obj1 = { a: 4 }; var obj2 = { a: 5 }; increment.call(obj1); //this = obj1 increment.call(obj2); //this = obj2  increment.apply(obj1); //this = obj1 increment.apply(obj2); //this = obj2  var bindFn1 = increment.bind(obj1); var bindFn2 = increment.bind(obj2); bindFn1(); //this = obj1 bindFn2(); //this = obj2 Output 5 6 5 6 5 6 Few points to note from above code snippet:-\n All these three call(), apply() and bind() are prototype of Function so you are able to use them on any function increment.call(), increment.apply() and increment.bind(). All these three call(), apply() and bind() providing different object context (obj1, obj2) at runtime and resulting into different output. Where call() and apply() execute a function immediately, bind() returns a bound function which can be executed later.  Now that we have understood the basic usage of these prototype functions, let\u0026rsquo;s look at their syntax and practical usage with example.\ncall()  Syntax functionName.call(thisArg, arg1, arg2, ...)  When a function is called using call(),\n this refers to thisArg Comma separated arguments arg1, arg2 ... are the arguments of function   Remember: “call() arguments are separated by commas”.\n Practical Usage 1. Borrow functionality of other objects In Javascript, every object can have prototype functions which are actually meant to be executed only on that object. Using call() methods, you can borrow the functionality of these objects and execute it on different object.\nLet\u0026rsquo;s look at the Array prototype functions\nconsole.dir(Array); ▼ ƒ Array() arguments: (...) caller: (...) length: 1 name: \u0026quot;Array\u0026quot; ▼ prototype: ƒ () length: 0 ➤ constructor: ƒ Array() ➤ concat: ƒ concat() ➤ copyWithin: ƒ copyWithin() ➤ fill: ƒ fill() ➤ find: ƒ find() ➤ findIndex: ƒ findIndex() ➤ lastIndexOf: ƒ lastIndexOf() ➤ pop: ƒ pop() ➤ push: ƒ push() ➤ reverse: ƒ reverse() ➤ shift: ƒ shift() ➤ unshift: ƒ unshift() ➤ slice: ƒ slice() ➤ sort: ƒ sort() ➤ splice: ƒ splice() ➤ includes: ƒ includes() ➤ indexOf: ƒ indexOf() ➤ join: ƒ join() ➤ keys: ƒ keys() ➤ entries: ƒ entries() ➤ values: ƒ values() ➤ forEach: ƒ forEach() ➤ filter: ƒ filter() ➤ flat: ƒ flat() ➤ flatMap: ƒ flatMap() ➤ map: ƒ map() ➤ every: ƒ every() ➤ some: ƒ some() ➤ reduce: ƒ reduce() ➤ reduceRight: ƒ reduceRight() ➤ toLocaleString: ƒ toLocaleString() ➤ toString: ƒ toString() Let\u0026rsquo;s borrow the functionality of Array prototype methods using call() function:-\nArray.prototype.concat.call([1,2,3], [4,5]); Array.prototype.join.call([1,2,3,4,5], \u0026#34;:\u0026#34;) Output [1, 2, 3, 4, 5] 1:2:3:4:5 Similarly borrow the start functionality of car object to use it for aircraft\nvar car = { name: \u0026#39;car\u0026#39;, start: function() { console.log(\u0026#39;Start the \u0026#39; + this.name); }, speedup: function() { console.log(\u0026#39;Speed up the \u0026#39; + this.name) }, stop: function() { console.log(\u0026#39;Stop the \u0026#39; + this.name); } }; var aircraft = { name: \u0026#39;aircraft\u0026#39;, fly: function(){ console.log(\u0026#39;Fly\u0026#39;); } }; car.start.call(aircraft); Output Start the aircraft 2. Chaining constructors function Box(height, width) { this.height = height; this.width = width; } function Widget(height, width, color) { Box.call(this, height, width); this.color = color; } function Dialog(height, width, color, title) { Widget.call(this, height, width, color); this.title = title; } var dialog = new Dialog(\u0026#39;red\u0026#39;, 100, 200, \u0026#39;Title\u0026#39;); We can see in above code snippet how we can chain the constructors by calling parent constructor function in current this context\napply()  Syntax functionName.apply(thisArg, [arg1, arg2, ...])  When a function is called using apply() method,\n this refers to thisArg second argument is an array of values [arg1, arg2, ...], are the arguments of function   Remember: “apply() accepts arguments as an Array”\n Practical Usage Practical usage of apply() function is same as call() function. The only difference between them, apply() accepts args as an array whereas call() accepts args as comma separated values.\nWe can pass arguments as an array using apply() function to call any function which accepts args as comma separated values.\nMath.min(1, 2, 3, 4, 5); //args as comma separated Math.min.apply([1, 2, 3, 4, 5]); //args as an array bind()  Syntax functionName.bind(thisArg)  When a function is called using bind() method,\n this refers to thisArg returns new bound function which can be called later   Remember: “bind() doesn\u0026rsquo;t call the function immediately. It returns a new bound function which can be called later.\n Practical Usage 1. Bounded context var Button = function(content) { this.content = content; }; Button.prototype.click = function() { console.log(this.content + \u0026#39; clicked\u0026#39;); }; var myButton = new Button(\u0026#39;OK\u0026#39;); myButton.click(); var looseClick = myButton.click; looseClick(); // not bound, \u0026#39;this\u0026#39; is not myButton - it is the global object  var boundClick = myButton.click.bind(myButton); boundClick(); // bound, \u0026#39;this\u0026#39; is myButton Output OK clicked undefined clicked OK clicked 2. Binding functions with parameters var logProp = function(prop) { console.log(this[prop]); }; var Obj = { x : 5, y : 10 }; Obj.log = logProp.bind(Obj); Obj.logX = logProp.bind(Obj, \u0026#39;x\u0026#39;); //binding with prop x Obj.logY = logProp.bind(Obj, \u0026#39;y\u0026#39;); //binding with prop y  Obj.log(\u0026#39;x\u0026#39;); Obj.logX(); Obj.log(\u0026#39;y\u0026#39;); Obj.logY(); Output 5 5 10 10 Another example,\nvar sum = function(a, b) { return a + b; }; var add5 = sum.bind(null, 5); //add5 is binding function with a = 5 console.log(add5(10)); //b =10 Output 15 Call vs Bind vs Apply  Comparison between function objects, function calls, call, apply and bind:\n    time of function execution time of this binding     function object ƒ future future   function call ƒ() now now   ƒ.call() now now   ƒ.apply() now now   ƒ.bind() future now    Let\u0026rsquo;s look at last example of this post and use call(), apply() and bind() methods all together\nlet numObj1 = {num: 1}; let numObj2 = {num: 2}; let sumFn = function(...args){ console.log(this.num + args.reduce((a,b)=\u0026gt; a+b, 0)); } sumFn.call(numObj1, 1, 2, 3, 4); //this = numObj1 sumFn.call(numObj2, 1, 2, 3, 4); //this = numObj2  sumFn.apply(numObj1, [1,2,3,4]); //this = numObj1 sumFn.apply(numObj2, [1,2,3,4]); //this = numObj2  let sumBindFn1 = sumFn.bind(numObj1); // return Fn let sumBindFn2 = sumFn.bind(numObj2); // return Fn sumBindFn1(1, 2, 3, 4); //this = numObj1 sumBindFn2(1, 2, 3, 4); //this = numObj2 output: 11 12 11 12 11 12 ","permalink":"https://codingnconcepts.com/javascript/call-vs-bind-vs-apply/","tags":["Javascript Interview","Javascript Core"],"title":"Understand call, bind and apply methods in JavaScript"},{"categories":["Javascript"],"contents":"This post describes the Lexical Scope, Closures and Currying Function in JavaScript and their relations with examples.\nLexical Scope  Variables defined using var keywords are having function scope which means new scope is created everytime you create a new function.\nLexical scope is associated with function scope. Lexical scope of variables is defined by their position in source code. JavaScript resolves the variable starting at the innermost scope and searches outwards until it finds the variable it was looking for.\nvar me = \u0026#34;global\u0026#34;; function whoami(){ var me = \u0026#34;local\u0026#34;; function func() { return me; } return func; } console.log(me); // global console.log(whoami()()); // local The value of the variable me outside is global whereas if you execute function whoami() from outside, value is local\nClosures  Closure is very important concept and frequently asked in JavaScript interviews.\n A closure is an inner function having access to its outer function scope and all above scopes even when that function is executing outside of its outer function.\n When you define an inner function inside outer function, Closure is created at runtime for inner function bundled with outer function\u0026rsquo;s scope.\nLet\u0026rsquo;s look at the example to understand Closures\nvar outerFunc = function(c){ var a = 1; var innerFunc = function(d) { var b = 2; var innerMostFunc = function(e) { return a + b + c + d + e; } return innerMostFunc; } return innerFunc; } console.dir(outerFunc(3)); //1. innerFunc console.dir(outerFunc(3)(4)); //2. innerMostFunc console.log(outerFunc(3)(4)(5)); //3. 15 Output ▼ ƒ innerFunc(c) length: 1 name: \u0026quot;innerFunc\u0026quot; arguments: null caller: null ➤ prototype: {constructor: ƒ} ➤ __proto__: ƒ () [[FunctionLocation]]: ▼ [[Scopes]]: Scopes[2] ➤ 0: Closure (outerFunc) {c: 3, a: 1} ➤ 1: Global {parent: Window, opener: null, top: Window, length: 1, frames: Window, …} ▼ ƒ innerMostFunc(c) length: 1 name: \u0026quot;innerMostFunc\u0026quot; arguments: null caller: null ➤ prototype: {constructor: ƒ} ➤ __proto__: ƒ () [[FunctionLocation]]: ▼ [[Scopes]]: Scopes[3] ➤ 0: Closure (innerFunc) {d: 4, b: 2} ➤ 1: Closure (outerFunc) {c: 3, a: 1} ➤ 2: Global {parent: Window, opener: null, top: Window, length: 1, frames: Window, …} 15 We have three console dir/log. Let\u0026rsquo;s discuss them one by one:\n  innerFunc has a closure of variables defined or passed as argument in outerFunc\n 0: Closure (outerFunc) {c: 3, a: 1}    innerMostFunc has a closure of variables defined or passed as argument in in outerFunc and innerFunc i.e.\n 0: Closure (innerFunc) {d: 4, b: 2} 1: Closure (outerFunc) {c: 3, a: 1}    innerMostFunc returns a+b+c+d+e=15 where\n value of a and c is coming from Closure (outerFunc) value of b and d is coming from Closure (innerFunc) value of e is coming from passed argument    They way we called outerFunc(3)(4)(5) is also known as currying\nCurrying  One of the use case of Closure is currying functions.\n A currying function is a function where you break down a function that takes multiple argument one at a time instead of taking all argument at once.\n f(a, b, c) =\u0026gt; Currying =\u0026gt; f(a)(b)(c) Let\u0026rsquo;s convert this function\nvar add = function(a, b, c){ return a + b + c; } add(1, 2, 3); //6 to currying function\nvar add = function(a){ return function(b){ return function(c){ return a + b + c; } } } add(1)(2)(3); //6 One more example:-\nvar sayWhat = function(a){ return function(b){ return function(c){ console.log(`say ${a}to ${b}using ${c}`); } } } sayWhat(\u0026#34;hello\u0026#34;)(\u0026#34;friends\u0026#34;)(\u0026#34;currying function\u0026#34;); Output say hello to friends using currying function In currying function, each nested function is keeping track of arguments passed in outer function in their closure,\n","permalink":"https://codingnconcepts.com/javascript/lexical-scope-closures-and-currying/","tags":["Javascript Interview","Javascript Core"],"title":"Lexical Scope, Closures and Currying in JavaScript"},{"categories":["Java"],"contents":"This is one of the example of using recursive function in Java to find M power N\npublic class MPowerN { public static int pow(int m, int n){ return (n\u0026gt;1) ? m*pow(m, n-1) : m; } } @Test public void test() { assertEquals(pow(2,3), 8); } ","permalink":"https://codingnconcepts.com/java/m-power-n-using-recursive/","tags":["Java Recursive"],"title":"M power N Using Recursive function"},{"categories":["Java"],"contents":"Print all the possible combinations of a given String using Recursive function in Java\npublic class PrintAllCombinationOfString { public static void main(String[] args){ String s = \u0026#34;abc\u0026#34;; for(int i=0; i \u0026lt; s.length(); i++){ substring(s, \u0026#34;\u0026#34;, i); } } public static void substring(String content, String part, int index){ if(index \u0026gt;= content.length()){ return; } String sub = part + content.charAt(index); System.out.println(sub); //print combinations  substring(content, sub, index + 1); //a index=0 //ab index=1 //abc index=2 \t} public static String swap(String a){ char[] charArray = new char[a.length()]; for(int i=0, j=a.length()-1; i \u0026lt;a.length() \u0026amp;\u0026amp; j\u0026gt;=0; i++,j--){ charArray[i] = a.charAt(j); } return new String(charArray); } } Output a ab abc b bc c ","permalink":"https://codingnconcepts.com/java/print-all-string-combinations-using-recursive/","tags":["Java Recursive"],"title":"Print All String Combinations Using Recursive function"},{"categories":["Java"],"contents":"One of the major feature of Java 8 is addition of Stream. It also has introduced the functional programming in Java. We will discuss different stream operations available in Collection, Array, IntStream with examples. We will also discuss the difference between Intermediate and Terminal operations.\nCollection Stream  Stream Operations There are mainly three types of stream operations -\n1. Stream Operation Stream operation converts any collection to a stream\nstream()\n2. Intermediate Operation Intermediate operation converts a stream to another stream as a result. They can be chained together to form a pipeline of Stream operations.\nfilter(), map(), sorted(), distinct(), limit(), skip()\n3. Terminal Operation Terminal operation converts a stream to a collection as a result. They can not be chained together. Any Stream operation pipeline must end with terminal operation.\ncollect(), reduce(), min(), max(), count(), anyMatch(), allMatch(), noneMatch(), findFirst(), findAny()\nIntermediate vs Terminal Operations 1. Output: Output of intermediate operation is another stream whereas output of terminal operation is a collection, array or primitive.\n2. Chaining: Stream operation pipeline can have as many as intermediate operators chained together but pipeline must end with terminal operator.\n3. Lazy Evaluation: Intermediate operations are evaluated lazily whereas terminal operations are eager. The intermediate operations just remain as a pipeline, and executed only when the terminal operation is executed\n4. Pipeline: Stream operations pipeline can have many intermediate operations but only one terminal operation.\nExamples We will look at various stream operations pipelines. Let\u0026rsquo;s define a fruits List collection first\nList\u0026lt;String\u0026gt; fruits = Arrays.asList(\u0026#34;mango\u0026#34;, \u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;grapes\u0026#34;, \u0026#34;orange\u0026#34;); We now execute various examples of streams operations pipeline\n Stream Operation | Intermediate Operation | \u0026hellip; | \u0026hellip; | Intermediate Operation | Terminal Operation\n \n1. stream() | filter() | collect() Filter out grapes from list of fruits\nList\u0026lt;String\u0026gt; result = fruits.stream() // convert list to stream  .filter(fruit -\u0026gt; !\u0026#34;grapes\u0026#34;.equals(fruit)) // filter out grapes  .collect(Collectors.toList()); // collect the output and convert streams to a List  result.forEach(System.out::println); Output mango apple banana orange \n2. stream() | map() | collect() Map all fruits to uppercase\nList\u0026lt;String\u0026gt; result = fruits.stream() // convert list to stream  .map(fruit -\u0026gt; fruit.toUpperCase()) // map to uppercase  .collect(Collectors.toList()); // collect the output and convert streams to a List  result.forEach(System.out::println); Output MANGO APPLE BANANA GRAPES ORANGE \n3. stream() | sorted() | collect() Sort all fruits in alphabetical order\nList\u0026lt;String\u0026gt; result = fruits.stream() // convert list to stream  .sorted() // sort in alphabetical order  .collect(Collectors.toList()); // collect the output and convert streams to a List  result.forEach(System.out::println); Output apple banana grapes mango orange \n4. stream() | filter() | map() | sorted() | collect() Operations all together on fruits. Filter out grapes, Map all to uppercase, Sort all alphabetically\nList\u0026lt;String\u0026gt; result = fruits.stream() // convert list to stream  .filter(fruit -\u0026gt; !\u0026#34;grapes\u0026#34;.equals(fruit)) // filter out grapes  .map(fruit -\u0026gt; fruit.toUpperCase()) // map to uppercase  .sorted() // sort in alphabetical order  .collect(Collectors.toList()); // collect the output and convert streams to a List  result.forEach(System.out::println); Output APPLE BANANA MANGO ORANGE \n5. stream() | filter() | findAny() | orElse() Filter mango from fruits, Return mango if found or else return null\nString fruit = fruits.stream() // convert list to stream  .filter(fruit -\u0026gt; \u0026#34;mango\u0026#34;.equals(fruit)) // we love mango  .findAny() // If `findAny` then return found  .orElse(null); // If not found, return null  System.out.println(fruit); Output mango Array Stream  Get the sum, count, min, max and distinct elements of given array\nint[] intArray = new int[]{1, 3, 5, 7, 9, 3, 5, 99}; int sum = Arrays.stream(intArray) .sum(); long count = Arrays.stream(intArray) .count(); int min = Arrays.stream(intArray) .min() .getAsInt(); int max = Arrays.stream(intArray) .max() .getAsInt(); System.out.println(\u0026#34;sum: \u0026#34; + sum); System.out.println(\u0026#34;count: \u0026#34; + count); System.out.println(\u0026#34;min: \u0026#34; + min); System.out.println(\u0026#34;max: \u0026#34; + max); System.out.println(\u0026#34;distinct:\u0026#34;); Arrays.stream(intArray) .distinct() .forEach(System.out::println); Output sum: 132 count: 8 min: 1 max: 99 distinct: 1 3 5 7 9 99 IntStream  forEach() Print number 1 to 10\nIntStream.range(1, 6) .forEach(System.out::println); Output 1 2 3 4 5 \nreduce() Sum all the elements from 1 to 100\nint sum = IntStream.range(1, 101) .reduce((a, s) -\u0026gt; s += a) .getAsInt(); System.out.println(\u0026#34;sum: \u0026#34; + sum); Output sum: 5050 ","permalink":"https://codingnconcepts.com/java/streams-in-java-8/","tags":["Java Streams"],"title":"Streams in Java 8"},{"categories":["Java"],"contents":"Decorator design pattern is used to add a new feature on the existing object by wrapping it with a decorator class.\nIn this example, we will first create an interface Window interface and its implementation BasicWindow\ninterface Window { public String draw(); } class BasicWindow implements Window { @Override public String draw() { return \u0026#34;Basic Window\u0026#34;; } } Next, we want to decorate this Window with some border and scroll bar. We need a wrapper class for this which can wrap Window to add new features. For this, we create a class WindowDecorator which takes Window as constructor argument and also override draw() method to add new feature.\nclass WindowDecorator implements Window { protected Window window; public WindowDecorator(Window window) { this.window = window; } @Override public String draw() { return window.draw(); } } We\u0026rsquo;ll now implement our wrapper class WindowDecorator and create two decorator classes BorderDecorator and ScrollDecorator. These decorators override draw() method to add new features like border and scroll bar.\nclass BorderDecorator extends WindowDecorator { public BorderDecorator(Window window) { super(window); } @Override public String draw() { return window.draw() + addBorder(); } public String addBorder() { return \u0026#34; with Border\u0026#34;; } } class ScrollDecorator extends WindowDecorator { public ScrollDecorator(Window window) { super(window); } @Override public String draw() { return window.draw() + addScroll(); } public String addScroll() { return \u0026#34; and Scroll Bar\u0026#34;; } } Let\u0026rsquo;s test our decorator classes\n@Test public void testDecorators() { Window basicWindow = new BasicWindow(); assertEquals(basicWindow.draw(), \u0026#34;Basic Window\u0026#34;); Window borderWindow = new BorderDecorator(basicWindow); assertEquals(borderWindow.draw(), \u0026#34;Basic Window with Border\u0026#34;); Window borderWindowScrollable = new ScrollDecorator(borderWindow); assertEquals(borderWindowScrollable.draw(), \u0026#34;Basic Window with Border and Scroll Bar\u0026#34;); } Few points from test:\n We have created a basicWindow object and decorated it using BorderDecorator Next we further decorated it using ScrollDecorator We can add as many as decorators at runtime to add new features to object. ","permalink":"https://codingnconcepts.com/java/decorator-design-pattern-using-java/","tags":["Java Design Pattern"],"title":"Decorator Design Pattern Using Java"},{"categories":["Javascript"],"contents":"This post describes the best practices to define constants and configuration values in JavaScript using const and Object.freeze() and the difference between them.\nWhen we define constants and configuration values in our JavaScript applications. They should have following characteristics:-\n Accessible across application Value of the variable should be immutable Reference of variable should be immutable  Now we will try to implement these characteristics\u0026hellip;\nUse let Let\u0026rsquo;s define the variable using let and see,\nlet APP_NAME = \u0026#34;Coding N Concepts\u0026#34;; function getApplicationName() { APP_NAME = \u0026#34;Unkown App\u0026#34;; return APP_NAME; } getApplicationName(); // Unkown App In the above example, function getApplicationName() has changed the value of APP_NAME. How do we prevent changing value of a global variable?\nUse const We can use const to define a constant variable instead of let to prevent it from changing value.\nconst APP_NAME = \u0026#34;Coding N Concepts\u0026#34;; function getApplicationName() { APP_NAME = \u0026#34;Unkown App\u0026#34;; // This will throw TypeError  return APP_NAME; } Trying to change value of a variable defined using const resulting into this error:\n“TypeError: Assignment to constant variable.” So this is it? Let\u0026rsquo;s find out\nconst fruits = [\u0026#39;mango\u0026#39;, \u0026#39;apple\u0026#39;]; fruits.push(\u0026#39;banana\u0026#39;); console.log(fruits); // [\u0026#39;mango\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;] const constants = { APP_NAME : \u0026#34;Coding N Concepts\u0026#34; }; constants.APP_NAME = \u0026#34;Unknown App\u0026#34;; console.log(constants.APP_NAME); // \u0026#34;Unknown App\u0026#34; You can see in the above two examples that you can change the value of an array or an object even if you are using const because:\n const does not make the value of the variable immutable but instead makes the binding of the variable immutable.\n  All primitive types like integer, boolean and string binding data by value whereas types like array and object binding data by reference.\n Now we know that in case of array and object, we cannot change the reference but can change the value.\nSo how do we prevent changing value of array and object?\nUse Object.freeze() Here is where Object.freeze() comes into play. Object.freeze ignore the change in value of object and array.\nlet constants = Object.freeze({ APP_NAME : \u0026#34;Coding N Concepts\u0026#34; }); constants.APP_NAME = \u0026#34;Unknown App\u0026#34;; console.log(constants.APP_NAME); // \u0026#34;Coding N Concepts\u0026#34; You can see in example that it doesn\u0026rsquo;t throw any error if you try to change the value but it won\u0026rsquo;t affect the object state.\nObject.freeze() prevents from changing value of an object but we can still change the reference as below:-\nlet constants = Object.freeze({ APP_NAME : \u0026#34;Coding N Concepts\u0026#34; }); constants = { APP_NAME : \u0026#34;Unknown App\u0026#34; }; console.log(constants.APP_NAME); // \u0026#34;Unknown App\u0026#34; If we summarize:-\n const doesn\u0026rsquo;t allow to change reference of object or array though you can change the value.\n  Object.freeze() ignores the change in value of object or array\n Combining them together will prevent change in both reference and value of an object or array\nUse const and Object.freeze() together const constants = Object.freeze({ APP_NAME : \u0026#34;Coding N Concepts\u0026#34; }); constants.APP_NAME = \u0026#34;Unknown App\u0026#34;; // This is ignored  constants = { APP_NAME : \u0026#34;Unknown App\u0026#34; }; // This will throw TypeError The above example shows that combining both const and Object.freeze() is very useful to define constants and configuration in JavaScript.\n","permalink":"https://codingnconcepts.com/javascript/const-vs-object-freeze/","tags":["Javascript Interview","Javascript ES6"],"title":"Difference in const and Object.freeze() in JavaScript"},{"categories":["Javascript"],"contents":"This post describes the usage of various Object methods like Object.create(), Object.assign(), Object.freeze(), Object.seal() and many more available in JavaScript with examples.\nObject.create() The Object.create() method is used to create a new object with its prototype set to existing object.\nvar car = { color: \u0026#34;black\u0026#34;, brand: \u0026#34;Toyota\u0026#34;, drive: function(){ console.log(`Driving a ${this.isTopModel ? \u0026#39;top model\u0026#39; : \u0026#39;\u0026#39;}${this.color}color ${this.brand}car`); } } var newCar = Object.create(car); newCar.brand = \u0026#34;Honda\u0026#34;; newCar.isTopModel = true; console.log(car.isPrototypeOf(newCar)); //true newCar.drive(); Output true Driving a top model black color Honda car Here newCar creates a completely new object with its prototype set to Car. We set the brand and isTopModel values whereas value of color will be inherited. When we call drive() method, it finds the drive() in the prototype chain on car and execute.\nObject.assign() Object.assign() is used to copy the properties and functions of one object in another object.\nWe can merge two objects using Object.assign() as follows:-\n// Initialize an object const favorites = { color: \u0026#39;Red\u0026#39;, number: 5 }; // Initialize another object const somemore = { fruit: \u0026#39;Mango\u0026#39;, movies: [\u0026#34;Spider Man\u0026#34;, \u0026#34;Conjuring\u0026#34;], }; // Merge the objects console.log(Object.assign(favorites, somemore)); Output {color: \u0026quot;Red\u0026quot;, number: 5, fruit: \u0026quot;Mango\u0026quot;, movies: [\u0026quot;Spider Man\u0026quot;, \u0026quot;Conjuring\u0026quot;]} Also can be used in Class constructor to assign all values to this as follows:\nclass Car { constructor(brand, color, price){ Object.assign(this, {brand, color, price}); } } Object.freeze() Object.freeze() freezes the state of an Object once this method is called. It ignores if any existing property is modified, and if any new property is added.\n// Initialize an object const user = { username: \u0026#39;admin\u0026#39;, password: \u0026#39;password@123\u0026#39; }; // Freeze the object Object.freeze(user); user.password = \u0026#39;*******\u0026#39;; user.active = true; console.log(user); Output {username: \u0026quot;admin\u0026quot;, password: \u0026quot;password@123\u0026quot;} Object.seal() Object.seal() seals the state of an Object once this method is called. It allows the modification of existing properties, but ignores if any new property is added.\n// Initialize an object const user = { name: \u0026#39;admin\u0026#39;, password: \u0026#39;password@123\u0026#39; }; // Seal the object Object.seal(user); user.password = \u0026#39;*******\u0026#39;; user.active = true; console.log(user); Output {name: \u0026quot;admin\u0026quot;, password: \u0026quot;*******\u0026quot;} Object.defineProperty() Object.defineProperty() is used to define new property in existing object.\nProperty can be defined with following options:\n value: defaults to undefined, if value of the property is not provided writable: deafults to false, if true means value of the property can be changed configurable: defaults to false, if true means property can be deleted enumerable: defaults to false, if true means property can be enumerated such as in a for..in loop  var user = {}; Object.defineProperty(user, \u0026#34;name\u0026#34;, { value: \u0026#34;admin\u0026#34; }); console.log(user); is equivalent to\nvar user = {}; Object.defineProperty(user, \u0026#34;name\u0026#34;, { value: \u0026#34;admin\u0026#34;, writable: false, configurable: false, enumerable: false }); console.log(user); Output {name: \u0026quot;admin\u0026quot;} Object.defineProperties() Object.defineProperties() can be used to define multiple properites in existing object.\nvar user = {}; Object.defineProperties(user, { name: { value: \u0026#34;admin\u0026#34;, writable: true, enumerable: true }, password: { value: \u0026#39;password@123\u0026#39;, writable: false, enumerable: false } }); console.log(user); Output {name: \u0026quot;admin\u0026quot;, password: \u0026quot;password@123\u0026quot;} Object.keys(), Object.values() \u0026amp; Object.entries() Object.keys(), Object.values() and Object.entries() can be used iterator from the object as follows:\nlet favorites = { color: \u0026#39;Red\u0026#39;, number: 5, vegan: true, movies: [\u0026#34;Spider Man\u0026#34;, \u0026#34;Conjuring\u0026#34;] }; console.log(\u0026#34;keys\u0026#34;, Object.keys(favorites)); console.log(\u0026#34;values\u0026#34;, Object.values(favorites)); console.log(\u0026#34;entries\u0026#34;, Object.entries(favorites)); Output keys [\u0026quot;color\u0026quot;, \u0026quot;number\u0026quot;, \u0026quot;vegan\u0026quot;, \u0026quot;movies\u0026quot;] values [\u0026quot;Red\u0026quot;, 5, true, [\u0026quot;Spider Man\u0026quot;, \u0026quot;Conjuring\u0026quot;]] entries [ [\u0026quot;color\u0026quot;, \u0026quot;Red\u0026quot;], [\u0026quot;number\u0026quot;, 5], [\u0026quot;vegan\u0026quot;, true], [\u0026quot;movies\u0026quot;, [\u0026quot;Spider Man\u0026quot;, \u0026quot;Conjuring\u0026quot;] ] Object.keys() and Object.entries() can be used to iterate through the keys and values of an object as follows:-\nObject.keys(favorites).forEach(key =\u0026gt; console.log(`${key}: ${favorites[key]}`)); Object.entries(favorites).forEach(entry =\u0026gt; console.log(`${entry[0]}: ${entry[1]}`)); Object.is() ES6 has introduced a new method Object.is() to compare two values, it works very much similar to strict comparison operator === and also avoid confusion of NaN comparisons and +0/-0 comparisons. It is recommended to use Object.is() for value comparisons.\nlet\u0026rsquo;s check it out,\nconsole.log(Object.is(\u0026#34;cnc\u0026#34;, \u0026#34;cnc\u0026#34;)); // true, same content and type console.log(Object.is(12345, 12345)); // true, same content and type console.log(Object.is(false, false)); // true, same content and type  console.log(Object.is(12345, \u0026#34;12345\u0026#34;)); // false, different type console.log(Object.is(0, false)); // false, different type console.log(Object.is(\u0026#34;\u0026#34;, false)); // false, different type console.log(Object.is(null, undefined)); // false, different type  console.log(Object.is([], [])); // false, both refers to different object in memory console.log(Object.is([1, 2], [1, 2])); // false, both refers to different object in memory console.log(Object.is({}, {})); // false, both refers to different object in memory  var array1 = [1, 2, 3, 4, 5]; var array2 = array1; console.log(Object.is(array1, array2)); // true, both refers to same array  var obj1 = { app : \u0026#34;cnc\u0026#34;}; var obj2 = obj1; console.log(Object.is(obj1, obj2)); // true, both refers to same object  console.log(NaN === NaN); // false, confusing, content and type is same console.log(Object.is(NaN, NaN)); // true, es6 is good, same content and type  console.log(+0 === -0); // true, confusing, content is different console.log(Object.is(+0, -0)); // false, es6 is good, different content  Summary Javascript Object provides very useful methods to\n create a new object using Object.create() copy object using Object.assign() protect object using Object.freeze() and Object.seal() define object properties using Object.defineProperty() and Object.defineProperties() iterate through object using Object.keys(), Object.values() and Object.entries() compare objects using Object.is() ","permalink":"https://codingnconcepts.com/javascript/object-methods-in-javascript/","tags":["Javascript Interview","Javascript ES6"],"title":"Object methods in JavaScript"},{"categories":["Javascript"],"contents":"A nice feature addition in ES2015 (ES6) was the introduction of let and const keywords for variable declaration. You can use var, let and const keyword interchangeably for variable declaration though it makes a difference in terms of their scope, usage and hoisting. If you are not aware of these differences then please continue to read\u0026hellip;\nScope  Scope basically means the accessibility of a variable. Variables can have three types of scope:-\n1. Global Scope When variables is defined outside a function and accessible everywhere. All var, let and const are global scope.\n2. Function Scope Variables defined using var are function-scoped because if it is defined inside function, their visibility is limited to the function, or nested function. When you try to use it outside of the function, you’ll get an error.\nfunction myFn() { var foo = \u0026#39;peekaboo!\u0026#39;; console.log(foo); // \u0026#39;peekaboo!\u0026#39; } console.log(foo); // ReferenceError: foo is not defined 3. Block Scope Variables defined using let or const are block-scoped because if it is defined inside block of code (code between curly braces {}), their visibility is limited to the block of code, any nested block. When you try to use it outside of the block, you’ll get an error.\nif (true) { var foo = \u0026#39;peekaboo!\u0026#39;; let bar = \u0026#39;i see u\u0026#39;; const baz = \u0026#39;baby blue!\u0026#39;; console.log(foo); // \u0026#39;peekaboo!\u0026#39;;  console.log(bar); // \u0026#39;i see u\u0026#39;;  console.log(baz); // \u0026#39;baby blue!\u0026#39;; } console.log(foo); // \u0026#39;peekaboo!\u0026#39;; console.log(bar); // ReferenceError: bar is not defined console.log(baz); // ReferenceError: baz is not defined Usage  1. \u0026ldquo;var\u0026rdquo; var was the only keyword for variable declaration before ES6.\nvar outside of a for-loop // for-loop for (var i = 0; i \u0026lt; 3; i++) { console.log(i); } console.log(i); Output 0 1 2 3 Since var is function-scoped. The variable i can be accessed outside for-loop (block of code)\nvar reassigning Variable using var can be reassigned with new value and also can be redefined.\nfunction myFn() { var foo = 1; foo = 30; var foo = 101; console.log(foo); } myFn(); Output 101 \n2. \u0026ldquo;let\u0026rdquo; let outside of a for-loop // for-loop for (let i = 0; i \u0026lt; 3; i++) { console.log(i); } console.log(i); Output 0 1 2 ReferenceError: i is not defined Since let is block-scoped. The variable i is not accessible outside for-loop (block of code)\nlet reassigning and redefining Variable using let can be reassigned with new value but can not be redefined.\nfunction myFn() { let foo = 1; foo = 30; let foo = 101; console.log(foo); } myFn(); Output error: Identifier 'foo' has already been declared However, if the let variable is defined in different scopes, there will be no error.\nlet foo = 1; function myFn() { let foo = 2; console.log(foo); if(true){ let foo = 3; console.log(foo); } } console.log(foo); myFn(); Output 1 2 3 Why is there no error? This is because all three instances are treated as different variables since they have different scopes.\n\n3. \u0026ldquo;const\u0026rdquo; The keyword const is similar to let, it’s block-scoped, however, you can’t reassign the value to it.\nconst PI = 3.1415; PI = 5; // \u0026#34;TypeError: Assignment to constant variable. However, new items can still be pushed into an array constant or added to an object. The following 2 snippets work without complaining because we are not trying to reassign to the variables:\nconst someArr = [3, 4, 5]; someArr.push(6); const someObj = { dog: \u0026#39;Skip\u0026#39;, cat: \u0026#39;Caramel\u0026#39;, bird: \u0026#39;Jack\u0026#39; }; someObj.camel = \u0026#39;Bob\u0026#39;; Hoisting   Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution\n In case of var variables, their values are initialized with undefined in hoisting process.\nconsole.log(foo); var foo = 1; console.log(foo); console.log(bar); bar = 2; console.log(bar); var bar; is interpreted as this\nvar foo; var bar; console.log(foo); // undefined foo = 1; console.log(foo); // 1  console.log(bar); // undefined bar = 2; console.log(bar); // 2 Can you guess what is output of below code snippet? var foo = 1; function myFun(){ console.log(foo); var foo = 2; } myFun(); Have you guessed foo = 1 or foo = 2?\nIt\u0026rsquo;s neither one of them. It will print undefined. Let\u0026rsquo;s see how it is interpreted by the compiler in hoisting process,\nvar foo; foo = 1; function myFun(){ var foo; // var hoisted and initialized with undefined  console.log(foo); // undefined  foo = 2; } myFun(); Just like var, let declarations also hoisted to the top but unlike var which is initialized as undefined, the let variable is not initialized. So if you try to use a let variable before declaration, you\u0026rsquo;ll get a Reference Error. const variables are similar to let variables in terms of hoisting.\nconsole.log(foo); let foo = 1; Output ReferenceError: foo is not defined Can you guess what is output of below code snippet? let foo = 1; function myFun(){ console.log(foo); let foo = 2; } myFun(); Have you guessed foo = undefined?\nNo its not. Let\u0026rsquo;s see how it is interpreted by the compiler in hoisting process,\nlet foo; foo = 1; function myFun(){ let foo; // let hoisted without initialization unlike var  console.log(foo); // ReferenceError: Cannot access \u0026#39;foo\u0026#39; before initialization  foo = 2; } myFun(); Summary  So just in case, you missed the differences, here they are :\n    Scope Value Update Redefine Variable Hoisting     var function scope yes yes (within scope) initialized with undefined   let block scope yes no (within block scope) but yes (outside block scope) variable not initialized   const block scope no no variable not initialized     var variables are function scoped whereas let and const are block scoped. var variables can be updated and re-declared within its scope; let variables can be updated but not re-declared; const variables can neither be updated nor re-declared. They are all hoisted to the top of their scope but while var variables are initialized with undefined, let and const variables are not initialized. While var and let can be declared without being initialized, const must be initialized during declaration.  Got any question or addition? please leave a comment.\nThanks for reading.\n","permalink":"https://codingnconcepts.com/javascript/difference-between-var-let-and-const/","tags":["Javascript Interview","Javascript ES6"],"title":"Difference between var, let and const"},{"categories":["Puzzles"],"contents":"The one light bulb and three switches puzzle has been asked several times in interviews to evaluate candidate\u0026rsquo;s analytical skills.\nPuzzle   There is a light bulb 💡 inside a closed room (no windows) with one door. You cannot see the light bulb is on or off as the door is closed. However, you can assume that the light is off initially. There are three light switches outside the room. One of the switch belongs to the light bulb inside the room. You can turn on or off the switches however you want, but you are allowed to open the door only once. You are not allowed to touch the switches once you open the door.\nHow do you figure out which switch belongs to the light?\nThink for a while before looking at the solution.\nSolution We are assuming that all the switches are off initially. Turn on switch number 1 and wait for two minutes. After two minutes, turn off the switch number 1 and turn on the switch number 2 and open the door to see light bulb\n If the light bulb is on, then switch number 2 belongs to the bulb. If the light bulb is off, then touch the bulb with your hand. If the bulb is hot, then switch number 1 belongs to the bulb otherwise switch number 3 belongs to the bulb. ","permalink":"https://codingnconcepts.com/puzzle/1-light-bulb-and-3-switches/","tags":["Interview Puzzle"],"title":"1 Light Bulb and 3 Switches Puzzle"},{"categories":["Puzzles"],"contents":"The Fruit basket puzzle comes under basic puzzles being asked in the interview.\nPuzzle   There are 3 baskets. One basket has apples 🍎 only, one has oranges 🍊 only and the other has mixture of apples and oranges 🍎🍊. All the three baskets have wrong labels on it that means if basket is labelled as ORANGES, it is having either mixture or apples. You have to pick only one fruit from any of the one basket and correctly label all the three baskets.\nHow do you do it?\nThink for a while before looking at the solution.\nSolution Pick a fruit from the one labeled MIXTURE which have two possible outcomes:-\n  If that fruit is orange then correct label for this basket is ORANGES. The one which is fake labelled as APPLES must be either ORANGES or MIXTURE. Since we have already found our ORANGES basket. APPLES basket is actually a MIXTURE and the one fake labelled as ORANGES is APPLES.\n   Fake Label Correct Label     MIXTURE ORANGES   APPLES MIXTURE   ORANGES APPLES      If that fruit is apple then correct label for this basket is APPLES. The one which is fake labelled as ORANGES must be either APPLES or MIXTURE. Since we have already found our APPLES basket. ORANGES basket is actually a MIXTURE and the one fake labelled as APPLES is ORANGES.\n   Fake Label Correct Label     MIXTURE APPLES   ORANGES MIXTURE   APPLES ORANGES     ","permalink":"https://codingnconcepts.com/puzzle/fruit-basket-puzzle/","tags":["Interview Puzzle"],"title":"Fruit Basket Puzzle"},{"categories":["Puzzles"],"contents":"This riddle is from famous Die Hard movie where Bruce Willis and Jackson have to diffuse a bomb by placing exactly 4 gallon water on a scale using 3 gallon and 5 gallon water jug.\n  \nRiddle   You have a 3-gallon and a 5-gallon jug that you can fill multiple times from a tap 🚰. The problem is to measure exactly 4 gallons of water.\nHow do you do it?\nThink for a while before looking at the solution.\nSolution Firstly you will try to measure 4 gallons of water by estimation. For e.g. adding 3 gallons of water to 1/3 of the 3 gallon jug. But this riddle is asking for a precise measurement so this won\u0026rsquo;t work.\nWe can quick realize this:-\n5 – 3 = 2 and 5 – (3 – 2) = 4\nHere is one of the solution of this riddle:\n   Action 3-gallon jug 5-gallon jug     Fill up 5-gallon jug - 5   Fill up 3-gallon jug with water from 5-gallon jug 3 2   Pour out 3-gallon jug 0 2   Transfer water from 5-gallon jug to 3-gallon jug 2 0   Fill up 5 gallon jug again 2 5   Transfer water from 5-gallon jug to 3-gallon jug 3 4    That’s not the only solution. There are multiple solutions possible for this riddle.\nIncidentally, the reason we can find a solution is because the two numbers 5 and 3 are prime numbers (i.e. they have no common divisors). We can actually generate any volume of water from 1 to sum of these two prime numbers (i.e. 5 + 3 = 8) (in fact, we did get measurements of 2, 3, 4, 5 and 7 along the way in our solutions).\n We have measured 2 and 3 in 3-gallon jug along the way in our solution We have measured 4 and 5 in 5-gallon jug along the way in our solution We have measured 7 in last two actions summing up gallons in both jugs we can measure exactly 8-gallons by filling up both 5-gallon and 3-gallon jugs ","permalink":"https://codingnconcepts.com/puzzle/the-water-jug-riddle/","tags":["Die Hard Puzzle","Maths Puzzle"],"title":"The Die Hard Water Jug Riddle (Solved)"},{"categories":["Puzzles"],"contents":"The 2 Eggs and 100 Floors problem is frequently asked in interview to evaluate candidate\u0026rsquo;s understanding on linear search and binary search. I have tried to explain this problem as easy as possible.\nProblem Statement There is a building of 100 floors. One of the floors is the highest floor (say Nth floor) an egg can be dropped from without breaking.\n If an egg is dropped from that floor (N) or above (N+1, N+2, \u0026hellip;), it will break. If it is dropped from any floor below (N-1, N-2, \u0026hellip;), it will not break and you can drop the egg again.  Given two eggs 🥚🥚, find the floor (N) an egg can be dropped from without breaking in minimum number of drops.\n The question is, What strategy should you adopt to minimize the number egg drops it takes to find the solution?. (And what is the worst case for the number of drops it will take?)\nThink about the problem for a few minutes, and then read on.\nSolution 1 (Liner Search) First solution is linear search strategy which is very straightforward if we don\u0026rsquo;t care about number of drops. We can start dropping egg from floor 1, floor 2, floor 3 and continue till floor 100 until we find the floor N. In worst case it will take 100 drops if egg breaks only at the last (100th) floor.\n Linear search - worst case - 100 drops  Can we improve worst case using binary search strategy? Lets see in Solution 2.\nSolution 2 (Binary Search) Second solution is binary search strategy where we start from the middle (50th) floor.\n If egg breaks on 50th floor that means our N is below 50. If egg doesn\u0026rsquo;t break that means our N is above 50.  Binary search strategy say that If egg breaks on 50th floor then we should check now from 25th floor but wait, we have a problem here. We have already lost 1 egg and left with only 1 egg now so we are left with linear search only but in this case only from 1st to 50th floor in worst case. So our drops came down to half compare to solution 1\n Binary Search - worst case - 50 drops  Can we still improve the worst case? Let see in Solution 3\nSolution 3 (Divide and Conquer) Let\u0026rsquo;s apply our learning from previous solutions and apply a mix of linear and binary approach.\nThis time we start off by dropping an egg at floor 10, floor 20, floor 30 \u0026hellip;increasing floor by 10\n  If first egg breaks at floor 10, then we use second egg to linear search from 1 to 9\n  If first egg breaks at floor 20, then we use second egg to linear search from 11 to 19\n  \u0026hellip;.\n  In worst case if egg breaks at last (100th) floor then we use second egg to linear search from 91 to 99. In worst case it will take 19 drops (10th, 20th, 30th \u0026hellip;\u0026hellip; 70th 80th 90th 91th \u0026hellip;.99th)\n Divide and Conquer - worst case - 19 drops    Now when we came to an understanding, lets see Solution 4\nSolution 4 (Equation) What we need is a solution that minimizes our maximum drops. The solution above hint towards what we need is a strategy that tries to make solutions to all possible answers the same depth (same number of drops). The way to reduce the worst case is to attempt to make all cases take the same number of drops.\nAs I hope you can see by now, if the solution lays somewhere in a floor low down, then we have extra-headroom when we need to step by singles, but, as we get higher up the building, we’ve already used drop chances to get there, so there we have less drops left when we have to switch to going floor-by-floor.\nLet’s break out some algebra.\nImagine we drop our first egg from floor n, if it breaks, we can step through the previous (n-1) floors one-by-one.\nIf it doesn’t break, rather than jumping up another n floors, instead we should step up just (n-1) floors (because we have one less drop available if we have to switch to one-by-one floors), so the next floor we should try is floor n + (n-1)\nSimilarly, if this drop does not break, we next need to jump up to floor n + (n-1) + (n-2), then floor n + (n-1) + (n-2) + (n-3) …\nWe keep reducing the step by one each time we jump up, until that step-up is just one floor, and get the following equation for a 100 floor building:\nn + (n-1) + (n-2) + (n-3) + (n-4) + … + 1 \u0026gt;= 100\nThis summation, as many will recognize, is the formula for triangular numbers (which kind of makes sense, since we’re reducing the step by one each drop we make) and can be simplified to:\nn (n+1) / 2 \u0026gt;= 100\nThis is a quadratic equation, with the positive root of 13.651 (Which we have to round up to 14)\nThis means we want to start dropping from floor 14, jump up 13 floors to drop from floor 27, jump up 12 floors to drop from floor 39, and so on. Our worst case scenario is then a drop count total of 14.\n Equation - worst case - 14 drops     Drop Floor     #1 14   #2 27   #3 39   #4 60   #6 69   #7 77   #8 84   #9 90   #10 95   #11 99   #12 100   ","permalink":"https://codingnconcepts.com/puzzle/2-eggs-and-100-floors/","tags":["Interview Puzzle","Google Interview Puzzle"],"title":"2 Eggs and 100 Floors Problem (Solved)"},{"categories":["Puzzles"],"contents":"The 25 Horses 5 Tracks Problem is a famous Google interview question that has been asked in many companies to evaluate candidate\u0026rsquo;s analytical ability and problem solving approach.\nProblem Statement You have 25 horses\n🐎🐎🐎🐎🐎\n🐎🐎🐎🐎🐎\n🐎🐎🐎🐎🐎\n🐎🐎🐎🐎🐎\n🐎🐎🐎🐎🐎\nand you need to identify the fastest 3 horses 🐎🐎🐎 out of those 25. Only 5 horses can run in each race at the same time as there are only 5 tracks.\nWhat is the minimum number of races required to identify the fastest 3 horses without using a stopwatch or timer?\nSolution This is an interesting puzzle. Let\u0026rsquo;s look at the limitations first.\n We don’t have a stopwatch or timer so we can’t record the finish time of each horse otherwise we could have find out the fastest 3 horses by 5 races of 5 horse in each race. Only 5 horses can run in each race otherwise we could have find out fastest 3 horses by just one race of 25 horses.\n  First 5 Races So at this point we are certain that we need minimum 5 races first\n25 horses / 5 horses per race = 5 races  Visualization is very important for such puzzles. Draw a matrix of horses for first 5 races.\nWhere RxHy Where R is race, x is race number, H is horse, y is horse number\n   (Race 1) R1H5 R1H4 R1H3 R1H2 R1H1     (Race 2) R2H5 R2H4 R2H3 R2H2 R2H1   (Race 3) R3H5 R3H4 R3H3 R3H2 R3H1   (Race 4) R4H5 R4H4 R4H3 R4H2 R4H1   (Race 5) R5H5 R5H4 R5H3 R5H2 R5H1     (5 Races) first 5 races\n  After first 5 races we will have a winner for each race. Result of first five races are as follows:-\n   (Race 1) R1H5 R1H4 R1H3 R1H2 R1H1     (Race 2) R2H5 R2H4 R2H3 R2H2 R2H1   (Race 3) R3H5 R3H4 R3H3 R3H2 R3H1   (Race 4) R4H5 R4H4 R4H3 R4H2 R4H1   (Race 5) R5H5 R5H4 R5H3 R5H2 R5H1   Assume Results are as follows:- (Slowest) (Second Last) (Third Winner) (Second Winner) (Winner)    For simplicity let\u0026rsquo;s assume first horse of each race is winner i.e. R1H1, R2H1, R3H1, R4H4, R5H5.\n\n6th Race (The Race of winners of first 5 races) Now we need 6th race of all the winners of first 5 races i.e. R1H1, R2H1, R3H1, R4H4, R5H5. This race will reveal the fastest horse out of all 25 horses. Result of 6th race is as follows:-\n   (Race 6) R5H1 R4H1 R3H1 R2H1 R1H1     Assume Results are as follows:- (Slowest) (Second Last) (Third Winner) (Second Winner) (Winner)    For simplicity let\u0026rsquo;s assume first horse of first race i.e. R1H1 is winner for 6th race.\n (6th Race) Race of winners of first 5 races\n  Now we know the fastest horse R1H1 out of all 25 horses but we don\u0026rsquo;t know the 2nd and 3rd fastest horse yet because 2nd and 3rd might be from 1st race since R1H1 from Race 1 is the fastest horse OR from the winners of all first five races.\n\n7th Race (The Race of Chosen Five) To understand this we need to align all the horses as per their ranking in each race and eliminate the horses which are definitely cannot be 2nd and 3rd fastest\n   (Race 1) R1H5 R1H4 R1H3 R1H2 R1H1     (Race 2) R2H5 R2H4 R2H3 R2H2 R2H1   (Race 3) R3H5 R3H4 R3H3 R3H2 R3H1   (Race 4) R4H5 R4H4 R4H3 R4H2 R4H1   (Race 5) R5H5 R5H4 R5H3 R5H2 R5H1   Assume Results are as follows:- (Slowest) (Second Last) (Third Winner) (Second Winner) (Winner)     Race 1: Since fastest horse R1H1 is from Race 1, second R1H2 and third R1H3 winner of Race 1 can be 2nd and 3rd faster so eliminate Second Last and Slowest. Also eliminate the fastest horse because that can not be 2nd or 3rd fastest. We already know that. Race 2: Second winner of 6th race R2H1 is from Race 2 so it can be 2nd fastest horse. If it is 2nd fastest then second winner R2H2 can be 3rd fastest. Eliminate rest. Race 3: Third winner of 6th race R3H1 is from Race 3 so it can ve 3rd fastest horse. Eliminate rest. Race 4: Fourth winner of 6th race is from from Race 4. Since we have to find 2nd and 3rd fastest horse. Eliminate all. Race 5: Fifth winner of 6th race is from from Race 5. Since we have to find 2nd and 3rd fastest horse. Eliminate all.  Now that we’ve eliminated the all of the horses that can’t possibly be in the top three, what are we left with? The chosen 5 horses, let\u0026rsquo;s do the 7th race:-\n (7th Race) Race of the chosen 5\n  The first and second winner of the 7th race will be the 2nd and 3rd fastest horse out of all 25 horses. So you need minimum 7 races to identify fastest 3 horses.\n5 races (of all 25) + 6th race (winners of first 5 races) + 7th race (the chosen five) = 7 races\nConclusion I have tried to explain the solution as easy as possible. Please let me know by writing in comment section if you still find it difficult to understand.\n","permalink":"https://codingnconcepts.com/puzzle/25-horses-puzzle/","tags":["Interview Puzzle","Google Interview Puzzle"],"title":"25 Horses 5 Tracks Problem (Solved)"},{"categories":["Puzzles"],"contents":"Burning Rope Puzzle comes under basic puzzles asked in the interview.\nPuzzle You have two ropes of varying thickness and length. Each rope burns 🔥 in exactly 60 minutes. How can you measure 45 mins using only these two ropes.\nNote: You can’t cut the rope in half because of varying thickness and you don\u0026rsquo;t have a timer or watch to measure the burning time.\nSolution  Burning Rope (Step 1)\n   Burn first rope at both the ends and the second rope at one end. The first rope burns completely after half an hour since you burned it from both end. At this point, burn the other end of the second rope so now it will take 15 mins more to burn completely.  Phat! total time is 30 + 15 = 45 mins.\n","permalink":"https://codingnconcepts.com/puzzle/burning-rope/","tags":["Interview Puzzle"],"title":"Burning Rope Puzzle (Solved)"},{"categories":["Puzzles"],"contents":"The legend says that this problem was created by Albert Einstein in the last century. Einstein said that only 2% of the world could solve it.\n  Riddle There are no tricks, just pure logic, so good luck and don’t give up.\n In a street there are five houses, painted five different colors. In each house lives a man of different nationality These five homeowners each drink a different kind of beverage, smoke different brand of cigar and keep a different pet.  The question is \u0026ldquo;Who owns the fish?\u0026quot;\nClues:\n The British man lives in a red house. The Swedish man keeps dogs as pets. The Danish man drinks tea. The Green house is next to, and on the left of the White house. The owner of the Green house drinks coffee. The person who smokes Pall Mall rears birds. The owner of the Yellow house smokes Dunhill. The man living in the center house drinks milk. The Norwegian lives in the first house. The man who smokes Blends lives next to the one who keeps cats. The man who keeps horses lives next to the man who smokes Dunhill. The man who smokes Blue Master drinks beer. The German smokes Prince. The Norwegian lives next to the blue house. The Blends smoker lives next to the one who drinks water.  Solution It\u0026rsquo;s the German.\nHow do you solve it?\nWell, we know from examining the clues and the question that:\nThe possible nationalities are: Norwegian British Swedish Danish German\nThe possible house colors are: Red Green White Yellow Blue\nThe possible beverages are: Tea Coffee Milk Beer Water\nThe possible cigars are: Pall Mall Dunhill Blends BlueMaster Prince\nThe possible pets are: Dogs Birds Cats Horses Fish\nWell, we know there are five houses. We\u0026rsquo;ll assume they\u0026rsquo;re all in a row, and are numbered from left to right. We know the Norwegian is in the first house:\n   House #1 #2 #3 #4 #5     Color ? ? ? ? ?   Nationality Norwegian ? ? ? ?   Beverage ? ? ? ? ?   Smokes ? ? ? ? ?   Pet ? ? ? ? ?    Since the British lives in the red house, the Norwegian can\u0026rsquo;t. We also know the Norwegian lives next to the blue house, so his house isn\u0026rsquo;t blue. We also know that the green house is to the left of the white house; the Norwegian can\u0026rsquo;t live in the white house since there is no house to the left, and can\u0026rsquo;t live in the green house because his only neighbor, the one to the right, is known to live in the blue house. Therefore, the Norwegian lives in the yellow house.\nWe also know the owner of the yellow house smokes Dunhill, and that the Norwegian has a neighbor with a blue house (the Norwegian only has one neighbor, to the right.)\nSo here\u0026rsquo;s what our matrix looks like now:\n   House #1 #2 #3 #4 #5     Color Yellow Blue ? ? ?   Nationality Norwegian ? ? ? ?   Beverage ? ? ? ? ?   Smokes Dunhill ? ? ? ?   Pet ? ? ? ? ?    The man who keeps horses lives next to he man who smokes Dunhill; so the horse owner lives in the blue house. The center house\u0026rsquo;s owner drinks milk, the green house\u0026rsquo;s owner drinks coffee, and the green house is to the left of the white house. Since we know the left two houses are the yellow and blue houses, the only position for the green and white are green as the fourth and white as the fifth, since the middle (third) drinks milk and the owner of the green house drinks coffee. The middle house has to be red, and therefore is the Brit\u0026rsquo;s. So now this is what we know:\n   House #1 #2 #3 #4 #5     Color Yellow Blue Red Green White   Nationality Norwegian ? British ? ?   Beverage ? ? Milk Coffee ?   Smokes Dunhill ? ? ? ?   Pet ? Horse ? ? ?    The owner who smokes BlueMaster drinks beer; since we know what houses #3 and #4 drink [and neither are beer] and we know what house #1 smokes [and its not BlueMaster], the only possibilities are houses #2 and #5. Keep this information in mind. Since it is evident house #1 cannot drink beer (only house #2 or #5 can), the only possible beverages for house #1 are water and tea, but since the Dane drinks tea, house #1 drinks water. The man who smokes Blends lives next to someone who drinks water; the only house next to #1 (the water-drinking house) is #2. The man who smokes Blends lives next to the one who has cats; so the cat-house is #1 or #3.\n   House #1 #2 #3 #4 #5     Color Yellow Blue Red Green White   Nationality Norwegian ? British ? ?   Beverage ? Beer? Milk Coffee Beer?   Smokes Dunhill Blends ? ? ?   Pet Cat? Horse Cat? ? ?    Since the Dane drinks tea, he must live in either house #2 or #5. The Swede and German could live in house #2, #4 or #5.\n   House #1 #2 #3 #4 #5     Color Yellow Blue Red Green White   Nationality Norwegian D/S/G? British S/G? D/S/G?   Beverage ? Beer? Milk Coffee Beer?   Smokes Dunhill Blends ? ? ?   Pet Cat? Horse Cat? ? ?    We know the beer-drinker smokes BlueMaster. The only houses that could drink beer are #2 and #5, but since we know that #2 smokes Blends, #5 must be the house which drinks beer and smokes BlueMaster, and #2 has to be the house that drinks tea and the house of the Dane. We can eliminate the possibility of the Dane\u0026rsquo;s residence being house #5.\n   House #1 #2 #3 #4 #5     Color Yellow Blue Red Green White   Nationality Norwegian Danish British S/G? S/G?   Beverage Water Tea Milk Coffee Beer   Smokes Dunhill Blends ? ? BlueMaster   Pet Cat? Horse Cat? ? ?    We know the German smokes Prince. Therefore, he could not live at house #5 and therefore has to live at house #4. The Swede must live at house #5; we also know house #5 raises dogs since we know the Swede raises dogs, and that house #4 smokes Prince since the German smokes Prince.\n   House #1 #2 #3 #4 #5     Color Yellow Blue Red Green White   Nationality Norwegian Danish British German Swedish   Beverage Water Tea Milk Coffee Beer   Smokes Dunhill Blends ? Prince BlueMaster   Pet Cat? Horse Cat? ? Dogs    The only possibility for house #3\u0026rsquo;s smokes is Pall Mall; all of the others are taken. We know that whoever smokes Pall Mall raises birds; so house #3 raises birds, and house #1 therefore has cats, since the only houses which could have had cats were #1 and #3, and #3 has been eliminated.\n   House #1 #2 #3 #4 #5     Color Yellow Blue Red Green White   Nationality Norwegian Danish British German Swedish   Beverage Water Tea Milk Coffee Beer   Smokes Dunhill Blends Pall Mall Prince BlueMaster   Pet Cat Horse Birds ? Dogs    The only remaining pet is the fish, which must be owned by the German. We now know who owns the fish, and have solved the puzzle.\nThe completed matrix of data is as follows:\n   House #1 #2 #3 #4 #5     Color Yellow Blue Red Green White   Nationality Norwegian Danish British German Swedish   Beverage Water Tea Milk Coffee Beer   Smokes Dunhill Blends Pall Mall Prince BlueMaster   Pet Cat Horse Birds Fish Dogs   ","permalink":"https://codingnconcepts.com/puzzle/einsteins-riddle/","tags":["Einstein Riddle"],"title":"Einstein's Riddle"},{"categories":["Puzzles"],"contents":"This is a pure mathematical puzzle which evaluate your ability to solve maths equation. This is a great problem for building number sense.\nPuzzle The challenge is to make each below equation true using common mathematical operations. You cannot introduce any new digits (so the cube root ∛ is not allowed since it has a 3).\nHint: common mathematical operations are + - x / ! √\n0 0 0 = 6 1 1 1 = 6 2 2 2 = 6 3 3 3 = 6 4 4 4 = 6 5 5 5 = 6 6 6 6 = 6 7 7 7 = 6 8 8 8 = 6 9 9 9 = 6 Solution Note: Please try on your own before looking at the solution. Also some of the equations has multiple solutions.\nLet’s start with some easier ones.\n2 + 2 + 2 = 6 6 + 6 – 6 = 6 6 × (6/6) = 6 7 – 7/7 = 6 5 + 5/5 = 6  Here are a few solutions for 3.\n3 × 3 – 3 = 6 3! + 3 – 3 = 6 3! × (3/3) = 6 √(3 × 3) + 3 = 6  For the number 9, we can use a trick. Since √(9) = 3, we can take the square root of each number, so the problem is equivalent to solving 3 3 3 = 6, which we have just solved! So we can use any of those solutions, or we can find others too.\n√9 × √9 – √9 = 6 (√9)! + √9 – √9 = 6 (√9)! × √9/√9 = 6 (√9 × √9/√9)! = 6  We can do a similar trick for 4. Since √4 = 2, we can use the solution for 2 2 2 = 6. But there are other solutions too.\n√4 + √4 + √4 = 6 (4 – 4/4)! = 6 (√4 + 4/4)! = 6  Now we just have a couple more to solve and we will use 3! = 6 in many of the answers. We can solve for 10 as:\n(√(10 – 10/10))! = 6  Then we have the 1 solution:\n(1 + 1 + 1)! = 6  To solve 0, we use the fact that 0! = 1, and then we have reduced the problem to solving 1 1 1 = 6, which was previously solved.\n(0! + 0! + 0!)! = 6  We just have one more to solve, which many people consider to be the hardest. One way to solve uses nested square roots.\n8 – √(√(8 + 8)) = 6  The other method uses 3! = 6.\n(√(8 + 8/8))! = 6  And we are done! Here are the above solutions listed in numerical order. This is not a comprehensive list. you might have found another way too!\n(0! + 0! + 0!)! = 6 (1 + 1 + 1)! = 6 2 + 2 + 2 = 6 3 × 3 – 3 = 6 3! + 3 – 3 = 6 3! × (3/3) = 6 √(3 × 3) + 3 = 6 √4 + √4 + √4 = 6 (4 – 4/4)! = 6 (√4 + 4/4)! = 6 5 + 5/5 = 6 6 + 6 – 6 = 6 6 ×(6/6) = 6 7 – 7/7 = 6 8 – √(√(8 + 8)) = 6 (√(8 + 8/8))! = 6 √9 × √9 – √9 = 6 (√9)! + √9 – √9 = 6 (√9)! × √9/√9 = 6 (√9 × √9/√9)! = 6 (√(10 – 10/10))! = 6 ","permalink":"https://codingnconcepts.com/puzzle/the-6s-math-puzzle/","tags":["Maths Puzzle"],"title":"The 6s Math Puzzle"},{"categories":["Spring Boot"],"contents":"Swagger library is very useful if you are creating spring boot web application and exposing REST endpoints. Swagger generates web page for you to execute and test GET, POST, PUT, DELETE HTTP endpoints. This is helpful since you do not need to use Postman or some other tool to test REST Apis. Once you configure swagger then web page can be accessible using following URL:-\nhttp://localhost:8080/swagger-ui.html\nFollow the steps to configure swagger in your spring boot application:-\n1. Add swagger maven dependencies in pom.xml \u0026lt;properties\u0026gt; \u0026lt;swagger.version\u0026gt;2.9.2\u0026lt;/swagger.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!-- swagger for api documentation and rest client generation --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.springfox\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springfox-swagger2\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${swagger.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- swagger-ui for api documentation web ui --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.springfox\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springfox-swagger-ui\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${swagger.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.springfox\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springfox-data-rest\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${swagger.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; 2. Define properties in application.properties or application.yml Instead of hard coding values in swagger configuration we are going to define properties in configuration file\napplication.yml app: name: spring boot application api: title: Spring Boot APIs version: 1.0.0 description: Spring Boot APIs description base-package: com.abc.controller contact-name: apisupportgroup contact-email: apisupportgroup@abc.com Once properties are defined in application.yml or application.properties file. Define a SwaggerConfig.java file as following:-\n3. Define SwaggerConfig.java to configure swagger in spring boot application  Line 20, 21 is correct way in swagger to map \u0026ldquo;Date\u0026rdquo; and \u0026ldquo;DateTime\u0026rdquo; to their corresponding swagger types:  Substitute \u0026ldquo;Date\u0026rdquo; types (java.util.LocalDate, org.joda.time.LocalDate) by java.sql.Date. Substitute \u0026ldquo;DateTime\u0026rdquo; types (java.util.ZonedDateTime, org.joda.time.LocalDateTime, …​) by java.util.Date.    1@Configuration 2@EnableSwagger2 3@ConfigurationProperties(\u0026#34;app.api\u0026#34;) 4public class SwaggerConfig { 5 6\tprivate String version; 7\tprivate String title; 8\tprivate String description; 9\tprivate String basePackage; 10\tprivate String contactName; 11\tprivate String contactEmail; 12\t13\t@Bean 14\tpublic Docket api() { 15\treturn new Docket(DocumentationType.SWAGGER_2) 16\t.select() 17\t.apis(RequestHandlerSelectors.basePackage(basePackage)) 18\t.paths(PathSelectors.any()) 19\t.build() 20\t.directModelSubstitute(LocalDate.class, java.sql.Date.class) 21\t.directModelSubstitute(LocalDateTime.class, java.util.Date.class) 22\t.apiInfo(apiInfo()); 23\t} 24\t25\tprivate ApiInfo apiInfo() { 26\treturn new ApiInfoBuilder() 27\t.title(title) 28\t.description(description) 29\t.version(version) 30\t.contact(new Contact(contactName, null, contactEmail)) 31\t.build(); 32\t} 33 34\t/** 35... 36... 37Getters 38Setters 39... 40... 41**/ 42} 4. Final step That\u0026rsquo;s it. Now define some controllers to expose REST api endpoints and start your spring boot application. You will be able to see swagger UI something like this:-\nURL for Swagger API Docs Json - http://localhost:8080/v2/api-docs\n Download the complete source code from github\n","permalink":"https://codingnconcepts.com/spring-boot/how-to-configure-swagger/","tags":["Spring Boot REST"],"title":"How to configure swagger in spring boot"},{"categories":["Spring Boot"],"contents":"Spring boot application comes with default banner which shows up first when you start your application.\n . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.1.3.RELEASE) You can replace above banner with your self made custom banner in following two easy steps:-\n Also see how to disable spring boot default banner\n 1. Creating text banner First we need to create a custom banner for the application. Its very difficult to create a spring like banner manually. You can use any of the following tools to create banner:-\n devops.datenkollektiv.de patrorjk.com www.network-science.de  For example, I created following banner for my spring boot application\n ____ _ _ _ ____ _ / ___|___ __| (_)_ __ __ _ | \\ | | / ___|___ _ __ ___ ___ _ __ | |_ ___ | | / _ \\ / _` | | '_ \\ / _` | | \\| | | | / _ \\| '_ \\ / __/ _ \\ '_ \\| __/ __| | |__| (_) | (_| | | | | | (_| | | |\\ | | |__| (_) | | | | (_| __/ |_) | |_\\__ \\ \\____\\___/ \\__,_|_|_| |_|\\__, | |_| \\_| \\____\\___/|_| |_|\\___\\___| .__/ \\__|___/ |___/ |_| 2. Configure text banner in Spring boot application Now we have created text banner, save this in file with name banner.txt under src/main/resources. Spring Boot by default picks up the content from the banner.txt file under resources folder and display it on the startup.\nYou can also change the location or file name by configuring in application.properties or application.yml file\napplication.properties spring.banner.location=classpath:/path/to/custom-banner.txt application.yml spring: banner: location: classpath:/path/to/custom-banner.txt That\u0026rsquo;s it, Restart your application to see your self made banner in console output as below:-\n","permalink":"https://codingnconcepts.com/spring-boot/how-to-create-custom-banner/","tags":["Spring Boot Basics"],"title":"How to create and configure custom banner in spring boot"},{"categories":["Spring Boot"],"contents":"Spring Boot Application converts any command line arguments starting with --, such as --spring.profiles.active=dev to a property by default and adds them to the Spring Environment. Command line properties always take precedence over other property sources.\nIf you do not want command line properties to be added to the Environment, you can disable them from SpringBootApplication main method as follows:-\n@SpringBootApplication public class SpringBootDemoApplication { public static void main(String[] args) { SpringApplication app = new SpringApplication(SpringBootDemoApplication.class); app.setAddCommandLineProperties(false); app.run(args); } } ","permalink":"https://codingnconcepts.com/spring-boot/how-to-disable-command-line-properties/","tags":["Spring Boot Basics"],"title":"How to disable command line properties in spring boot"},{"categories":["Spring Boot"],"contents":"Spring boot web application using embedded server by default runs on port 8080. Following are the ways to change default server port from 8080 to say 9090\nFollow any of the given five ways to change server port:-\n1. application.properties server.port = 9090 2. application.yml server: port: 9090 3. command-line parameter $ java -jar -Dserver.port=9090 spring-boot-app-1.0.jar OR\n$ java -jar spring-boot-app-1.0.jar --server.port=9090 4. SpringBootApplication main method @SpringBootApplication public class SpringBootDemoApplication { public static void main(String[] args) { SpringApplication app = new SpringApplication(SpringBootDemoApplication.class); app.setDefaultProperties(Collections.singletonMap(\u0026#34;server.port\u0026#34;, \u0026#34;9090\u0026#34;)); app.run(args); } } 5. implement WebServerFactoryCustomizer interface @Component public class ServerPortCustomizer implements WebServerFactoryCustomizer\u0026lt;ConfigurableWebServerFactory\u0026gt; { @Override public void customize(ConfigurableWebServerFactory factory) { factory.setPort(9090); } } ","permalink":"https://codingnconcepts.com/spring-boot/how-to-change-server-port/","tags":["Spring Boot Basics"],"title":"How to change server port in spring boot"},{"categories":["Spring Boot"],"contents":"You would have seen below spring boot banner when starting a spring boot application\n . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.1.3.RELEASE) There are multiple ways to disable spring boot banner as follows:\n\n1. SpringBootApplication main method @SpringBootApplication public class SpringBootDemoApplication { public static void main(String[] args) throws Exception { SpringApplication app = new SpringApplication(SpringBootDemoApplication.class); app.setBannerMode(Banner.Mode.OFF); app.run(args); } } Three possible values of Banner.Mode are as follows:- OFF – Disable printing of the banner. CONSOLE – Print the banner to System.out. LOG – Print the banner to the log file  2. application.properties spring.main.banner-mode=off 3. application.yml spring: main: banner-mode:\u0026quot;off\u0026quot; 4. command-line parameter $ java -jar -Dspring.main.banner-mode=off spring-boot-app-1.0.jar OR\n$ java -jar spring-boot-app-1.0.jar --spring.main.banner-mode=off ","permalink":"https://codingnconcepts.com/spring-boot/how-to-disable-banner/","tags":["Spring Boot Basics"],"title":"How to disable default banner in spring boot"},{"categories":["Interview Questions","Spring Boot"],"contents":"Java developers are now switching from Spring Framework to Spring Boot for enterprise application development in microservice architecture. Spring Boot has become a trending topic to be asked in interviews from Java backend developers in 2020.\nI have spent quite some time to prepare a very comprehensive list of questions and answers being asked in spring boot interviews. I hope, this will benefit both freshers as well as experienced developers in their interview preparation.\nQ1. What is Spring Boot and why we need this? Spring framework has become complicated over the years with lot of features. Initial Spring project setup takes time due to following :-\n Include all required spring modules and related thirdparty libraries Take care of version compatibility of spring module with other thirdparty jars Understanding of writing spring context xml Setup tomcat and web.xml for web application deployment Build process to generate jar/war and deployment process Best practices to use spring modules  ✰ Spring boot solves all this problems and help to create stand-alone, production-grade Spring based applications that you can just run.\nSpring Boot take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.\nFeatures  Create stand-alone Spring applications Embedded server (like Tomcat, Jetty or Undertow) to avoid complexity in application (WAR files) deployment Provide opinionated \u0026lsquo;starter\u0026rsquo; dependencies to simplify your build and application configuration Automatically configure Spring and 3rd party libraries whenever possible Provide production-ready features such as metrics, health checks and externalized configuration Absolutely no code generation and no requirement for XML configuration\n  Q2. What @SpringBootApplication annotation do? @SpringBootApplication comprises of three annotations which are widely used:-\n @EnableAutoConfiguration enable Spring Boot’s auto-configuration mechanism @ComponentScan enable @Component scan on the package where the application is located @Configuration allow to register extra beans in the context or import additional configuration classes\n  Q3. What happens in the background when a spring boot application runs?  Looks for active profile and initialize properties and beans based on profile Automatically launch an embedded tomcat server if it is a web application means project has spring-boot-starter-web dependency in pom.xml  \nQ4. What is Spring Initializer? We can quickly generate spring boot project by choosing language (Java, Kotlin, Groovy), builder (Maven,, Gradle), spring boot version, project metadata (group, artifact, name, description, package name, java version) and spring boot dependencies (spring-boot-starter-web, spring-boot-starter-jpa etc.) using Spring Initializer\nQ5. What is spring-boot-starter-parent? The spring-boot-starter-parent is spring boot starter project. It can be used as a parent in our project\u0026rsquo;s pom.xml:\n\u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.2.6.RELEASE\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; parent project provide following things:-\n Default Java compiler version UTF-8 source encoding Dependency management inherited from spring-boot-dependencies POM which allow us to omit version tag for common dependencies. Resource filtering only import required thirdparty libraries based on application.properties or application.yml Default configuration for maven plugins such as maven-failsafe-plugin, maven-jar-plugin, maven-surefire-plugin, maven-war-plugin.\n  Q6. What is default embedded server and port in spring boot? How to change server port? Spring boot provides support for Tomcat, Jetty and Undertow embedded servers. Default embedded server is Tomcat and default port is 8080.\nDefault server port can be changed using server.port property or command line argument -Dserver.port.\n Also read different ways to change server port in spring boot\n You can always change the default server tomcat to another embedded server such as jetty or Undertow by excluding the dependency of tomcat spring-boot-starter-tomcat from spring-boot-starter-web and adding the dependency of other server like jetty spring-boot-starter-jetty.\n\u0026lt;!-- Exclude Spring Boot\u0026#39;s Default Tomcat Server --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;exclusions\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-tomcat\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;/exclusions\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- Add Jetty Server Dependency --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-jetty\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \nQ7. What is default logging in Sprint Boot? How to change default logging? Spring boot provides logback as default logging. If you want to change default logging to log4j2 then exclude spring-boot-starter-logging from spring-boot-starter and add spring-boot-starter-log4j2 dependency like below:\n\u0026lt;!-- Exclude Spring Boot\u0026#39;s Default Logback Logging --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;exclusions\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-logging\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;/exclusions\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- Add Log4j2 Dependency --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-log4j2\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \nQ8. How to generate deployable JAR and WAR file in Spring Boot? Spring boot provides a maven plugin spring-boot-maven-plugin to generate JAR and WAR files which we can add in pom.xml as follows:\n\u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; JAR When this plugin is in place, we get a fat executable JAR after executing maven package phase. This JAR contains all the necessary dependencies, including an embedded server. Thus, we do not need to worry about configuring an external server.\nWAR When we want to generate a WAR file, we change packaging to war and change scope of embedded server as provided in pom.xml\n\u0026lt;!-- Set packaging to war, default value is jar if not provided --\u0026gt; \u0026lt;packaging\u0026gt;war\u0026lt;/packaging\u0026gt; \u0026lt;!-- Change the scope of embedded server as provided, so that WAR doesn\u0026#39;t contain embedded server in its package --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-tomcat\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \nQ9. How to configure properties in Spring Boot? Spring Boot provides support for external configuration, allowing us to run the same application in various environments. We can use properties files, YAML files, environment variables, system properties, and command-line option arguments to specify configuration properties.\nWe can then gain access to those properties using the @Value annotation, a bound object via the @ConfigurationProperties annotation, or the Environment abstraction.\nHere are the most common sources of external configuration:\n Command-line properties: Command-line option arguments are program arguments starting with a double hyphen, such as –-server.port=8080. Spring Boot converts all the arguments to properties and adds them to the set of environment properties. Application properties: Application properties are those loaded from the application.properties file or its YAML counterpart. By default, Spring Boot searches for this file in the current directory, classpath root, or their config subdirectory. Profile-specific properties: Profile-specific properties are loaded from the application-{profile}.properties file or its YAML counterpart. The {profile} placeholder refers to an active profile. These files are in the same locations as, and take precedence over, non-specific property files.\n  Q10. What is Spring Boot Actuator? Spring Boot Actuator provides production-ready features for monitoring and managing spring boot application by exposing many useful HTTP endpoints related to application health, info etc.\nTo Enable Actuator in spring boot application, we just need to include spring-boot-starter-actuator dependency in the pom.xml file:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; Some of the most common built-in endpoints Actuator provides:\n info: Displays arbitrary application information health: Shows application health information auditevents: Exposes audit events information env: Exposes environment properties httptrace: Displays HTTP trace information metrics: Shows metrics information loggers: Shows and modifies the configuration of loggers in the application mappings: Displays a list of all @RequestMapping paths scheduledtasks: Displays the scheduled tasks in your application threaddump: Performs a thread dump\n  Q11. What is Spring Boot Devtools? Spring Boot DevTools, is a set of tools making the development process easier. To Enable DevTools in spring boot application, we just need to add a dependency to the pom.xml file:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-devtools\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; The spring-boot-devtools module is automatically disabled if the application runs in production. The repackaging of archives also excludes this module by default. Hence, it won\u0026rsquo;t bring any overhead to our final product.\nBy default, DevTools applies properties suitable to a development environment. These properties disable template caching, enable debug logging for the web group, and so on. As a result, we have this sensible development-time configuration without setting any properties.\nApplications using DevTools restart whenever a file on the classpath changes. This is a very helpful feature in development, as it gives quick feedback for modifications.\nBy default, static resources, including view templates, don\u0026rsquo;t set off a restart. Instead, a resource change triggers a browser refresh. Notice this can only happen if the LiveReload extension is installed in the browser to interact with the embedded LiveReload server that DevTools contains.\nQ12. What does it mean that Spring Boot supports relaxed binding? Relaxed binding in Spring Boot is applicable to the type-safe binding of configuration properties.\nWith relaxed binding, the key of an environment property doesn\u0026rsquo;t need to be an exact match of a property name. Such an environment property can be written in camelCase, kebab-case, snake_case, or in uppercase with words separated by underscores.\nFor example, if a property in a bean class with the @ConfigurationProperties annotation is named myProp, it can be bound to any of these environment properties: myProp, my-prop, my_prop, or MY_PROP.\n","permalink":"https://codingnconcepts.com/top-spring-boot-interview-questions/","tags":["Interview Q\u0026A","Spring Q\u0026A"],"title":"Top Spring Boot Interview Questions"},{"categories":["Interview Questions"],"contents":"Spring Framework is widely used by Java developers for enterprise application development and most frequent topic to be asked in interviews from Java backend developers in 2020.\nI have spent quite some time to prepare a very comprehensive list of questions and answers being asked in spring framework interview. I hope, this will benefit both freshers as well as experienced developers in their interview preparation.\nQ1. What is Spring Framework? The Spring Framework is a Java platform that provides comprehensive infrastructure support for developing Java applications. Spring handles the infrastructure so you can focus on your application.\nThe Spring Framework is most widely used framework across the globe which provides the best practices to use design patterns such as Singleton, Prototype, Factory, Abstract Factory, Builder, Decorator, Service Locator, and many more out of the box.\nQ2. What are the Benefits of using Spring Framework? Spring framework targets to make Java EE development easier. Here are the advantages of using it:\n Lightweight: there is a slight overhead of using the framework in development Inversion of Control (IoC): Spring container takes care of wiring dependencies of various objects, instead of creating or looking for dependent objects Aspect Oriented Programming (AOP): Spring supports AOP to separate business logic from system services IoC container: it manages Spring Bean life cycle and project specific configurations MVC framework: that is used to create web applications or RESTful web services, capable of returning XML/JSON responses Transaction management: reduces the amount of boiler-plate code in JDBC operations, file uploading, etc., either by using Java annotations or by Spring Bean XML configuration file Exception Handling: Spring provides a convenient API for translating technology-specific exceptions into unchecked exceptions\n  Q3. What are the Modules available in Spring Framework?  Spring Framework Overview\n  1. Core Container  spring-bean and spring-core modules provide the fundamental parts of the framework, including the IoC and Dependency Injection features. spring-context module builds on the solid base provided by the Core and Beans modules. It provides a way to access java object as beans and manage their life-cycle. It also supports internationalization and Java EE features such as EJB, JMX, and basic remoting. spring-expression module provides a powerful Expression Language for querying and manipulating an object graph at runtime. It is an extension of the unified expression language (unified EL) as specified in the JSP 2.1 specification. The language supports setting and getting property values, property assignment, method invocation, accessing the content of arrays, collections and indexers, logical and arithmetic operators, named variables, and retrieval of objects by name from Spring’s IoC container.  2. AOP and Instrumentation  spring-aop module is used to decouple code for cross-cutting concerns such as logging by using method-interceptors and pointcuts. spring-aspect module provide integration with AspectJ spring-instrument module provides class instrumentation support and classloader implementations to be used in certain application servers. spring-instrument-tomcat module contains Spring’s instrumentation agent for Tomcat.  3. Data Access/Integration  spring-jdbc module provides a JDBC-abstraction layer that removes the need to do tedious JDBC coding and parsing of database-vendor specific error codes. spring-tx module supports programmatic and declarative transaction management for classes that implement special interfaces and for all your POJOs (Plain Old Java Objects). spring-orm module provides integration layers for popular object-relational mapping APIs, including JPA and Hibernate. Using the spring-orm module you can use these O/R-mapping frameworks in combination with all of the other features Spring offers, such as the simple declarative transaction management feature mentioned previously. spring-oxm module provides an abstraction layer that supports Object/XML mapping implementations such as JAXB, Castor, JiBX and XStream. spring-jms module (Java Messaging Service) contains features for producing and consuming messages.  4. Web  spring-web module provides basic web-oriented integration features such as multipart file upload functionality and the initialization of the IoC container using Servlet listeners and a web-oriented application context. It also contains an HTTP client and the web-related parts of Spring’s remoting support. spring-webmvc module (also known as the Web-Servlet module) contains Spring’s model-view-controller (MVC) and REST Web Services implementation for web applications. Spring’s MVC framework provides a clean separation between domain model code and web forms and integrates with all of the other features of the Spring Framework. spring-websocket module provides WebSocket and SockJS infrastructure, including STOMP messaging support  5. Test  spring-test module supports the unit testing and integration testing of Spring components with JUnit or TestNG. It provides consistent loading of Spring ApplicationContexts and caching of those contexts. It also provides mock objects that you can use to test your code in isolation.\n  Q4. Name Some of the Design Patterns used in the Spring Framework?  Singleton Pattern: Singleton-scoped beans (default scope of spring beans) Prototype Pattern: Prototype-scoped beans Factory Pattern: BeanFactory, ApplicationContext Adapter Pattern: Spring Web and Spring MVC Proxy Pattern: Spring Aspect Oriented Programming support Template Method Pattern: RestTemplate, JmsTemplate, JdbcTemplate, JpaTemplate, HibernateTemplate Front Controller: Spring MVC DispatcherServlet Data Access Object: Spring DAO support Model View Controller: Spring MVC\n  Q5. What is Inversion of Control?  Inversion of Control (IoC) is a programming principle which inverts the flow of control compare to traditional control flow.\n A Java application consists of objects which are dependent on each other and work together to run the application. In a traditional java application, JRE instantiate classes and dependent objects at compile time hance objects are tightly coupled with each other.\nHow we can use IoC in Java application context?\nWe can use various patterns such as Factory, Abstract Factory, Builder \u0026hellip; to instantiate classes and dependent objects at runtime instead of compile time. You see that we have inverted the control from compile time to runtime, which is IoC.\nHow Spring Framework IoC works?\nThe Spring Framework IoC container provides the implementation of Factory, Abstract Factory, Builder, and many more patterns out of the box with best design practices used which you can integrate into your own application(s).\nQ6. What is Dependency Injection?  Dependency injection is a technique in which an object receives other objects that it depends on.\n Dependency Injection, is a form of IoC, is a general concept stating that you do not create your objects manually but instead describe how they should be created. An IoC container will instantiate required classes if needed.\nHow Spring Framework DI works?\nThe Spring Framework DI provides us the way to describe the object and its dependencies in the the form of XML or Java annotations. Spring IoC container takes care of wire them up together.\nQ7. What are different ways of Dependency Injection in Spring Framework? Spring framework provides three ways for dependency injection:-\n1. Constructor-Based Dependency Injection Spring use constructor to inject dependency. It is recommended to use for mandatory dependencies.\n@Configuration public class AppConfig { @Bean public Item item1() { return new ItemImpl1(); } @Bean public Store store() { return new Store(item1()); } } \u0026lt;bean id=\u0026#34;item1\u0026#34; class=\u0026#34;com.abc.ItemImpl1\u0026#34; /\u0026gt; \u0026lt;bean id=\u0026#34;store\u0026#34; class=\u0026#34;com.abc.Store\u0026#34;\u0026gt; \u0026lt;constructor-arg type=\u0026#34;ItemImpl1\u0026#34; index=\u0026#34;0\u0026#34; name=\u0026#34;item\u0026#34; ref=\u0026#34;item1\u0026#34; /\u0026gt; \u0026lt;/bean\u0026gt; 2. Setter-Based Dependency Injection Spring use setter method to inject dependency. It is recommended to use for optional dependencies.\n@Bean public Store store() { Store store = new Store(); store.setItem(item1()); return store; } \u0026lt;bean id=\u0026#34;store\u0026#34; class=\u0026#34;com.abc.Store\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;item\u0026#34; ref=\u0026#34;item1\u0026#34; /\u0026gt; \u0026lt;/bean\u0026gt; 3. Field-Based Dependency Injection Spring looks for fields annotated with @Autowired and inject them using reflection.\npublic class Store { @Autowired private Item item; } \nQ8. Differentiate between Constructor and Setter Based Dependency Injection? Constructor vs Setter Based Dependency Injection  Partial dependency injection is possible in setter-based, say we have 3 dependencies int, string, boolean, if we inject first two, then third boolean will be initialized with default value. Since constructor-based injection call the constructor, we need to pass all the arguments, and so partial injection is not possible. In case of injecting the same dependency using both setter-based and constructor-based then setter-based injection override the constructor-based dependency injection. It\u0026rsquo;s obvious because constructor is called first before setter methods in bean life cycle. It is recommended to user constructor-based injection for mandatory dependencies as it fails if you do not pass all the required dependency, whereas, setter-based injection is recommended for optional dependencies as you can inject partial dependencies. If Object A and B are dependent on each other and you are trying constructor-based injection then Spring throws ObjectCurrentlyInCreationException while instantiating Objects because A object cannot be initialized until B is ready and vice-versa. This circular dependency issue can be solved using setter-based injection.\n  Q9. How many types of IOC Containers are there in Spring Framework?   BeanFactory is an interface representing a container that provides and manages bean instances. The default implementation instantiates beans lazily when getBean() is called.\n  ApplicationContext is an interface representing a container holding all information, metadata, and beans in the application. It is built on top of BeanFactory interface but the default implementation instantiates beans eagerly when the application starts. This behavior can be overridden for individual beans.\nThree most commonly used implementation of ApplicationContext are:-\n ClassPathXmlApplicationContext loads the XML configuration file from the classpath ApplicationContext context = new ClassPathXmlApplicationContext(“bean.xml”);  FileSystemXmlApplicationContext loads the XML configuration file from the file system ApplicationContext context = new FileSystemXmlApplicationContext(“bean.xml”);  XmlWebApplicationContext loads the XML configuration file from the /WEB-INF/applicationContext.xml location by default\n    Q10. Differentiate between BeanFactory and ApplicationContext? BeanFactory vs ApplicationContext    BeanFactory ApplicationContext     It is an interface defined in org.springframework .beans.factory package It is an interface defined in org.springframework .context package   It uses Lazy initialization It uses Eager initialization by default   It explicitly provides a resource object using the syntax It creates and manages resource objects on its own   It doesn’t supports internationalization It supports internationalization   It doesn’t supports annotation based dependency It supports annotation based dependency    \nQ11. What is a Spring Bean? The Spring Beans are Java Objects that are instantiated, configured, wired, and managed by the Spring IoC container. Spring Bean definition and metadata is provided by XML configuration or Java annotations, which is used by Spring IoC container. Q12. Explain the Spring Bean Life Cycle?  Spring Bean Life Cycle\n  Spring bean follow the following sequence in its life cycle:-\n Default constructor will be called. All properties setter methods will be called. If class implements BeanNameAware then setBeanName method will be called. If class implements BeanFactoryAware then setBeanFactory method will be called. If class implements ApplicationContextAware then setApplicationContext method will be called. If class implements BeanPostProcessor then its postProcessBeforeInitialization will be called. If class implements InitializingBean then afterPropertiesSet method will be called. If class has custom init method defined then it will be called. If class implements BeanPostProcessor then its postProcessAfterInitialization will be called. If class implements DisposableBean then destroy method will be called. If class has custom destroy method defined then it will be called.  custom-init and custom-destroy example \u0026lt;bean id=\u0026#34;store\u0026#34; class=\u0026#34;com.abc.Store\u0026#34; init-method=\u0026#34;myCustomInit\u0026#34; destroy-method=\u0026#34;myCustomDestroy\u0026#34;\u0026gt; \nQ13. What are different ways to configure Spring Beans? There are three ways to define Beans configuration in Spring Framework:-\n XML-based Configuration Java-based configuration Annotation-based configuration\n  Q14. What is XML-based Spring Configuration? In XML-Based configuration, all the bean definitions and application specific configurations are defined in an XML file in a specific format. Parent XML element is \u0026lt;/beans\u0026gt; and individual bean is defined using \u0026lt;/bean\u0026gt; element.\n\u0026lt;!-- Spring Configurations --\u0026gt; \u0026lt;bean name=\u0026#34;viewResolver\u0026#34; class=\u0026#34;org.springframework.web.servlet.view.BeanNameViewResolver\u0026#34;/\u0026gt; \u0026lt;bean name=\u0026#34;jsonTemplate\u0026#34; class=\u0026#34;org.springframework.web.servlet.view.json.MappingJackson2JsonView\u0026#34;/\u0026gt; \u0026lt;bean id=\u0026#34;restTemplate\u0026#34; class=\u0026#34;org.springframework.web.client.RestTemplate\u0026#34;/\u0026gt; \u0026lt;!-- Bean Definition --\u0026gt; \u0026lt;bean id=\u0026#34;tutorial\u0026#34; class=\u0026#34;com.abc.TutorialBean\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;name\u0026#34; value=\u0026#34;CodingNConcepts\u0026#34;\u0026gt;\u0026lt;/property\u0026gt; \u0026lt;/bean\u0026gt; \nQ15. What is Java-based Spring Configuration? Spring configuration can also be defined using @Configuration annotated classes and @Bean annotated methods where,\n @Configuration annotated class represents an XML configuration file @Bean annotated methods represent the  element and responsible to provide a bean definition.  @Configuration public class AppConfig { @Bean public MyService myService() { return new MyServiceImpl(); } } is equivalent of following XML configuration\n\u0026lt;beans\u0026gt; \u0026lt;bean id=\u0026#34;myService\u0026#34; class=\u0026#34;com.abc.services.MyServiceImpl\u0026#34;/\u0026gt; \u0026lt;/beans\u0026gt; To instantiate such config, you will need the help of AnnotationConfigApplicationContext class.\npublic static void main(String[] args) { ApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class); MyService myService = ctx.getBean(MyService.class); myService.doStuff(); } or alternatively you can enable component scanning, to instantiate config automatically.\n@Configuration @ComponentScan(basePackages = \u0026#34;com.abc\u0026#34;) public class AppConfig { ... } In the example above, the com.abc package will be scanned and look for @Component or other stereotypes annotated classes, and those classes will be instantiated and managed by as Spring container automatically.\nQ16. What is Annotation-based Spring Configuration? Annotation-based container configuration is an alternative of XML-based configuration and is mostly used by developers. Rather than using XML for describing a bean wiring, the developer moves the configuration to the classes by using annotations on the class, field, or method declaration.\nBy default, annotation config is turned off. It needs to be turned on explicitly by adding \u0026lt;context:annotation-config/\u0026gt; element in Spring Configuration XML file.\n\u0026lt;beans\u0026gt; \u0026lt;context:annotation-config/\u0026gt; \u0026lt;!-- bean definitions go here --\u0026gt; \u0026lt;/beans\u0026gt; Alternatively, you can include AutowiredAnnotationBeanPostProcessor in bean configuration file.\n\u0026lt;beans\u0026gt; \u0026lt;bean class=\u0026#34;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor\u0026#34;/\u0026gt; \u0026lt;/beans\u0026gt; \nQ17. Can We Have Multiple Spring Configuration Files in One Project? Yes, in large projects, having multiple Spring configurations is recommended to increase maintainability and modularity.\nYou can load multiple Java-based configuration files:\n@Configuration @Import({MainConfig.class, SchedulerConfig.class}) public class AppConfig { Or load one XML file that will contain all other configs:\nApplicationContext context = new ClassPathXmlApplicationContext(\u0026#34;spring-all.xml\u0026#34;); And inside this XML file you\u0026rsquo;ll have:\n\u0026lt;import resource=\u0026#34;main.xml\u0026#34;/\u0026gt; \u0026lt;import resource=\u0026#34;other.xml\u0026#34;/\u0026gt; \nQ18. How to define Scope of a Spring Bean? Spring Bean\u0026rsquo;s scope can be defined either using @Scope annotation or scope attribute in XML configuration files. There are five supported scopes:\n\u0026lt;bean id=\u0026#34;mySingleton\u0026#34; class=\u0026#34;com.abc.MySingleton\u0026#34; scope=\u0026#34;singleton\u0026#34;/\u0026gt;   singleton: bean scope provides single instance per Spring IoC container. This means everytime spring application context returns same instance when we ask.\nPoints to remember about Singleton bean:-\nSingleton is the default bean scope\nSingleton beans are not thread safe\n  prototype: bean scope creates a new instance each and every time a bean is requested from spring container\n  request: bean scope creates a new instance on every incoming HTTP-request.\n  session: bean scope creates a new instance per HTTP-session.\n  global-session: bean scope creates a new instance per Global HTTP-session. It is useful for Portlet based applications where bean is used to store global info used by all portlets. This scope works same as session scope in Servlet based applications.\n  The last three are available only if the users use a web-aware ApplicationContext.\nQ19. What are inner beans in Spring? In Spring framework, whenever a bean is used for only one particular property, it is advised to declare it as an inner bean. The inner bean is supported both in setter injection property and constructor injection constructor-arg.\nFor example, let’s say we have Store class having reference of Item class. In our application, we will be creating only one instance of Item class, and use it inside Store.\npublic class Store { private Item item; //Setters and Getters } public class Item { private String name; private long quantity; //Setters and Getters } Now inner bean declaration will look like this:\n\u0026lt;bean id=\u0026#34;StoreBean\u0026#34; class=\u0026#34;com.abc.Store\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;item\u0026#34;\u0026gt; \u0026lt;!-- This is inner bean --\u0026gt; \u0026lt;bean class=\u0026#34;com.abc.Item\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;name\u0026#34; value=\u0026#34;Fruits\u0026#34;\u0026gt;\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026#34;quantity\u0026#34; value=\u0026#34;100\u0026#34;\u0026gt;\u0026lt;/property\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/bean\u0026gt; \nQ20. Are Singleton beans thread safe in Spring Framework? Spring framework does not do anything under the hood concerning the multi-threaded behavior of a singleton bean. It is the developer’s responsibility to deal with concurrency issue and thread safety of the singleton bean.\nWhile practically, most spring beans have no mutable state (e.g. Service and DAO clases), and as such are trivially thread safe. But if your bean has mutable state (e.g. View Model Objects), so you need to ensure thread safety. The most easy and obvious solution for this problem is to change bean scope of mutable beans from singleton to prototype.\nQ21. How can you inject a Java Collection in Spring? Give example? Spring offers four types of collection configuration elements which are as follows:\n \u0026lt;list\u0026gt; : This helps in wiring ie injecting a list of values, allowing duplicates. \u0026lt;set\u0026gt; : This helps in wiring a set of values but without any duplicates. \u0026lt;map\u0026gt; : This can be used to inject a collection of name-value pairs where name and value can be of any type. \u0026lt;props\u0026gt; : This can be used to inject a collection of name-value pairs where the name and value are both Strings.  Let’s see example of each type.\n\u0026lt;beans\u0026gt; \u0026lt;!-- Definition for javaCollection --\u0026gt; \u0026lt;bean id=\u0026#34;javaCollection\u0026#34; class=\u0026#34;com.abc.JavaCollection\u0026#34;\u0026gt; \u0026lt;!-- java.util.List --\u0026gt; \u0026lt;property name=\u0026#34;customList\u0026#34;\u0026gt; \u0026lt;list\u0026gt; \u0026lt;value\u0026gt;India\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;Singapore\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;USA\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;UK\u0026lt;/value\u0026gt; \u0026lt;/list\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- java.util.Set --\u0026gt; \u0026lt;property name=\u0026#34;customSet\u0026#34;\u0026gt; \u0026lt;set\u0026gt; \u0026lt;value\u0026gt;India\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;Singapore\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;USA\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;UK\u0026lt;/value\u0026gt; \u0026lt;/set\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- java.util.Map --\u0026gt; \u0026lt;property name=\u0026#34;customMap\u0026#34;\u0026gt; \u0026lt;map\u0026gt; \u0026lt;entry key=\u0026#34;1\u0026#34; value=\u0026#34;India\u0026#34;/\u0026gt; \u0026lt;entry key=\u0026#34;2\u0026#34; value=\u0026#34;Singapore\u0026#34;/\u0026gt; \u0026lt;entry key=\u0026#34;3\u0026#34; value=\u0026#34;USA\u0026#34;/\u0026gt; \u0026lt;entry key=\u0026#34;4\u0026#34; value=\u0026#34;UK\u0026#34;/\u0026gt; \u0026lt;/map\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- java.util.Properties --\u0026gt; \u0026lt;property name=\u0026#34;customProperies\u0026#34;\u0026gt; \u0026lt;props\u0026gt; \u0026lt;prop key=\u0026#34;admin\u0026#34;\u0026gt;admin@myorg.com\u0026lt;/prop\u0026gt; \u0026lt;prop key=\u0026#34;support\u0026#34;\u0026gt;support@myorg.com\u0026lt;/prop\u0026gt; \u0026lt;/props\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;/beans\u0026gt; \nQ22. How to inject a java.util.Properties into a Spring Bean? You can initialize properties using \u0026lt;props\u0026gt; as below.\n\u0026lt;bean id=\u0026#34;adminUser\u0026#34; class=\u0026#34;com.abc.common.Customer\u0026#34;\u0026gt; \u0026lt;!-- java.util.Properties --\u0026gt; \u0026lt;property name=\u0026#34;emails\u0026#34;\u0026gt; \u0026lt;props\u0026gt; \u0026lt;prop key=\u0026#34;admin\u0026#34;\u0026gt;admin@myorg.com\u0026lt;/prop\u0026gt; \u0026lt;prop key=\u0026#34;support\u0026#34;\u0026gt;support@myorg.com\u0026lt;/prop\u0026gt; \u0026lt;/props\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/bean\u0026gt; Alternatively you can use \u0026lt;util:properties\u0026gt; to define properties from a properties file, and use bean reference for setter injection.\n\u0026lt;util:properties id=\u0026#34;emails\u0026#34; location=\u0026#34;classpath:com/foo/emails.properties\u0026#34; /\u0026gt; \nQ23. Explain Spring Bean Autowiring? Autowiring allows the Spring container to automatically resolve dependencies between collaborating beans by inspecting the beans that have been defined. Spring Bean Autowiring can be done in three ways:-\n XML-based configuration using \u0026lt;/bean\u0026gt; \u0026lt;bean id=\u0026#34;store\u0026#34; class=\u0026#34;com.abc.Store\u0026#34; autowire=\u0026#34;byType\u0026#34; /\u0026gt;  Annotation-based configuration using @Autowired on properties, setter-methods or constructor public class Store { @Autowired private Item item; }  Java-based configuration using @Bean @Bean(autowire = Autowire.BY_TYPE) public class Store { private Item item; public setItem(Item item){ this.item = item; } }   \nQ24. Explain different Modes of Spring Bean Autowiring? There are five autowiring modes in spring framework. Lets discuss them one by one.\n no: This option is default for spring framework and it means that autowiring is OFF. You have to explicitly set the dependencies using tags in bean definitions. byName: This option enables the dependency injection based on bean names. When autowiring a property in bean, property name is used for searching a matching bean definition in configuration file. If such bean is found, it is injected in property. If no such bean is found, a error is raised. byType: This option enables the dependency injection based on bean types. When autowiring a property in bean, property’s class type is used for searching a matching bean definition in configuration file. If such bean is found, it is injected in property. If no such bean is found, a error is raised. constructor: Autowiring by constructor is similar to byType, but applies to constructor arguments. In autowire enabled bean, it will look for class type of constructor arguments, and then do a autowire by type on all constructor arguments. Please note that if there isn’t exactly one bean of the constructor argument type in the container, a fatal error is raised. autodetect: Autowiring by autodetect uses either of two modes i.e. constructor or byType modes. First it will try to look for valid constructor with arguments, If found the constructor mode is chosen. If there is no constructor defined in bean, or explicit default no-args constructor is present, the autowire byType mode is chosen.\n  Q25. Explain @Required annotation with example? This annotation simply indicates that the affected bean property must be populated at configuration time, through an explicit property value in a bean definition or through autowiring. The container throws BeanInitializationException if the affected bean property has not been populated.\nThis annotation is used to overcome the problem arise with setter-based injection where spring container doesn\u0026rsquo;t warn or throw any exception if all the required properties are not populated.\nWe can use @Required annotation over setter-method of bean property in class file to indicate it is a mandatory property,\npublic class Store { private Item item; public Item getItem() { return item; } @Required public void setItem(Item item) { this.item = item; } } \nQ26. Explain @Autowired annotation with example? This annotation provides more fine-grained control over where and how autowiring should be accomplished. The @Autowired annotation can be used to autowire bean on the setter method just like @Required annotation, constructor, a property or methods with arbitrary names and/or multiple arguments.\nE.g. You can use @Autowired annotation on setter methods to get rid of the \u0026lt;property\u0026gt; element in XML configuration file. When Spring finds an @Autowired annotation used with setter methods, it tries to perform byType autowiring on the method.\nYou can apply @Autowired to constructors as well. A constructor @Autowired annotation indicates that the constructor should be autowired when creating the bean, even if no \u0026lt;constructor-arg\u0026gt; elements are used while configuring the bean in XML file.\npublic class TextEditor { private SpellChecker spellChecker; @Autowired public TextEditor(SpellChecker spellChecker){ System.out.println(\u0026#34;Inside TextEditor constructor.\u0026#34; ); this.spellChecker = spellChecker; } public void spellCheck(){ spellChecker.checkSpelling(); } } And it’s configuration without constructor arguments.\n\u0026lt;beans\u0026gt; \u0026lt;context:annotation-config/\u0026gt; \u0026lt;!-- Definition for textEditor bean without constructor-arg --\u0026gt; \u0026lt;bean id=\u0026#34;textEditor\u0026#34; class=\u0026#34;com.howtodoinjava.TextEditor\u0026#34;\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;!-- Definition for spellChecker bean --\u0026gt; \u0026lt;bean id=\u0026#34;spellChecker\u0026#34; class=\u0026#34;com.howtodoinjava.SpellChecker\u0026#34;\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;/beans\u0026gt; \nQ27. Explain @Qualifier annotation with example? There may be a situation when you create two or more beans of the same type and want to wire only one of them with a property, in such case you can use @Qualifier annotation along with @Autowired to remove the confusion by specifying which exact bean will be wired.\nSee below example, it will autowire a item bean into Store class,\npublic class Store { @Autowired private Item item; } And we have two bean definitions for Item class.\n\u0026lt;bean id=\u0026#34;store\u0026#34; class=\u0026#34;com.abc.Store\u0026#34; /\u0026gt; \u0026lt;bean id=\u0026#34;itemA\u0026#34; class=\u0026#34;com.abc.Item\u0026#34; \u0026gt; \u0026lt;property name=\u0026#34;name\u0026#34; value=\u0026#34;Fruit\u0026#34; /\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;bean id=\u0026#34;itemB\u0026#34; class=\u0026#34;com.abc.Item\u0026#34; \u0026gt; \u0026lt;property name=\u0026#34;name\u0026#34; value=\u0026#34;Biscuits\u0026#34; /\u0026gt; \u0026lt;/bean\u0026gt; If you run the above example spring will throw an exception because it doesn\u0026rsquo;t know which bean to autowire in Store class, itemA or itemB?\nCaused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [com.abc.Item] is defined: expected single matching bean but found 2: [itemA, itemB] We can use @Qualifier annotation to wire specific itemA bean like this:-\npublic class Store { @Autowired @Qualifier(\u0026#34;itemA\u0026#34;) private Item item; } \nQ28. What are Spring stereotype annotations? @component vs @service vs @repository vs @controller All the stereotype annotations are used at annotate classes auto-detection and bean configuration. There are mainly 4 types of stereotypes:-\n @Component is a generic stereotype to annotate classes at any layer @Controller is used to annotate classes at API layer, mainly used in Spring MVC applications to define API endpoint and used in conjunction with @RequestMapping annotation which is used to annotate method to maps the request URL. @Service is used to annotate classes at the service layer @Repository is used to annotate classes at the persistence layer, which will act as a database repository\n  Q29. What are JSR-250 annotations?  @PostConstruct − This annotation can be used as an alternate of initialization callback. @PreDestroy − This annotation can be used as an alternate of destruction callback. @Resource − This annotation can be used on fields or setter methods. The @Resource annotation takes a \u0026lsquo;name\u0026rsquo; attribute which will be interpreted as the bean name to be injected. You can say, it follows by-name autowiring semantics.\n  Q30. What happens when you define two beans with same id or same name ? beans.xml \u0026lt;bean id=\u0026#34;foo\u0026#34; name=\u0026#34;kingBean\u0026#34; class=\u0026#34;com.abc.Foo\u0026#34; /\u0026gt; \u0026lt;bean id=\u0026#34;bar\u0026#34; name=\u0026#34;kingBean\u0026#34; class=\u0026#34;com.abc.Bar\u0026#34; /\u0026gt; When you use two bean with same name (or same id) in single configuration file then BeanDefinitionParsingException – Bean name ‘kingBean’ is already used in this file – is thrown by the container when the configuration is read.\nWhere things get a little interesting is when bean definitions are spread out across many configuration files. Say, for example, the foo bean is defined in beans1.xml while the bar bean is defined in beans2.xml.\nbeans1.xml \u0026lt;bean id=\u0026#34;foo\u0026#34; name=\u0026#34;kingBean\u0026#34; class=\u0026#34;com.abc.Foo\u0026#34; /\u0026gt; beans2.xml \u0026lt;bean id=\u0026#34;bar\u0026#34; name=\u0026#34;kingBean\u0026#34; class=\u0026#34;com.abc.Bar\u0026#34; /\u0026gt; Now, if the id or name of either bean (in this case the kingBean name) is non-unique, you surprisingly get no exception thrown by the container!!!\nFileSystemXmlApplicationContext context = new FileSystemXmlApplicationContext( new String[] { \u0026#34;beans2.xml\u0026#34;, \u0026#34;beans1.xml\u0026#34; }); // works fine Foo f = (Foo) context.getBean(\u0026#34;kingBean\u0026#34;); The documentation says \u0026ldquo;the last bean definition with the same id (or name) wins, respectively to the order of the xml files.\u0026quot; In the example Java code above, beans1.xml is loaded by the container after beans2.xml. Therefore, beans1.xml wins in identifying the bean with the name kingBean. Had the files been read in reverse order, then kingBean would identify a Bar object.\nyou can always turn off this default behavior and make cause bean ids/names to be unique across all configurations of the container. Look into the DefaultListableBeanFactory for how to the setAllowBeanDefinitionOverriding() method.\nQ31. Explain Spring MVC Workflow?  Spring MVC Workflow\n  When you request from spring MVC application then it follow the following sequence:-\n1. Dispatcher Servlet Dispatcher Servlet which is also know as front controller is the core of Spring MVC Workflow and responsible for handling all HTTP request and response. If you are using tomcat as web application server then Dispatcher Servlet need to define in wb.xml\nThe DispatcherServlet receives the entry of handler mapping from the configuration file and forwards the request to the controller. The controller then returns an object of Model And View. The DispatcherServlet checks the entry of view resolver in the configuration file and calls the specified view component.\n2. Handler Mapping Handler Mapping is a configuration for url and controller mapping.\nFollowing are the different implementation of HandlerMapping:-\n1) BeanNameUrlHandlerMapping This is a default spring handler mapping. Name of bean considered as URL.\n\u0026lt;bean name=\u0026#34;/welcome.htm\u0026#34; class=\u0026#34;com.abc.controller.WelcomeController\u0026#34;/\u0026gt; 2) SimpleUrlHandlerMapping Map with key value pair of URL and controller bean name.\n\u0026lt;bean class=\u0026#34;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;mappings\u0026#34;\u0026gt; \u0026lt;props\u0026gt; \u0026lt;prop key=\u0026#34;/welcome.htm\u0026#34;\u0026gt;welcomeController\u0026lt;/prop\u0026gt; \u0026lt;/props\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;bean id=\u0026#34;welcomeController\u0026#34; class=\u0026#34;com.abc.controller.WelcomeController\u0026#34; /\u0026gt; 3) DefaultAnnotationHandlerMapping This is the most popular implementation of HandlerMapping where each class annotated with @Controller maps one or more request to methods that process and execute the request with provided inputs.\n@RequestMapping annotation is used at both class and method level to map the URL. In addition to simple use cases, we can use it for mapping of HTTP headers, binding parts of the URI with @PathVariable, and working with URI parameters and the @RequestParam annotation.\npackage com.abc.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.servlet.ModelAndView; @Controller @RequestMapping(\u0026#34;/welcome\u0026#34;) public class WelcomeController{ @RequestMapping(method = RequestMethod.GET) public ModelAndView helloWorld(){ ModelAndView model = new ModelAndView(\u0026#34;WelcomePage\u0026#34;); model.addObject(\u0026#34;msg\u0026#34;, \u0026#34;hello world\u0026#34;); return model; } } 3. Controller Controller calls service layer to execute business logic and return ModelAndView, which is wrapper for model object and view name.\nPopular Controller Types:\nAbstractController\nAbstractCommandController\nSimpleFormController\n4. View Resolver View Resolver look for appropriate view JSP/HTML based on view name.\nPopular Implementations of ViewResolver:\nInternalResourceViewResolver\n5. View Dispatcher Servlet return the view JPS/HTML component to user\nQ32. Differentiate between @Controller and @RestController? @Controller vs @RestController Even though both are used to indicate that a Spring bean is a Controller in Spring MVC setup, @RestController is better when you are developing RESTful web services using Spring MVC framework. It\u0026rsquo;s a combination of @Controller + @ResponseBody annotation which allows the controller to directly write the response and bypassing the view resolution process, which is not required for RESTful web service.\nIt also instructs DispatcherServlet to use different HttpMessageConverters to represent the response in the format client is expecting e.g. HttpMessageJackson2Convert to represent response in JSON format and JAXB based message converts to generate XML response.\nQ33. What Is Spring Security? Spring Security is a separate module of the Spring framework that focuses on providing authentication and authorization methods in Java applications. It also takes care of most of the common security vulnerabilities such as CSRF attacks.\nTo use Spring Security in web applications, you can get started with a simple annotation: @EnableWebSecurity.\nQ34. What Is Aspect-Oriented Programming? Aspect-oriented programming or AOP is a programming technique which allows programmers to modularize crosscutting concerns or behavior that cuts across the typical divisions of responsibility. Examples of cross-cutting concerns can be logging and transaction management. The core of AOP is an aspect. It encapsulates behaviors that can affect multiple classes into reusable modules. Q35. What Are Aspect, Advice, Pointcut, and Joinpoint in Aop?  Aspect: a class that implements cross-cutting concerns, such as transaction management Advice: the methods that get executed when a specific JoinPoint with matching Pointcut is reached in the application Pointcut: a set of regular expressions that are matched with JoinPoint to determine whether Advice needs to be executed or not JoinPoint: a point during the execution of a program, such as the execution of a method or the handling of an exception\n  Q36. What are the different types of Advices? Different types of Advices in Spring AOP are:\n Before: These types of advices execute before the joinpoint methods and are configured using @Before annotation mark. After returning: These types of advices execute after the joinpoint methods completes executing normally and are configured using @AfterReturning annotation mark. After throwing: These types of advices execute only if joinpoint method exits by throwing an exception and are configured using @AfterThrowing annotation mark. After (finally): These types of advices execute after a joinpoint method, regardless of the method’s exit whether normally or exceptional return and are configured using @After annotation mark. Around: These types of advices execute before and after a joinpoint and are configured using @Around annotation mark.\n  Q37. What is cross-cutting concerns in Spring AOP? The concern is the behavior we want to have in a particular module of an application. It can be defined as a functionality we want to implement.\nThe cross-cutting concern is a concern which is applicable throughout the application. This affects the entire application. For example, logging, security and data transfer are the concerns needed in almost every module of an application, thus they are the cross-cutting concerns.\n Q38. What is Weaving? According to the official docs, weaving is a process that links aspects with other application types or objects to create an advised object. This can be done at compile time, load time, or at runtime. Spring AOP, like other pure Java AOP frameworks, performs weaving at runtime.\nQ39. What is Spring Dao? Spring Data Access Object is Spring\u0026rsquo;s support provided to work with data access technologies like JDBC, Hibernate, and JPA in a consistent and easy way.\nThis also allows to switch between the persistence technologies easily. It also allows you to code without worrying about catching exceptions that are specific to each of these technology.\nQ40. What is Spring Jdbctemplate Class and How to Use it? The Spring JDBC template is the primary API through which we can access database operations logic that we’re interested in:\n creation and closing of connections executing statements and stored procedure calls iterating over the ResultSet and returning results  To use it, we\u0026rsquo;ll need to define the simple configuration of DataSource:\n@Configuration @ComponentScan(\u0026#34;com.abc.jdbc\u0026#34;) public class SpringJdbcConfig { @Bean public DataSource mysqlDataSource() { DriverManagerDataSource dataSource = new DriverManagerDataSource(); dataSource.setDriverClassName(\u0026#34;com.mysql.jdbc.Driver\u0026#34;); dataSource.setUrl(\u0026#34;jdbc:mysql://localhost:3306/springjdbc\u0026#34;); dataSource.setUsername(\u0026#34;guest_user\u0026#34;); dataSource.setPassword(\u0026#34;guest_password\u0026#34;); return dataSource; } } \nQ41. How Would You Enable Transactions in Spring and What Are Their Benefits? There are two distinct ways to configure Transactions – with annotations or by using Aspect Oriented Programming (AOP) – each with their advantages.\nThe benefits of using Spring Transactions, according to the official docs, are:\n Provide a consistent programming model across different transaction APIs such as JTA, JDBC, Hibernate, JPA, and JDO Support declarative transaction management Provide a simpler API for programmatic transaction management than some complex transaction APIs such as JTA Integrate very well with Spring\u0026rsquo;s various data access abstractions\n  Q42. What is Spring Boot? Spring boot solves all this problems that comes with Spring Framework and help to create stand-alone, production-grade Spring based applications that you can just run.\n Follow the post for Top Spring Boot Interview Questions\n \nSource  Spring 5.0.0.RC3 Official Documentation Baeldung Spring Interview Questions Edureka Spring Interview Questions HowToDoInJava Spring Interview Questions ","permalink":"https://codingnconcepts.com/top-spring-interview-questions/","tags":["Interview Q\u0026A","Spring Framework","Spring Q\u0026A"],"title":"Top Spring Interview Questions"},{"categories":["Interview Questions"],"contents":"These CSS and CSS3 interview questions are based on my personal interview experience and feedback from other interviewees. Keep following this post for regular updates.\nQ1. What do you understand from CSS? CSS stands for Cascading Style Sheet which is used to beautify and paint HTML elements. It tells the browser how HTML elements should be displayed.\nWhat makes it Cascading is that styles defined lower down the document or with higher specificity (which we’ll cover further down) override those that came before. This means you can have generic styles, followed by rules that style more specific elements on the page.\n\nQ2. What are different ways to apply CSS styles? You will, of course, need to know how to add CSS to a page, and there are three main ways:\nUsing the inline style attribute on an element \u0026lt;div style=\u0026#34;width:100%; padding:10px; font-size:1.2em; text-align:center;\u0026#34;\u0026gt; CSS Tutorial \u0026lt;/div\u0026gt; Using a \u0026lt;style\u0026gt; block in the  section of your HTML \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; div { width: 100%; padding: 10px; } .heading { font-size: 1.2em; text-align: center; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;heading\u0026#34;\u0026gt;CSS Tutorial\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; Loading an external CSS file using the  tag \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/styles.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;heading\u0026#34;\u0026gt;CSS Tutorial\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; /css/styles.css\ndiv { width: 100%; padding: 10px; } .heading { font-size: 1.2em; text-align: center; } The first two are useful but you’ll almost always be loading external CSS files. It’s more maintainable to keep your styles in separate files, not to mention it’s a nice separation of concerns.\nQ3. What are different ways to use CSS selectors? There are mainly three ways to use CSS selector to specify element to apply CSS.\n Element Selector use the HTML element tag name in css like div Class Selector define a Class using class attribute on an element and use like .heading Id Selector define an Id using id attribute on an element and use like #title Universal Selector used as a wildcard character * applied to all the elements on the page. Group Selector multiple selectors using comma separated Elements, Classes, Ids.  \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; /* Element Selector */ div { width: 100%; padding: 10px; } /* Class Selector */ .heading { font-size: 1.2em; text-align: center; } /* Id Selector */ #title { color: red; } /* Universal Selector */ * { color: black; font-family: Arial, sans-serif; } /* Group Selector */ h1, h2, .heading, #title { text-align: center; color: blue; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;title\u0026#34; class=\u0026#34;heading\u0026#34;\u0026gt;CSS Tutorial\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \nQ4. What are different ways to specify element position using CSS selector?  div, p - Selects all \u0026lt;div\u0026gt; elements and all \u0026lt;p\u0026gt; elements div p - Selects all \u0026lt;p\u0026gt; elements that are anywhere inside a \u0026lt;div\u0026gt; element div \u0026gt; p - Selects all \u0026lt;p\u0026gt; elements where the immediate parent is a \u0026lt;div\u0026gt; element div + p - Selects all \u0026lt;p\u0026gt; elements that are placed immediately after a \u0026lt;div\u0026gt; element div ~ p - Selects all \u0026lt;p\u0026gt; elements that are anywhere preceded by a \u0026lt;div\u0026gt; element\n  Q5. What are pseudo elements and what are they used for? Pseudo elements are used to style particular parts of an element, rather than the whole thing. For example, you can use it to style the first line or first letter of a paragraph, text you’ve selected, or you can use it to insert text or shapes before or after an element.\nThey always start with a double colon - although a single colon is still allowed for backwards compatibility - and they look like this:\np::first-line { ... } span::first-letter { ... } ::selection { ... } .header::after { ... } .tooltip::before { ... } \nQ6. What are pseudo classes and what are they used for? Pseudo classes are similar to pseudo elements, but instead of styling a part of an element, they apply styles when an element is in a certain state. For example, you could style a button differently based on whether the user has their mouse pointer over it, or when they click the button.\nAnother common use case is to style only certain occurrences of elements in a row. For example, styling the first tab in a series of tabs, or every second tab.\nThey all start with a single colon and look like this:\nlink:hover { ... } .link:active { ... } .tab:first-child { ... } .tab:last-child { ... } .avatar:nth-child(2n) { ... } \nQ7. Do you know about CSS Box Model? How do box-sizing CSS works? The CSS box model is essentially a box that wraps around every HTML element such as div. It consists of following:-\n Content - The content of the box, where text and images appear Padding - A transparent area outside the content Border - A border that goes around the padding and content Margin - A transparent area outside the border  Margin Border Padding Content     CSS box model example A typical css to create a box model\ndiv { width: 100px; height: 100px; margin: 20px; border: 5px solid red; padding: 10px; } CSS Tricks to apply margin and padding Single value margin and padding applies to all sides top, right, bottom and left. Following are different ways to apply margin or padding to individual side or in pairs or in groups.\n/* same padding on all 4 sides */ div { padding: 10px; } /* padding in pair, top/bottom (10px), left/right (20px) */ div { padding: 10px 20px; } /* three values padding, top (10px), bottom (20px) and left/right (30px) */ div { padding: 10px 20px 30px; } /* individual padding , in TRBL (top-right-bottom-left) order */ div { /* top right bottom left */ padding: 10px 20px 30px 40px; } /* individual padding css */ div { padding-top: 10px; padding-right: 20px; padding-bottom: 30px; padding-left: 40px; } CSS box-sizing By default width and height property of a box only includes content and do not consider border and padding. This is default css box-sizing:content-box. In this case actual width of box would become 100px (width) + 10px (padding) + 5px (border) = 115px;\nIf you do not want padding and border to change the width of the box, box-sizing:border-box is your css. This css adjust the width of the content to to include padding and border in same width. In this case actual width of the box would remain 100px (width) and content width will be adjusted to 100px (width) - 10px (padding) - 5px (border) = 85px;\nQ8. What are the CSS precedence rules and CSS specificity? CSS specificity is the set of rules applied to determine which style is applied to an element. Order of css specificity from highest to lowest is as follows:-\n A css rule with !important always takes precedence. If element is having inline style ( element style attribute ) overrides all other styles (1,0,0,0) css selector using element id (element id attribute) (0,1,0,0) css selector using class, pseudo class or attribute (0,0,1,0) css selector using element name (for e.g. h1, p, div) (0,0,0,1) css selector appear later in the code override earlier one if both have the same specificity  Good read to understand how to calculate specificity\nShould you use !importance As we know now that !importance has highest specificity, nothing can beat that, apart from another !importance. Sometimes there is no way escaping this one when you are struggling with specificity but then it makes debugging difficult. You should avoid it wherever possible. Q9. Difference between visibility:hidden and display:none ?    visibility:hidden; display:none;     Hides the element Hides the element   Occupy Space Do not occupy space   Affect the layout Do not affect the layout    \nQ10. How would you use media query in CSS3 ? We can not avoid media queries in responsive web applications. We can provide different styling for different devices such as Mobile, Tablet, Laptop and Desktop using media queries.\nThe most common approach is mobile first where all styles targeted for mobile devices and we progressively change styles for other devices using media queries.\nCSS media query example /* Mobile */ body { font-size: 1em; } /* Tablet */ @media only screen and (min-width: 768px) { body { font-size: 1.25em; } } /* Desktop and Laptop */ @media only screen and (min-width : 1224px) { body { font-size: 1.5em; } } /* Large Screen */ @media only screen and (min-width : 1824px) { body { font-size: 1.75em; } } \nQ11. What is the difference between inline, inline-block and block display?     inline inline-bock block     Start on a new line No No Yes   Can set hight and width No Yes Yes   Can set left/right margin \u0026amp; padding Yes Yes Yes   Can set top/bottom margin \u0026amp; padding No Yes Yes    Example  .item { background-color: #c33; padding: 2px; margin: 2px; color: white; border: 1px solid black; } .inline-block { display: inline-block; height: 50px; margin-top: 10px; line-height: 40px; } .block { height: 50px; margin-top: 10px; line-height: 40px; text-align: center; } .title { text-align: center; } .box { flex: 1; margin-right: 10px; background:#f5f5f5; border: 1px solid black; }  display:inline; inline inline inline  display:inline-block; inline-block inline-block inline-block  display:block; block block   \nQ12. What do you understand from Static, Relative, Absolute and Fixed position?  Static - this is the default value, the element is positioned according to normal flow of the page. Relative - the element is positioned relative to its normal position. Absolute - the element is positioned absolutely to its first positioned parent. Fixed - the element is positioned related to the browser window. Sticky - the element is positioned based on the user\u0026rsquo;s scroll position.\n  Q13. Which unit of measurement you use for font-size? Something that has almost always come up for me is the way you size your text, mainly focused on the units you use. You can of course use pixels (px), but there’s also em, rem, %, vs and vh, along with a few others. Some people still don’t like using pixels, but browsers have improved and they’re generally handled pretty well.\nDefining your font sizes in em allows you to change the size of your text based on the size defined at a higher level. For example, if a container has specified a font-size of 2em, and you specify a font-size of 2em on an element inside that container, that element has an effective font-size of 4em! However, this can be a little confusing as you might not always see the size you expect!\n.container { font-size: 2em; } .container \u0026gt; p { font-size: 2em; /* this is 2em x 2em = 4em! */ } The rem unit was created to remedy that confusion. It scales well in the browser, just like em and px, but it uses a base size. From that, all further rem values are calculated. For example, if your base rem value is equal to 16px, then 1rem will always be equal to 16px, 2rem will always be equal to 32px, and so on.\nNote: While I’ve explained these units using font-sizes, the same rules apply to any dimensions where you use px, em or rem.\n Also read CSS units for font-size: px, em and rem\n \nQ14. Do you know about Normalize CSS and Reset CSS and their differences? Each browser like Chrome, Firefox, IE has their own default styling for HTML elements also known as browser\u0026rsquo;s user agent styles.If you render a pure HTML page like below without any styling, page will look different in different browser as their user agent styling is applied.\n\u0026lt;h1\u0026gt;H1 Title\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;H2 Title\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;H3 Title\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;H4 Title\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;H5 Title\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;H6 Title\u0026lt;/h6\u0026gt; \u0026lt;a href=\u0026#34;https://codingnconcepts.com/\u0026#34;\u0026gt;Coding N Concepts\u0026lt;/a\u0026gt; \u0026lt;code\u0026gt;CSS\u0026lt;/code\u0026gt; Reset CSS Reset CSS resets all the default styles of browser. It says we don\u0026rsquo;t need browser\u0026rsquo;s default at all, we will define as per our need. One of the example is Eric Meyer’s reset.css\nreset.css /* http://meyerweb.com/eric/tools/css/reset/ v2.0 | 20110126 License: none (public domain) */ html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video { margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline; } /* HTML5 display-role reset for older browsers */ article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section { display: block; } body { line-height: 1; } ol, ul { list-style: none; } blockquote, q { quotes: none; } blockquote:before, blockquote:after, q:before, q:after { content: \u0026#39;\u0026#39;; content: none; } table { border-collapse: collapse; border-spacing: 0; } Normalize CSS Normalize CSS is an alternate for CSS reset. Instead of wiping out all styles, provides cross-browser consistency in the default styling of HTML elements.\nThat means, that if we look at the W3C standards of the styles applied by the browsers, and there is an in inconsistency in one of the browsers, the normalize.css styles will fix the browser style that has the difference. Some part of Necolas normalize.css\nnormalize.css /* Add the correct font weight in Chrome, Edge, and Safari. */ b, strong { font-weight: bolder; } /* Remove the border on images inside links in IE 10. */ img { border-style: none; } /* Correct the padding in Firefox. */ fieldset { padding: 0.35em 0.75em 0.625em; } \nQ15. What are CSS sprites and why would use them? If a web page has a large number of images that take a longer time to load because each image separately sends out an HTTP request. The concept of CSS sprites is used to reduce the loading time for a web page because it combines the various small images into one image. It reduces the number of HTTP requests and hence the loading time.\nSay you have to show flags of 100 countries on web page, instead of making 100 HTTP requests from browser, combine all the flags in one image known as sprite flags.png and load them in single HTTP request. Each flag will be shown on the HTML page by displaying a part of sprite image using background-position CSS property.\nCSS Sprite Example .flags-canada, .flags-london, .flags-usa { background-image: url(\u0026#39;../images/flags.png\u0026#39;); background-repeat: no-repeat; } .flags-canada { height: 128px; background-position: -5px -5px; } .flags-usa { height: 135px; background-position: -5px -143px; } .flags-london { height: 147px; background-position: -5px -288px; } \nQ16. What is the z-index in CSS? The z-index helps to specify the stack order of positioned elements that may overlap one another.\nHigher the z-index of an element means,\n higher stack order, more visibility, cover elements with smaller z-index if overlapping.  CSS Syntax z-index: auto | number | initial | inherit Property Values  auto: Sets the stack order equal to its parents. This is default. number: Can have zero, positive or negative number. Higher the number, higher stack order. initial: Sets this property to its default value. inherit: Inherits this property from its parent element. ","permalink":"https://codingnconcepts.com/top-css-interview-questions/","tags":["Interview Q\u0026A","CSS Q\u0026A"],"title":"Top CSS Interview Questions"},{"categories":["Interview Questions","Java"],"contents":"Comprehensive List of Java Interview Questions based on my personal interview experience over the last few years. Sequence of Questions in each section are in the order of recent interview trends. Keep following this post link for regular updates.\n1. Java Design Patterns Q1. What is Singleton Pattern and how do you implement it? This is one of the most commonly asked question in interviews. Interviewer starts this question asking about design patterns. Candidate generally answers singleton and factory patterns. Then interviewer asks to write a singleton class. You should learn how to create a singleton class with private constructor, static getInstance method, double checked locking. You should also learn enum based singleton class. Follow up questions in singleton pattern are as follows:\n How to make singleton class thread safe? How to prevent deserialization to create new object of singleton class? How to prevent cloning and reflection to create new object of singleton class?   Read Singleton Design Pattern Using Java for singleton class implementation and answers of above questions.\n \nQ2. What is Immutable Object? How do you write an Immutable Class? If you know the internal implementation of String class and know how String is immutable, you can answer it easily. Here are few points to remember:-\n Declare the class as final so it can’t be extended. Initialize all the fields via a constructor. Make all fields private so that direct access is not allowed. Make all fields final so that they’re initialized only once inside the constructor and never modified afterward. Don’t provide setter methods. When exposing methods which return mutable object then you must always return a new object with copied content of mutable object whereas, Immutable variables can be returned safely without extra effort.   Read Immutable Class in Java for Immutable Class implementation and answers of above questions.\n \nQ3. Give example of 5-6 design patterns being used in Java classes.  Factory\njava.util.Calendar#getInstance() Abstract Factory\njavax.xml.parsers.DocumentBuilderFactory#newInstance()\njavax.xml.transform.TransformerFactory#newInstance()\njavax.xml.xpath.XPathFactory#newInstance() Builder\njava.lang.StringBuilder#append()\njava.lang.StringBuffer#append() Decorator\nAll subclasses of java.io.InputStream, OutputStream, Reader and Writer. Chain of responsibility\njavax.servlet.Filter#doFilter() Iterator\njava.util.Iterator Observer\nJMS message listener Singleton\njava.lang.Runtime#getRuntime() Adapter java.util.Arrays#asList()\njava.io.InputStreamReader(InputStream) (returns a Reader)\njava.io.OutputStreamWriter(OutputStream) (returns a Writer)  2. Java Collections Q1. How HashMap Works? This is also most commonly asked question in collections. Interviewer start this question asking about collections and what are the data structure/collection you have used in development. Candidate generally answers HashMap, LinkedList, ArrayList, HashSet. Then interviewer check your knowledge of equals, hashcode and hashing algorithm. You should be aware of HashMap class internal implementation. Follow up questions in HashMap are as follows:\n How to use HashMap in multi threading environment?\nYou should know that HashTable is thread safe. You can make HashMap thread safe by using Collections.synchronizedMap(Map) What is Concurrent HashMap? How it is better then thread safe HashMap in multi threading environment?\n  Q2. What is the difference in ArrayList and LinkedList? ArrayList vs LinkedList     ArrayList LinkedList     1. ArrayList implements List and RandomAccess interfaces LinkedList implements List and Deque interface   2. ArrayList internally uses a dynamic array to store the elements. LinkedList internally uses a doubly linked list to store the elements.   3. ArrayList elements are stored in contiguous memory location where each memory location represents an index Each LinkedList element can be stored at different memory location where each element has address of it previous and next element.   4. Insertion and Deletion of elements is slow in ArrayList as these operations require all the elements to shift by one index to either make the space or fill the empty space Insertion and Deletion of elements is faster in LinkedList as these operations just require to change the addresses in previous and next block   5. Read operation of random element is much faster in ArrayList due to indices and support of fast random access Read operation of random element in slower in LinkedList as need to traverse the list of find element   6. Recommended when read operation is more than the number of insertions and deletions Recommended when insertion and deletion rate is higher then the read operation       methods ArrayList LinkedList     get(int index) O(1) O(n) with n/4 steps on average   getFirst(), getLast() NA O(1)   add(int index, E element) O(n) with n/2 steps on average O(n) with n/4 steps on average   addFirst(), addLast() NA O(1)   remove(int index) O(n) with n/2 steps on average O(n) with n/4 steps on average   removeFirst(), removeLast() NA O(1)   Iterator.remove() O(n) with n/2 steps on average O(1)   ListIterator.add(E element) O(n) with n/2 steps on average O(1)     ArrayList: Many of the operations need n/2 steps on average, constant number of steps in the best case (end of list), n steps in the worst case (start of list) LinkedList: Many of the operations need n/4 steps on average, constant number of steps in the best case (e.g. index = 0), and n/2 steps in worst case (middle of list)\n  Q3. How to find middle element of Linked List?  It is always better to keep track of Linked list size by increasing or decreasing the counter by 1, on addition or deletion of nodes from linked list respectively. In this way, middle element\u0026rsquo;s index will be (size -1)/2 When size of the linked list is unknown and only head node is given then you should use Fast and Slow pointer approach.\nIn this approach, we iterate through the linked list using two pointers. Fast pointer jumps 2 nodes in each iteration, and the slow pointer jumps only one node per iteration.\nWhen the fast pointer reaches the end of the list, the slow pointer will be at the middle element.   Also read How to find middle element of LinkedList in Java for more details\n Q4. How to find a loop in LinkedList? If you answer it then follow up question might be asked:\n How to find the starting point of loop in LinkedList? How to find the length of the loop in LinkedList?\n  Q5. Difference between ArrayList and Vector. These is legacy interview questions which is not asked frequently now a days but good to know.\nArrayList vs Vector     ArrayList Vector     1. ArrayList\u0026rsquo;s methods are not synchronized Vector\u0026rsquo;s methods are synchronized   2. ArrayList is fast as it’s non-synchronized. Vector is slow because it is synchronized   3. If internal array runs out of room, ArrayList increases its size by 50% Vector defaults to doubling size of its array   4. ArrayList can only use Iterator for traversing Vector can use both Enumeration and Iterator for traversing over elements    3. Java Threads Interviewer can ask you any of following questions related to multi threading:\nQ1. How to run 5 threads sequentially? Q2. Print number 1 to 10 using two threads where thread 1 prints even number and thread 2 prints odd number. Q3. Producer consumer implementation using wait notify. Q4. What is DeadLock and How to identify it in Java Application? How to prevent DeadLock situations in Application Development? Q5. CountDownLatch vs CyclicBarrier? Q6. Future Object, ThreadLocal etc. Q7. How to name a thread in executor service? Q8. How to interrupt a thread explicitly? 4. Java String Q1. What is String Constant Pool? String Constant Pool is a pool of Strings (String literals) stored in Java Heap Memory. A dedicated space is provided for pool in Heap Memory.\nWhen you ask for a string from this pool, it provides the same string if already exist, otherwise it creates a new string in the pool and returns that string. This process is also called as string intern which makes the string literals reusable.\nQ2. Difference between String Literal and New String Object. String literal vs New String Object    String Literals New String Object     String literals are maintained in String Constant Pool New String objects are created in Heap Memory   String literals are interned by default New String objects can be interned explicitly using intern() method    // String Literal  String a = \u0026#34;abc\u0026#34;; String b = \u0026#34;abc\u0026#34;; System.out.println(a == b); // true  // String Object  String c = new String(\u0026#34;abc\u0026#34;); String d = new String(\u0026#34;abc\u0026#34;); System.out.println(c == d); // false \nQ3. Difference between String, StringBuilder and StringBuffer. String vs StringBuilder vs StringBuffer  String object is immutable whereas StringBuffer and StringBuilder objects are mutable. String concat \u0026ldquo;+\u0026rdquo; operator internally uses StringBuffer or StringBuilder class.  StringBuilder vs StringBuffer  StringBuilder and StringBuffer provides similar methods such as substring(), insert(), append(), delete() StringBuffer is thread safe and synchronized whereas StringBuilder is not, thats why StringBuilder is more faster than StringBuffer. Most of the time you will be using StringBuilder. Use StringBuffer if you really are trying to share a buffer between threads.\n  Q4. Why char[] array is used over String to store password in Java? Strings are immutable in Java and any change in a String object produces a new String. When you store passwords in a String object, they stays in memory until Garbage collector clear it, which is a security threat as anyone with access to the memory dump retrieve the password from memory. Moreover, String use String Pool memory for reusability, which even stays in memory for long duration as compare to other objects.\nWhereas if password is stored in char[] array, we can explicitly wipe the password after completing the work. They array can be overwritten and password will no longer be there in memory.\n5. Java Core Java Core interview questions are very important for freshers.\nQ1. Explain each keyword in main method i.e. public static void main(String[] args). public class MyClass { public static void main(String[] args) {} }  public method have public access and can be executed from outside the class. It has to be public so that java runtime can execute this method. static associates the method with class rather than object. This helps JVM to call main method without class instantiation. void is a return type of main method which returns nothing main is name of java main method and it is fixed. When you execute a class fine, it looks for main method. String[] args It stores Java command line arguments and is an array of type String\n  Q2. What is final keyword in Java? The final keyword is used as non-access modifier in Java. A final keyword can be used in different contexts such as:\n Value of final variable cannot be changes once assigned. A final method cannot be overridden by inheriting child classes in Java. A final class cannot be extended by other classes in Java.\n  Q3. Explain JDK, JRE and JVM    JDK JRE JVM     It stands for Java Development Kit. It stands for Java Runtime Environment. It stands for Java Virtual Machine.   It is the tool necessary to compile, document and package Java programs. JRE refers to a runtime environment in which Java bytecode can be executed. It is an abstract machine. It is a specification that provides a run-time environment in which Java bytecode can be executed.   It contains JRE + development tools. It’s an implementation of the JVM which physically exists. JVM follows three notations: Specification, Implementation, and Runtime Instance.    \nQ4. Why Java is platform independent? Java is platform independent. Let\u0026rsquo;s understand this\n When you write a program in Java (.java file) and compile it using javac. It is converted to ByteCode (.class file). This ByteCode is not something which any machine or OS can understand. You need an interpreter to execute this ByteCode and that interpreter is JVM (Java Virtual Machine) in case of Java. JVM is platform dependent. You need to install platform specific JVM based on Operating System you are using Mac OS X, Windows or Linux. You can execute the same ByteCode (.class file) on any platform\u0026rsquo;s JVM regardless of its Operating System.  So we can say, JVM is platform dependent but Java is platform independent from its magic ByteCode.\nQ5. How many ways to create an Object Instance in Java ?  New Keyword Cloning using Object.clone() method Reflection using Class.newInstance() method Reflection using Class.getConstructor().newInstance() method Object Serialization and Deserialization  public class ObjectInstance { public static void main(String[] args) throws CloneNotSupportedException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException, IOException, ClassNotFoundException { // New Keyword \tObjectInstance instance1 = new ObjectInstance(); // Cloning \tObjectInstance instance2 = (ObjectInstance) instance1.clone(); // Reflection \tObjectInstance instance3 = ObjectInstance.class.newInstance(); ObjectInstance instance4 = ObjectInstance.class.getConstructor().newInstance(); // Object Serialization and Deserialization \tserialize(instance1); ObjectInstance instance5 = deserialize(); } private static void serialize(ObjectInstance objInstance) throws IOException { FileOutputStream f = new FileOutputStream(\u0026#34;resources/objectinstance.ser\u0026#34;); try (ObjectOutputStream outputStream = new ObjectOutputStream(f)) { outputStream.writeObject(objInstance); outputStream.flush(); } } private static ObjectInstance deserialize() throws IOException, ClassNotFoundException { FileInputStream f = new FileInputStream(\u0026#34;resources/objectinstance.ser\u0026#34;); try (ObjectInputStream inputStream = new ObjectInputStream(f)) { return (ObjectInstance) inputStream.readObject(); } } } \nQ6. Can you override a static method and private method ?  No, you cannot override static method since static method is associated with a class whereas overriding is an object instance feature. No, you cannot override private method since private method is not visible outside of a class.  6. Java Advance Q1. What is the difference between Heap and Stack Memory in Java?    Features Stack Heap     Memory Stack memory is used only by one thread of execution. Heap memory is used by all the parts of the application.   Access Stack memory can’t be accessed by other threads. Objects stored in the heap are globally accessible.   Memory Management Follows LIFO manner to free memory. Memory management is based on the generation associated with each object.   Lifetime Exists until the end of execution of the thread. Heap memory lives from the start till the end of application execution.   Usage Stack memory only contains local primitive and reference variables to objects in heap space. Whenever an object is created, it’s always stored in the Heap space.    Q2. Explain Java Memory Model with Heap structure. Explain here three parts of heap i.e. Young, Old and Permanent Generation. Also Explain Minor and Major GC Q3. How to do JVM performance tuning ? Explain here parameters a) Heap Memory: -Xms, -Xmx, -Xmn, b) Permanent Generation Memory: -XX:PermSize, -XX:MaxPermSize c) Garbage Collection i.e. -XX:+UseSerialGC, -XX:+UseParellelGC (-XX:ParellelGCThreads=\u0026lt;N\u0026gt;), -XX:+UseParellelOldGC, -XX:+UseConcMarkSweepGC (-XX:ParellelCMSThreads=\u0026lt;N\u0026gt;), -XX:+UseG1GC  Q4. What is classloader in java? How to write custom class Loader? What is linkage error? Q5. Do you know about serialization? When should we use that? What is the role of Serialization id? serializable vs externalizable? Q6. Deep vs Shallow copy in Cloning? 7. Java Basics Q1. S.O.L.I.D. (5 class design principle) in Java ? These 5 design principle are know as SOLID principles:-\n Single Responsibility Principle - One class should have one and only one responsibility Open Close Principle - Software components should be open for extension, but closed for modification Liskov Substitution - Derived types must be completely substitutable for their base types Interface Segregation - Clients should not be forced to implement unnecessary methods which they will not use Dependency Inversion - Depend on abstractions, not on concretions  Q2. Anti patterns in Java. What is god class ? Anti patterns in java is:-\n Any pattern or coding habit which is considered as bad practice Which are against SOLID design principles  God class is one of the Anti pattern example. A god class is a class which is having too many properties or methods or dependencies and hence lots of responsibilities which violates single-responsibility SOLID design principle. Writing thousands lines of code in single class becomes a nightmare to debug, unit-test and document.\nQ3. How classes are related to each other through association, aggregation and composition.  Association (bidirectional one to one, one to many, many to one or many to many association, represented by line with arrow in UML) for e.g. Teacher and Student. Multiple students can associate with a single teacher and a single student can associate with multiple teachers but there is no ownership between the objects and both have their own lifecycle. Aggregation (Has-a relationship, unidirectional association, parent and child can survive individually, represented by line with diamond in UML) for e.g. Car and Wheel. Car can have multiple wheels but wheel can not belong to multiple cars and if we delete the car, wheel need not to be destroyed and used in another car. Composition (Part-of relationship, unidirectional association, child can not survive without parent, represented by line with filled diamond in UML) for e.g. House and Rooms. House can contain multiple rooms there is no independent life of room and any room can not belongs to two different house if we delete the house room will automatically delete.  Q4. What is Marker Interface? A Marker interface can be defined as the interface having no data member and member functions. In simpler terms, an empty interface is called the Marker interface. The most common examples of Marker interface in Java are Serializable, Cloneable etc. The marker interface can be declared as follows.\npublic interface Serializable{ } Q5. What is multiple inheritance? Is it supported by Java? If a child class inherits the property from multiple classes is known as multiple inheritance. Java does not allow to extend multiple classes.\nThe problem with multiple inheritance is that if multiple parent classes have the same method name, then at runtime it becomes difficult for the compiler to decide which method to execute from the child class.\nTherefore, Java doesn’t support multiple inheritance. The problem is commonly referred to as Diamond Problem.\n","permalink":"https://codingnconcepts.com/top-java-interview-questions/","tags":["Interview Q\u0026A","Java Q\u0026A"],"title":"Top Java Interview Questions"},{"categories":["Interview Questions","Javascript"],"contents":"These Javascript interview questions are based on my personal interview experience. Likelihood of question being asked in the interview is from top to bottom.\nQ1. What is Closure in JavaScript?   Definition: A closure is an inner function having access to its outer function scope and all above scopes even when that function is executing outside of its outer function.\n  When you define an inner function inside outer function, a closure is created at runtime for inner function bundled with outer function\u0026rsquo;s scope. Let\u0026rsquo;s look at the example to understand Closures\nvar outerFunc = function(c){ var a = 1; var innerFunc = function(d) { var b = 2; var innerMostFunc = function(e) { return a + b + c + d + e; } return innerMostFunc; } return innerFunc; } console.dir(outerFunc(3)); //1. innerFunc console.dir(outerFunc(3)(4)); //2. innerMostFunc console.log(outerFunc(3)(4)(5)); //3. 15 Output ▼ ƒ innerFunc(c) length: 1 name: \u0026quot;innerFunc\u0026quot; arguments: null caller: null ➤ prototype: {constructor: ƒ} ➤ __proto__: ƒ () [[FunctionLocation]]: ▼ [[Scopes]]: Scopes[2] ➤ 0: Closure (outerFunc) {c: 3, a: 1} ➤ 1: Global {parent: Window, opener: null, top: Window, length: 1, frames: Window, …} ▼ ƒ innerMostFunc(c) length: 1 name: \u0026quot;innerMostFunc\u0026quot; arguments: null caller: null ➤ prototype: {constructor: ƒ} ➤ __proto__: ƒ () [[FunctionLocation]]: ▼ [[Scopes]]: Scopes[3] ➤ 0: Closure (innerFunc) {d: 4, b: 2} ➤ 1: Closure (outerFunc) {c: 3, a: 1} ➤ 2: Global {parent: Window, opener: null, top: Window, length: 1, frames: Window, …} 15 We have three console dir/log. Let\u0026rsquo;s discuss them one by one:\n  innerFunc has a closure of variables defined or passed as argument in outerFunc\n 0: Closure (outerFunc) {c: 3, a: 1}    innerMostFunc has a closure of variables defined or passed as argument in in outerFunc and innerFunc i.e.\n 0: Closure (innerFunc) {d: 4, b: 2} 1: Closure (outerFunc) {c: 3, a: 1}    innerMostFunc returns a+b+c+d+e=15 where\n value of a and c is coming from Closure (outerFunc) value of b and d is coming from Closure (innerFunc) value of e is coming from passed argument      \nQ2. What are Promises and why do we use it?   Promises are introduced natively in ES6. They are very similar to our promises. As we keep or break the promise, Javascript promises are either resolve or reject.\n  In earlier days, you would have used callbacks to handle asynchronous operations. However, callbacks have limited functionality and often leads to unmanageable code if you are handling multiple async calls also known as callback hell. Promises were introduced to improve code readability and better handling of async calls and errors.\n  Syntax of simple promise object.\nlet promise = new Promise(function (resolve, reject) { // asynchronous call });    Also read this post for more details on promises in javascript\n \nQ3. How to use async and await and what problem does it solve?   Async/Await introduced in ECMAScript2017 is a new way to handle asynchronous operation. Its underlying is Promise with improved syntax to write concise, readable and easy to debug code as compare to promises and callbacks.\n  When Async keyword is applied before a function, it turns into asynchronous function and always return a promise object.\n  await keyword works only inside async function and it makes the function execution wait until the returned promise settles (either resolve or reject).\n  Usage of async/await:\n1async function hello() { 2 let promise = new Promise((resolve, reject) =\u0026gt; { 3 setTimeout(() =\u0026gt; resolve(\u0026#34;Hello\u0026#34;), 5000) 4 }); 5 6 let value = await promise; // wait until the promise resolves 7 8 return value; 9} 10 11hello().then(data =\u0026gt; console.log(data)); Please note that in above code snippet when we execute async function hello(), function execution literally waits for 5s at line 6 before returning resolved promise object. CPU resources are not utilized in this wait period and can be used for other work.\n   Also read this post for more details on async/await in javascript\n \nQ4. What is a difference between call, apply and bind in JavaScript?  All three call, apply and bind are prototype methods of Function that means you can execute these three methods on any function. All three call, apply and bind methods are used to execute the function in explicit context where this refers to the first argument passed in method. call() - accepts the function arguments as comma separated values arg1, arg2, \u0026hellip; functionName.call(thisArg, arg1, arg2, ...)  apply() - accepts the function arguments as array of values [arg1, arg2, \u0026hellip;] functionName.apply(thisArg, [arg1, arg2, ...])  bind() - returns a new bounded function which can be executed later. functionName.bind(thisArg)  call() and apply() methods are executed immediately whereas bind() method return a new bounded function which can be executed later.   Also read this post for more details on difference between call, bind and apply with their practical usage\n \nQ5. What is Arrow function and how it is different from normal functions?  Arrow functions are introduced in ES6 and allow us to write shorter function syntax. var helloES5 = function() { return \u0026#34;Hello World\u0026#34;; } var helloES6 = () =\u0026gt; \u0026#34;Hello World\u0026#34;;  In normal function this keyword represents the object that called the function but in arrow function this keyword always represents the object that defined the arrow function.  \nQ6. What is a difference between == and === operator?  == is abstract comparison operator which only compares the content and not its type  1 == 1 // true, content and its type is same '1' == 1 // true, auto type conversion, string converted into number null == undefined // true, because null is equivalent of undefined 0 == false // true, because false is equivalent of 0 \u0026quot;\u0026quot; == false // true, because false is equivalent of empty string  === is strict comparison operator which compare both content and its type  1 === 1 true '1' === 1 false null === undefined false 0 === false false \u0026quot;\u0026quot; === false false  === is faster then == because == converts the operands to the compatible type before comparison whereas === compares directly without any conversion.   Also read this post for more details on == and === operators with many examples\n \nQ7. What is a difference between undefined and null ?  undefined means a variable has been declared but not assigned a value yet. null is an assignment value. It can be assigned to a variable that represents null, empty or non-existent value. undefined is type of undefined whereas null is an object. var a; console.log(typeof(a)); // undefined console.log(typeof(null)); // object   \nQ8. What is a difference between var, let and const keywords?  var declarations are globally scoped or function scoped while let and const are block scoped. var variables can be updated and re-declared within its scope; let variables can be updated but not re-declared; const variables can neither be updated nor re-declared. They are all hoisted to the top of their scope but while var variables are initialized with undefined, let and const variables are not initialized. While var and let can be declared without being initialized, const must be initialized during declaration.   Also read this post for more details on difference between var, let and const\n \nQ9. What is variable Hoisting in JavaScript?   Hoisting is JavaScript\u0026rsquo;s default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).\n  Variables defined using var, let or const are all hoisted.\n  In hoisting process, var variable is initialized with undefined by default. If you try to access it before declaration then you will get undefined.\n  In hoisting process, let and const variables are not initialized. If you try to access them before declaration then you will get ReferenceError.\nconsole.log(x); // undefined console.log(y); // ReferenceError console.log(z); // ReferenceError  var x = 1; let y = 2; const z = 3;   \nQ10. What are the Object methods available in Javascript?  Object.create() method is used to create a new object with its prototype set to existing object. Object.assign() method is used to copy the properties and functions of one object in another object. Object.freeze() freezes the state of an Object once this method is called. It ignores if any existing property is modified, and if any new property is added. Object.seal() seals the state of an Object once this method is called. It allows the modification of existing properties, but ignores if any new property is added. Object.defineProperty() is used to define new property in existing object or modifying existing property. Property can be marked writable, configurable and enumerable. Object.is() is used to compare two values. Return true or false.   Also read this post for more details on Object methods with examples\n \nQ11. What is this keyword in Javascript? In JavaScript, this keyword refers to the object it belongs to. It has different values depending on where it is used:\n In a method, this refers to the owner object where method is defined. Alone, this refers to the global object. In a function, this refers to the global object. In a function, in strict mode, this is undefined. When a function called with new keyword, this refers to new object instance. In a DOM event, this refers to the element that received the event. Function prototype methods call(), apply() and bind() can be used to refer this to any object.   Also read this post to understand all about this keyword with examples\n \nQ12. What is the difference between throttle and debounce? Debounce and throttle are two similar (but different!) techniques to control how many times we allow a function to be executed over time.\n Throttle If throttle interval is 100ms then a throttled function will not be executed more than once in 100ms, no matter how often you invoke that function. It is mainly used for consistent execution of event (like infinite scrolling) Debounce If debounce interval is 100ms then a debounced function will be executed after 100ms passed since its last execution. It is mainly used for grouping a sudden burst of events (like keystrokes, resizing) into a single one.  Underscore and Lodash libraries have built in function for both.\nQ13. Object Oriented programming in Javascript, What is constructor and prototype? Do you know about prototypal inheritance. How do you define Class using ES6. Q14. What is global, function and block scope in Javascript? Q15. Currying functions in javascript?","permalink":"https://codingnconcepts.com/top-javascript-interview-questions/","tags":["Interview Q\u0026A","JavaScript Q\u0026A"],"title":"Top Javascript Interview Questions"},{"categories":["Java"],"contents":"This problem is frequently asked in the interview to check your understanding on singleton design pattern. This program answers following artefacts of singleton design pattern:-\n How to make singleton class thread safe?  using double checked locking   How to prevent deserialization to create new object of singleton class?  using readResolve method to return same instance   How to prevent cloning to create a new object of singleton class?  override clone method to return same instance   How to prevent reflexion to create a new object of singleton class?  check instance exist in private constructor and throw exception if already exist You can find the singleton pattern implementation here.    package com.abc; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.ObjectStreamException; import java.io.Serializable; /** * @author aklahoti * */ public class Singleton implements Serializable, Cloneable{ private static final long serialVersionUID = 1L; private static Singleton instance = null; private static Object DUMMY_OBJECT = new Object(); private Singleton(){ /*To prevent object creation using reflection*/ if(instance!=null){ throw new InstantiationError( \u0026#34;Singleton Object is already created.\u0026#34; ); } } public static Singleton getInstance(){ /*Double checked locking*/ if(instance == null){ synchronized (DUMMY_OBJECT) { if(instance == null){ instance = new Singleton(); } } } return instance; } public static void print(){ System.out.println(\u0026#34;I am a singleton class.\u0026#34;); } /*To prevent object creation using deserialization*/ private Object readResolve() throws ObjectStreamException{ return instance; } /*To prevent object creation using cloning*/ @Override protected Object clone() throws CloneNotSupportedException { return instance; } } ","permalink":"https://codingnconcepts.com/java/singleton-design-pattern-using-java/","tags":["Java Design Pattern"],"title":"Singleton Design Pattern Using Java"},{"categories":["Java"],"contents":"This problem is frequently asked in the interview to check your understanding on threads and your programming skills. Problem statement might change for e.g.\n Print ping pong using two threads. Print alternate number using two threads. Print even numbers by one thread and odd numbers by another thread.  package com.abc; public class PingPong { public static void main(String[] args) { Object LOCK_OBJECT = new Object(); Thread ping = new Thread(new PingPongThread(LOCK_OBJECT, \u0026#34;Ping\u0026#34;)); Thread pong = new Thread(new PingPongThread(LOCK_OBJECT, \u0026#34;Pong\u0026#34;)); ping.start(); pong.start(); } } class PingPongThread implements Runnable{ private Object LOCK_OBJECT; private String name; public PingPongThread(Object LOCK_OBJECT, String name) { this.LOCK_OBJECT = LOCK_OBJECT; this.name = name; } @Override public void run() { synchronized (LOCK_OBJECT) { while(true) { System.out.println(name); try { Thread.sleep(1000); } catch (InterruptedException e1) { e1.printStackTrace(); } LOCK_OBJECT.notify(); try { LOCK_OBJECT.wait(1000); } catch (InterruptedException e) { e.printStackTrace(); } } } } } ","permalink":"https://codingnconcepts.com/java/ping-pong-using-wait-notify/","tags":["Java Threads"],"title":"Ping pong using wait notify"},{"categories":["Kafka"],"contents":"Hi Readers,\nIf you are planning or preparing for Apache Kafka Certification then this is the right place for you.There are many Apache Kafka Certifications are available in the market but CCDAK (Confluent Certified Developer for Apache Kafka) is the most known certification as Kafka is now maintained by Confluent.\nCCDAK vs CCOAK Confluent has introduced CCOAK certification recently. CCOAK is mainly for devOps engineer focusing on build and manage Kafka cluster. CCDAK is mainly for developers and Solution architects focusing on design, producer and consumer. If you are still not sure, I recommend to go for CCDAK as it is more comprehensive exam as compared to CCOAK. These exam notes are very helpful for both CCDAK and CCOAK certifications.\nFrom here onward, we will talk about how to prepare for CCDAK.\nFrequently Asked Questions   Prepare well for the exam as it verifies your theoretical as well as practical understanding of Kafka. At least 40-50 hours of preparation is required. You can register online and schedule exam on the Examity site. I suggest to set a goal of 1 to 2 months for exam preparation and register accordingly. Confluent kafka certification price cost at $150 for one attempt. You need to pay the fee again in order to retake exam after a gap of at least 14 days. You need to answer 60 multiple-choice questions in 90 minutes from your laptop (with webcam) under the supervision of online proctor. There is no negative scoring so try to answer as many questions as possible. There is no mention of number of questions need to be correct in order to pass the exam. Result will be shown immediately (PASS or FAIL) at the end of exam. No scoring or percentage is provided. You will receive a certificate similar to my CCDAK certificate after passing the exam. What an achievement !!! The certification expires after two years but you can still brag about it ;) Don\u0026rsquo;t waste time searching for CCDAK Certification Dumps. I have done that already and they don\u0026rsquo;t exist as per my knowledge✱ If you are looking for Free Kafka Certifications. I\u0026rsquo;m sorry to say, they don\u0026rsquo;t exist as well✱  ✱ Comment on this post and help others if you find any.\nExam Preparation  I have prepared for CCDAK using following:\n Apache Kafka Documentation Confluent Kafka Documentation Confluent Kafka Definitive Guide PDF Udemy Apache Kafka Series - Learn Apache Kafka for Beginners v2 Udemy CCDAK 150 Practice Exam Questions  You should prepare well for following topics. Recommended to study topics in the same sequence.\n① Kafka Architecture\nRead Confluent Kafka Definitive Guide PDF and Apache Kafka Documentation. Once you read both, revise using Kafka Architecture section in this post.\n② Kafka CLI\nRead Confluent Kafka Definitive Guide PDF and revise using KAFKA CLI section of this post.\n③ Kafka Streams\nRead Confluent Kafka Definitive Guide PDF and revise using Kafka Streams section of this post.\n④ Kafka Security\nRead Apache Kafka Documentation Security Section\n⑤ Kafka APIs\nRead Apache Kafka Documentation API section and revise using KAFKA API section of this post.\n⑥ Kafka Monitoring (Metrics)\nRead Confluent Kafka Definitive Guide PDF and Apache Kafka Documentation for important metrics. Read Confluent Kafka Documentation as well.\n⑦ Confluent Schema Registry\nRead Confluent Kafka Documentation and revise using Confluent Schema Registry section of this post.\n⑧ Confluent KSQL\nRead Confluent Kafka Documentation KSQL and Kafka Streams section\n⑨ Confluent REST Proxy\nRead Confluent Kafka Documentation Rest Proxy Section\nSample Exam Questions  Please note that these are not the actual questions from the CCDAK exam but most likelihood to ask in exam.\n1. Kafka Theory  Kafka is a \u0026hellip;. ?\npub-sub system Mostly Kafka is written in which language?\nScala Which errors are retriable from Kafka Producer?\nLEADER_NOT_AVAILABLE, NOT_LEADER_FOR_PARTITION, REBALANCE_IN_PROGRESS What is a generic unique id which can be used for a messages received from a consumer?\nTopic + Partition + Offset   Read Kafka Architecture section of this post for more questions and answers\n 2. Kafka Streams  To transform data from a Kafka topic to another one, You should use?\nKafka Streams Which of the Kafka Stream operators are stateful? Which of the Kafka Stream operators are stateless? Which window is not having gap? Which Kafka Stream joins doesn\u0026rsquo;t require co-partition of data?\nKStream-to-GlobalKTable Which Kafka Stream joins is always windowed join?\nKStream-to-KStream What is the output of KStream-to-KTable join?\nKStream   Read Kafka Streams section of this post for answers\n 3. Confluent Schema Registry  Which of the following is not a primitive type of Avro? Which of the following in not a complex type of Avro? Which of the following is not a required field in Avro Schema? Delete a field without default value in Avro schema is \u0026hellip;\u0026hellip; compatibility?\nbackward Adding a field to record without default value is \u0026hellip;\u0026hellip; schema evolution?\nforward In Avro, removing or adding a field that has a default value is a \u0026hellip;\u0026hellip; schema evolution?\nfull What client protocols are supported for the schema registry?\nHTTP, HTTPS Where are Avro schema stored in Confluent Schema Registry?\n_schemas Kafka topic   Read Confluent Schema Registry section of this post for answers\n 4. Confluent KSQL  is KSQL ANSI SQL Compliant?\nNo What Java library is KSQL based on?\nKafka Streams  5. Kafka Security  What are the valid authentication mechanism in KAFKA?\nSSL\nSASL/GSSAPI (Kerberos)\nSASL/PLAIN\nSASL/SCRAM-SHA-256 and SASL/SCRAM-SHA-512\nSASL/OAUTHBEARER  Kafka Architecture  ☛ I have spent so much time preparing these notes. You can expect most of the questions related to Kafka architecture from these notes. ☛ Moreover, If you are preparing for interviews then you can also expect most of the Kafka interview questions from these notes.\nCluster  Cluster is group of Kafka brokers.  Rack  A racks belongs to a cluster. A broker belongs to a rack when property broker.rack=\u0026lt;rack-id\u0026gt; is specified at broker level. This enables the rack awareness feature which spreads replicas of the same partition across different racks. Let\u0026rsquo;s say you have 6 brokers and 2 racks. Brokers 1, 2, 3 are on the rack_1, and brokers 4, 5, 6 are on rack_2.\nNow when you create a topic with 6 partition, instead of assigning broker to partition in order from 1, 2, 3, 4, 5, 6, each partition is assigned to each rack repeatedly i.e. 1, 4, 2, 5, 3, 6.  Broker  Every broker in Kafka is a bootstrap server which knows about all brokers, topics and partitions (metadata) that means Kafka client (e.g. producer,consumer etc) only need to connect to one broker in order to connect to entire cluster. At all times, only one broker should be the controller, and one broker must always be the controller in the cluster  Topic  Kafka takes bytes as input without even loading them into memory (that\u0026rsquo;s called zero copy) Brokers have defaults for all the topic configuration parameters  Partition  Topic can have one or more partition. One partition is a leader while the others are replica. It is not possible to delete a partition of topic once created. Order is guaranteed within the partition and once data is written into partition, its immutable! If producer writes at 1 GB/sec and consumer consumes at 250MB/sec then requires 4 partition!  Segment  Partitions are made of segments (.log files) At a time only one segment is active in a partition log.segment.bytes = 1 GB (default), Max size of a single segment in bytes log.segment.ms = 1 week (default), Time kafka will wait before closing the segment if not full Segment come with two indexes (files):-  An offset to position index (.index file)\nAllows kafka where to read to find a message A timestamp to offset index (.timeindex file)\nAllows kafka to find a message with a timestamp   log.cleanup.policy = delete (Kafka default for all user topics), Delete data based on age of data (default is 1 week) log.cleanup.policy = compact, Delete based on keys of your messages. Will delete old duplicate keys after the active segment is committed. (Kafka default for topic __consumer_offsets) Log cleanup happen on partition segments. Smaller/more segments means the log cleanup will happen more often! The cleaner checks for work every 15 seconds (log.cleaner.backoff.ms) log.retention.hours = 1 week (default), number of hours to keep data for log.retention.bytes = -1 (infinite default), max size in bytes for each partition Old segments will be deleted based on log.retention.hours or log.retention.bytes rule The offset of message is immutable. Deleted records can still be seen by consumers for a period of delete.retention.ms=24 hours (default)  Offset  Partition is having its own offset starting from 0.  Topic Replication  Replication factor = 3 and partition = 2 means there will be total 6 partition distributed across Kafka cluster. Each partition will be having 1 leader and 2 ISR (in-sync replica). Broker contains leader partition called leader of that partition and only leader can receive and serve data for partition. Replication factor can not be greater then number of broker in the kafka cluster. If topic is having a replication factor of 3 then each partition will live on 3 different brokers.  Producer  Kafka Producer automatically recover from following retriable errors:\nLEADER_NOT_AVAILABLE\nNOT_LEADER_FOR_PARTITION\nREBALANCE_IN_PROGRESS Kafka Producer throw error for following non retriable errors:\nMESSAGE_TOO_LARGE If you send a message of size 3 MB to a topic with default message size configuration. Then producer will throw MessageSizeTooLarge exception immediately since it is not a retriable exception. When produce to a topic which doesn\u0026rsquo;t exist and auto.create.topic.enable=true then kafka creates the topic automatically with the broker/topic settings num.partition and default.replication.factor  Producer Acknowledgment   acks=0 Producer do not wait for ack ( possible data loss )\n  acks=1 Producer wait for leader ack ( limited data loss )\n  acks=all Producer wait for leader+replica ack ( no data loss )\n  acks=all must be used in conjunction with min.insync.replicas which can be set at broker or topic level.\n*( assuming that replicas are distributed across 3 brokers for below points )\n min.insync.replica only matters if acks=all acks=all, min.insync.replica=2 implies that at least 2 brokers that are ISR (including leader) must acknowledge acks=all, min.insync.replica=1 implies that at least 1 brokers that is ISR (including leader) must acknowledge A kafka topic with replication.factor=3, acks=all, min.insync.replicas=2 can only tolerate 1 broker going down, otherwise the producer will receive an exception NOT_ENOUGH_REPLICAS on send. A kafka topic with replication.factor=3, acks=all, min.insync.replicas=1, can tolerate maximum number of 2 brokers going down, so that a producer can still produce to the topic.    Producer Configuration  Mandatory properties to configure Kafka producer is as follows:\nbootstrap.servers\nkey.serializer\nvalue.serializer  Safe Producer Configuration  min.insync.replicas=2 (set at broker or topic level) retries=MAX_INT number of reties by producer in case of transient failure/exception. (default is 0) max.in.flight.per.connection number=5 number of producer request can be made in parallel (default is 5) acks=all enable.idempotence=true producer send producerId with each message to identify for duplicate msg at kafka end. When kafka receives duplicate message with same producerId which it already committed. It do not commit it again and send ack to producer (default is false)  High Throughput Producer using compression and batching  compression.type=snappy value can be none(default), gzip, lz4, snappy. Compression is enabled at the producer level and doesn\u0026rsquo;t require any config change in broker or consumer Compression is more effective in case of bigger batch of messages being sent to kafka linger.ms=20 Number of millisecond a producer is willing to wait before sending a batch out. (default 0). Increase linger.ms value increase the chance of batching. batch.size=32KB or 64KB Maximum number of bytes that will be included in a batch (default 16KB). Any message bigger than the batch size will not be batched  Message Key  Producer can choose to send a key with message. If key = null, data is send in round robin If key is sent, then all message for that key will always go to same partition. This can be used to order the messages for a specific key since order is guaranteed in same partition. Adding a partition to the topic will loose the guarantee of same key go to same partition. Keys are hashed using murmur2 algorithm by default.  Consumer  Per thread one consumer is the rule. Consumer must not be multi threaded. Each consumer is assigned to different partition in same consumer group.  If there are 5 consumers of same consumer group consuming from a topic with 10 partition then 2 partitions will be assigned to each consumer and no consumer will remain idle. If there are 10 consumers of same consumer group consuming from a topic with 5 partition then 5 partition will be assigned to 5 consumers and rest 5 consumers will remain idle.   records-lag-max (monitoring metrics) The maximum lag in terms of number of records for any partition in this window. An increasing value over time is your best indication that the consumer group is not keeping up with the producers.  Consumer Group  If two applications want to process all the messages independently from a kafka topic having 4 partition, then you should create 2 consumer groups with 4 consumers in each group for optimal performance.  Consumer Offset When consumer in a group has processed the data received from Kafka, it commits the offset in Kafka topic named _consumer_offset which is used when a consumer dies, it will be able to read back from where it left off.\nDelivery Semantics  At most once Offset are committed as soon as message batch is received. If the processing goes wrong, the message will be lost (it won\u0026rsquo;t be read again) At least once (default) Offset are committed after the message is processed. If the processing goes wrong, the message will be read again. This can result in duplicate processing of message.  Make sure your processing is idempotent. (i.e. re-processing the message won\u0026rsquo;t impact your systems). For most of the application, we use this and ensure processing are idempotent.   Exactly once Can only be achieved for Kafka=\u0026gt;Kafka workflows using Kafka Streams API. For Kafka=\u0026gt;Sink workflows, use an idempotent consumer.  Consumer Offset commit strategy  enable.auto.commit=true \u0026amp; synchronous processing of batches with auto commit, offset will be committed automatically for you at regular interval (auto.commit.interval.ms=5000 by default) every time you call .poll(). If you don\u0026rsquo;t use synchronous processing, you will be in \u0026ldquo;at most once\u0026rdquo; behavior because offsets will be committed before your data is processed. enable.auto.commit=false \u0026amp; manual commit of offsets (recommended)  Consumer Offset reset behavior  auto.offset.reset=latest will read from the end of the log auto.offset.reset=earliest will read from the start of the log auto.offset.reset=none will throw exception of no offset is found Consumer offset can be lost if hasn\u0026rsquo;t read new data in 7 days. This can be controlled by broker setting offset.retention.minutes  Consumer Poll Behavior  fetch.min.bytes = 1 (default), Control how much data you want to pull at least on each request. Help improving throughput and decreasing request number. At the cost of latency. max.poll.records = 500 (default), Controls how many records to receive per poll request. Increase if your messages are very small and have a lot of available RAM. max.partition.fetch.bytes = 1MB (default), Maximum data returned by broker per partition. If you read from 100 partition, you will need a lot of memory (RAM) fetch.max.bytes = 50MB (default), Maximum data returned for each fetch request (covers multiple partition). Consumer performs multiple fetches in parallel.  Consumer Heartbeat Thread  Heartbeat mechanism is used to detect if consumer application in dead. session.timeout.ms=10s (default), If heartbeat is not sent in 10 second period, the consumer is considered dead. Set lower value to faster consumer rebalances heartbeat.interval.ms=3s (default), Heartbeat is sent in every 3 seconds interval. Usually 1/3rd of session.timeout.ms  Consumer Poll Thread  Poll mechanism is also used to detect if consumer application is dead. max.poll.interval.ms = 5min (default), Max amount of time between two .poll() calls before declaring consumer dead. If processing of message batch takes more time in general in application then should increase the interval.  Kafka Guarantees  Messages are appended to a topic-partition in the order they are sent Consumer read the messages in the order stored in topic-partition With a replication factor of N, producers and consumers can tolerate upto N-1 brokers being down As long as number of partitions remains constant for a topic ( no new partition), the same key will always go to same partition  Client Bi-Directional Compatibility  an Older client (1.1) can talk to Newer broker (2.0) a Newer client (2.0) can talk to Older broker (1.1)  Kafka Connect  Source connect Get data from common data source to Kafka for e.g. import data from external database to kafka Sink connect Publish data from Kafka to common data source for e.g. export data from Kafka to external database  Zookeeper   ZooKeeper servers will be deployed on multiple nodes. This is called an ensemble. An ensemble is a set of 2n + 1 ZooKeeper servers where n is any number greater than 0. The odd number of servers allows ZooKeeper to perform majority elections for leadership. At any given time, there can be up to n failed servers in an ensemble and the ZooKeeper cluster will keep quorum. If at any time, quorum is lost, the ZooKeeper cluster will go down.\n  Zookeeper cluster to withstand loss of 2 server, require total of 2*2+1 = 5 servers.\n  In Zookeeper multi-node configuration, initLimit and syncLimit are used to govern how long following ZooKeeper servers can take to initialize with the current leader and how long they can be out of sync with the leader. If tickTime=2000, initLimit=5 and syncLimit=2 then a follower can take (tickTimeinitLimit) = 10000ms to initialize and may be out of sync for up to (tickTimesyncLimit) = 4000ms\n  In Zookeeper multi-node configuration, The server.* properties set the ensemble membership. The format is\nserver.\u0026lt;myid\u0026gt;=\u0026lt;hostname\u0026gt;:\u0026lt;leaderport\u0026gt;:\u0026lt;electionport\u0026gt;, where:\n myid is the server identification number. In this example, there are three servers, so each one will have a different myid with values 1, 2, and 3 respectively. The myid is set by creating a file named myid in the dataDir that contains a single integer in human readable ASCII text. This value must match one of the myid values from the configuration file. If another ensemble member has already been started with a conflicting myid value, an error will be thrown upon startup. leaderport is used by followers to connect to the active leader. This port should be open between all ZooKeeper ensemble members. electionport is used to perform leader elections between ensemble members. This port should be open between all ZooKeeper ensemble members.    KAFKA CLI  ① Start a zookeeper at default port 2181\n$bin/zookeeper-server-start.sh config/zookeeper.properties  ② Start a kafka server at default port 9092\n$bin/kafka-server-start.sh config/server.properties  ③ Create a kafka topic \u0026lsquo;my-first-topic\u0026rsquo; with 3 partitions and 3 replicas\n$bin/kafka-topics.sh --zookeeper localhost:2181 --topic my-first-topic --create --replication-factor 3 --partitions 3  ④ List all kafka topics\n$bin/kafka-topics.sh --zookeeper localhost:2181 --list  ⑤ Describe kafka topic \u0026lsquo;my-first-topic\u0026rsquo;\n$bin/kafka-topics.sh --zookeeper localhost:2181 --topic my-first-topic --describe  ⑥ Delete kafka topic \u0026lsquo;my-first-topic\u0026rsquo;\n$bin/kafka-topics.sh --zookeeper localhost:2181 --topic my-first-topic --delete  Note: This will have no impact if delete.topic.enable is not set to true\n⑦ Find out all the partitions without a leader\n$bin/kafka-topics.sh --zookeeper localhost:2181 --describe --unavailable-partitions  ⑧ Produce messages to Kafka topic my-first-topic\n$bin/kafka-console-producer.sh --broker-list localhost:9092 --topic my-first-topic --producer-property acks=all \u0026gt; message 1 \u0026gt; message 2 \u0026gt; ^C  ⑨ Start Consuming messages from kafka topic my-first-topic\n$bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic my-first-topic --from-beginning \u0026gt; message 1 \u0026gt; message 2  ⑩ Start Consuming messages in a consumer group from kafka topic my-first-topic\n$bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic my-first-topic --group my-first-consumer-group --from-beginning  ⑪ List all consumer groups\n$bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list  ⑫ Describe consumer group\n$bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe -group my-first-consumer-group  ⑬ Reset offset of consumer group to replay all messages\n$bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe -group my-first-consumer-group --reset-offsets --to-earliest --execute --topic my-first-topic  ⑭ Shift offsets by 2 (forward) as another strategy\nbin/kafka-consumer-groups --bootstrap-server localhost:9092 --group my-first-consumer-group --reset-offsets --shift-by 2 --execute --topic my-first_topic  ⑮ Shift offsets by 2 (backward) as another strategy\nbin/kafka-consumer-groups --bootstrap-server localhost:9092 --group my-first-consumer-group --reset-offsets --shift-by -2 --execute --topic my-first_topic  Kafka Streams  Kafka Streams is used for building streaming applications which transform data of one Kafka topics and feeds to another Kafka topic.\n1. Stateless Operators branch filter inverseFilter flatMap flatMapValues foreach groupByKey groupBy map mapValues  2. Stateful Operators join aggregate count reduce windowing  3. Window 1) Tumbling window  Time based, Fixed Size, Non overlapping, Gap less windows For e.g. if window-size=5min and advance-interval =5min then it looks like [0-5min] [5min-10min] [10min-15min]\u0026hellip;..  2) Hopping window  Time based, Fixed Size, Overlapping windows For e.g. if widow-size=5min and advance-interval=3min then it looks like [0-5min] [3min-8min] [6min-11min]\u0026hellip;\u0026hellip;  3) Sliding window  Fixed size overlapping window that works on the difference between record timestamp Used only for join operation  4) Session window  Session based, Dynamically sized, Non overlapping, Data driven window. Used to aggregate key based events into session.  For more information, refer Apache Kafka Documentation on windowing\n4. SerDes data types Kafka stream operations require SerDes (Serializer/Deserializer) to identify data type.\nbyte[] ByteBuffer Double Integer Long String  5. Streams DSL 1) KStream  Abstraction of record stream from subset of partitions of topic In database table analogy, interpreted as INSERT statement In an e-commerce application, any type of transactions like purchase, payment should be modeled as KStream  2) KTable  Abstraction of changelog stream from subset of partitions of topic In database table analogy, interpreted as UPDATE statement In an e-commerce application, mostly static data like inventory list, customer list and aggregated data like total sales should be modeled as KTable  3) GlobalKTable  Abstraction of changelog stream from all partitions of topic In database table analogy, interpreted as UPDATE statement  For more information, refer Apache Kafka Documentation on stream DSL\n6. Join Operands    Join Operands Output Type co-partition required Join Type     KStream-to-KStream KStream Windowed Yes key and window based   KTable-to-KTable KTable Non-windowed Yes key or foreign-key based   KStream-to-KTable KStream Non-windowed Yes key based   KStream-to-GlobalKTable KStream Non-windowed No key or foreign-key based    co-partition co-partition means both the left and right join operand topics must have same number of partitions.\nA join between a topic A ( 5 parition ) and topic B (3 partition) is possible using KStream-to-GlobalKTrade since it does not require co-partition.\nKAFKA API   Click here to find out how we can create a Safe and high throughput Kafka Producer using Java. Click here to find out how we can create a Kafka consumer using Java with manual auto commit enabled.  Confluent Schema Registry  1. Avro Primitive Types 1. null 2. boolean 3. int (32 bit) 4. long (64 bit) 5. float (32 bit) 6. double (64 bit) 7. byte[] (8 bit) 8. string (char sequence)  Complex Types 1. record 2. enum 3. array 4. map 5. union 6. fixed  Avro Schema Definition namespace (required) type (required) =\u0026gt; record, enum, array, map, union, fixed name (required) doc (optional) aliases (optional) fields (required) { name (required) type (required) doc (optional) default (optional) order (optional) aliases (optional) }  \n2. Confluent Schema Notes  Schema Registry stores all schemas in a Kafka topic _schemas defined by kafkastore.config = _schemas (default) which is a single partition topic with log compacted. The default response media type application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json are used in response header. HTTP and HTTPS client protocol are supported for schema registry. Prefix to apply to metric names for the default JMX reporter kafka.schema.registry Default port for listener is 8081 Confluent support primitive types of null, Boolean, Integer, Long, Float, Double, String, byte[], and complex type of IndexedRecord. Sending data of other types to KafkaAvroSerializer will cause a SerializationException  \n3. Confluent Schema Compatibility Types BACKWARD  Consumer using schema X can process data produced with schema X or X-1. In case of BACKWARD_TRANSITIVE, consumer using schema X can process data produced with all previous schema X, X-1, X-2 and so on Delete field without default value (Required field) is allowed. In this case, Consumer ignore this field. Add field with default value (Optional field) is allowed. In this case, Consumer will assign default value. BACKWARD is default compatibility type in confluent schema registry. There is no assurance that consumers using older schema can read data produced using the new schema. Therefore, upgrade all consumers before you start producing new events.  FORWARD  Data produced using schema X can be ready by consumers with schema X or X-1. In case of FORWARD_TRANSITIVE, data produced using schema X can be ready by consumers with all previous schema X, X-1, X-2 and so on Add field without default value (Required field) is allowed. In this case, Consumer ignore this field. Delete field with default value (Optional field) is allowed. In this case, Consumer will assign default value. There is no assurance that consumers using the new schema can read data produced using older schema. Therefore, first upgrade all producers to using the new schema and make sure the data already produced using the older schema are not available to consumers, then upgrade the consumers.  FULL  Backward and forward compatible between schema X and X-1. In case of FULL_TRANSITIVE, backward and forward compatible between all previous schema X and X-1 and X-2 and so on Modify field with default value (Optional field) is allowed. There are assurances that consumers using older schema can read data produced using the new schema and that consumers using the new schema can read data produced using older schema. Therefore, you can upgrade the producers and consumers independently.  NONE  Compatibility type means schema compatibility checks are disabled. Upgrading Consumer or Producer depends. For example, modifying a field type from Number to String. In this case, you will either need to upgrade all producers and consumers to the new schema version at the same time  Default Ports   Zookeeper Client Port: 2181 Zookeeper Leader Port: 3888 Zookeeper Election Port (Peer port): 2888 Broker: 9092 REST Proxy: 8082 Schema Registry: 8081 KSQL: 8088 ","permalink":"https://codingnconcepts.com/post/apache-kafka-ccdak-exam-notes/","tags":["Confluent Kafka CCDAK","Popular Posts"],"title":"Apache Kafka CCDAK Exam Notes"},{"categories":["Javascript"],"contents":"This post explains the DOM, Virtual DOM and Shadow DOM concepts and their differences\u0026hellip;\nDOM DOM in shorthand for Document Object Model - It’s a way of representing a structured content via objects. HTML, XHTML, XML are some of the ways to write structured content.\nWhen browser renders an HTML page, it sort of compiles this HTML behind the scene and generates a DOM Object. This DOM Object can be accessed and manipulated by JavaScript and CSS for e.g. when you click on a button, a DOM click event is triggered which JavaScript can listen and manipulate DOM to show a pop up dialog.\nBy default, when there is any change in the DOM Object, browser re-render the whole page. In this way changes in DOM are expensive in terms of performance.\nTo solve this issue, new concepts came out. Let\u0026rsquo;s look at them:-\nVirtual DOM  The virtual DOM is an in-memory representation of the real DOM. Popular UI frameworks React.js and Vue.js, both use Virtual DOM. The concept of virtual DOM is mainly to solve performance issue, Here is how:-   Any update in the DOM first applied to Virtual DOM instead of applying directly to actual DOM. Then it compare the changes against actual DOM through a process call diffing and apply the changes efficiently to actual DOM by only re-rendering the changed elements. In additional to that, It allows to collect several changes to be applied at once, so not every single change causes a re-render, but instead re-rendering only happens once after a set of changes were applied from virtual DOM to actual DOM  Shadow DOM  You can think of the shadow DOM as a DOM within a DOM. A real DOM can have many shadow DOMs but each share DOM has its own isolated DOM tree with its own elements and styles, completely isolated from the real DOM. Concept of Shadow DOM is natively supported by most of the browsers including Firefox, Chrome, Opera and Safari. You can make reusable native web components which follows Shadow DOM concept. Implementation and styling of native web component is hidden within the Shadow DOM and having no impact from the outer DOM. Polymer LitElement and Vaadin provides open source reusable web components built using shadow DOM concept.  Shadow DOM is not a new concept Although only recently specified for use by web authors, the shadow DOM has been used by user agents for years to create and style complex components such as form elements. Let’s take the range input element, for example. To create one on the page, all we have to do is add the following element:\n\u0026lt;input type=\u0026#34;range\u0026#34;\u0026gt; That one element results in the following component:\n  If we dig deeper, we will see that this one \u0026lt;input\u0026gt; element is actually made up of several smaller \u0026lt;div\u0026gt; elements, controlling the track and the slider itself.\n This is achieved using the shadow DOM. The element that is exposed to the host HTML document the simple \u0026lt;input\u0026gt;, but underneath it there are elements and styles related to the component that do not form part of the DOM’s global scope.\n","permalink":"https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/","tags":["Javascript Interview","Javascript Core"],"title":"Virtual Dom vs Shadow Dom"},{"categories":["Java","Kafka"],"contents":"Implementation of Kafka Consumer using Java\nppackage com.abc; import java.time.Duration; import java.util.Collections; import java.util.Properties; import java.util.concurrent.ExecutionException; import org.apache.kafka.clients.consumer.ConsumerConfig; import org.apache.kafka.clients.consumer.ConsumerRecord; import org.apache.kafka.clients.consumer.ConsumerRecords; import org.apache.kafka.clients.consumer.KafkaConsumer; import org.apache.kafka.common.serialization.StringDeserializer; public class KafkaConsumerTest { public static void main(String[] args) throws InterruptedException, ExecutionException{ //Create consumer property  String bootstrapServer = \u0026#34;localhost:9092\u0026#34;; String groupId = \u0026#34;my-first-consumer-group\u0026#34;; String topicName = \u0026#34;my-first-topic\u0026#34;; Properties properties = new Properties(); properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer); properties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName()); properties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName()); properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, groupId); properties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \u0026#34;earliest\u0026#34;); properties.setProperty(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, \u0026#34;false\u0026#34;); //Create consumer  KafkaConsumer\u0026lt;String, String\u0026gt; consumer = new KafkaConsumer\u0026lt;\u0026gt;(properties); //Subscribe consumer to topic(s)  consumer.subscribe(Collections.singleton(topicName)); //Poll for new data  while(true){ ConsumerRecords\u0026lt;String, String\u0026gt; records = consumer.poll(Duration.ofMillis(1000)); for(ConsumerRecord\u0026lt;String, String\u0026gt; record: records){ System.out.println(record.key() + record.value()); System.out.println(record.topic() + record.partition() + record.offset()); } //Commit consumer offset manually (recommended)  consumer.commitAsync(); } } } ","permalink":"https://codingnconcepts.com/post/apache-kafka-consumer-using-java/","tags":["Java Kafka","Java Program"],"title":"Kafka Consumer Using Java"},{"categories":["Java","Kafka"],"contents":"Implementation of Kafka Producer using Java\npackage com.abc.demo; import java.util.Properties; import java.util.concurrent.ExecutionException; import org.apache.kafka.clients.producer.KafkaProducer; import org.apache.kafka.clients.producer.ProducerConfig; import org.apache.kafka.clients.producer.ProducerRecord; import org.apache.kafka.common.serialization.StringSerializer; public class KafkaProducerTest { public static void main(String[] args) throws InterruptedException, ExecutionException{ //Create producer property  String bootstrapServer = \u0026#34;localhost:9092\u0026#34;; Properties properties = new Properties(); properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer); properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName()); properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName()); //Create safe producer  properties.setProperty(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, \u0026#34;true\u0026#34;); properties.setProperty(ProducerConfig.ACKS_CONFIG, \u0026#34;all\u0026#34;); properties.setProperty(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, \u0026#34;5\u0026#34;); properties.setProperty(ProducerConfig.RETRIES_CONFIG, Integer.toString(Integer.MAX_VALUE)); //High throughput producer (at the expense of a bit of latency and CPU usage)  properties.setProperty(ProducerConfig.COMPRESSION_TYPE_CONFIG, \u0026#34;snappy\u0026#34;); properties.setProperty(ProducerConfig.LINGER_MS_CONFIG, \u0026#34;20\u0026#34;); //20ms wait time  properties.setProperty(ProducerConfig.BATCH_SIZE_CONFIG, Integer.toString(32*1024)); //32KB batch size  //Create producer  KafkaProducer\u0026lt;String, String\u0026gt; producer = new KafkaProducer\u0026lt;\u0026gt;(properties); //create a producer record  ProducerRecord\u0026lt;String, String\u0026gt; record = new ProducerRecord\u0026lt;\u0026gt;(\u0026#34;topicName\u0026#34;, \u0026#34;firstRecord\u0026#34;); //create producer record with key  //new ProducerRecord\u0026lt;\u0026gt;(\u0026#34;topicName\u0026#34;, \u0026#34;MessageKey\u0026#34;, \u0026#34;Message\u0026#34;);  //create producer record with key and partition number  //new ProducerRecord\u0026lt;\u0026gt;(\u0026#34;topicName\u0026#34;, 1 /*partition number*/, \u0026#34;MessageKey\u0026#34;, \u0026#34;Message\u0026#34;);  //send data - asynchronous  //without callback  //producer.send(record);  //with callback  producer.send(record, (recordMetadata, exception) -\u0026gt; { if(exception == null){ System.out.println(recordMetadata.topic() + \u0026#34;+\u0026#34; + recordMetadata.partition() + \u0026#34;+\u0026#34; + recordMetadata.offset()); }else{ System.err.println(exception.getMessage()); } }); //send data - synchronous  //without callback  //producer.send(record).get(); //.get() make it synchronous call  //flush data  producer.flush(); //flush and close producer  producer.close(); } } ","permalink":"https://codingnconcepts.com/post/apache-kafka-producer-using-java/","tags":["Java Kafka","Java Program"],"title":"Kafka Producer Using Java"},{"categories":["Java"],"contents":"In this tutorial, we\u0026rsquo;ll learn about Immutable Class and its benefits in thread-safety, caching and collections. We will also look at rules to create immutable classes and eventually we\u0026rsquo;ll write an Immutable Class from scratch in Java.\nWhat is Immutable Class? Immutable Class means that once an object is initialized from this Class, we cannot change the state of that object.\nIn other words, An immutable object can’t be modified after it has been created. When a new value is needed, the accepted practice is to make a copy of the object that has the new value.\nExamples In Java, All primitive wrapper classes (Integer, Byte, Long, Float, Double, Character, Boolean and Short) and String are immutable in nature.\nString is the most popular Immutable Class known among developers. String object cannot be modified once initialized. Operations like trim(), substring(), replace(), toUpperCase(), toLowerCase() always return a new instance and don’t affect the current instance.\nIn the below example, s1.toUpperCase() returns new instance which need to assign back to s1, if you want s1 to refer to new uppercase instance.\nString s1 = new String(\u0026#34;CodingNConcepts\u0026#34;); String s2 = s1.toUpperCase(); System.out.println(s1 == s2); //false s1 = s2; //assign back to s1 System.out.println(s1 == s2); //true Benefits of Immutable Class Some of the key benefits of Immutable Class are:-\n1. Mutable vs Immutable Object A mutable object starts with one state (initial values of the instance variables). Each mutation of the instance variable takes the object to another state. This brings in the need to document all possible states a mutable object can be in. It is also difficult to avoid inconsistent or invalid states. Hence, all these makes a mutable object difficult to work with.\nWhereas, immutable object have just one state, which is first and foremost benefit of Immutable Class.\n2. Thread safety Immutable objects are inherently thread-safe. They do not require synchronization. Since there is no way the state of an immutable object can change, there is no possibility of one thread observing the effect of another thread. We do not have to deal with the intricacies of sharing an object among threads (like locking, synchronization, making variables volatile etc.). Thus, we can freely share immutable objects. This is the easiest way to achieve thread safety.\n3. Reusable/Cacheable Immutable objects encourage to cache or store the frequently used instances rather than creating one each time. This is because two immutable instances with the same properties/values are equal.\nSome examples of this being applied are as follows:-\nPrimitive wrapper classes\nCreating primitive wrapper objects (Integer, Float, Double etc) using static factory method valueOf does not always return new wrapper instances. In case of Integer, they cache Integer values from -128 to 127 by default.\nInteger oneV1 = new Integer(1); Integer oneV2 = new Integer(1); System.out.println(oneV1 == oneV2); //false System.out.println(oneV1.equals(oneV2)); //true  oneV1 = Integer.valueOf(1); //returns cached instance oneV2 = Integer.valueOf(1); //returns cached instance System.out.println(oneV1 == oneV2); //true System.out.println(oneV1.equals(oneV2)); //true BigInteger\nBigInteger stores some common BigInteger values as instance variables.\n/** * The BigInteger constant zero. */ public static final BigInteger ZERO = new BigInteger(new int[0], 0); This reduces the memory footprint and the garbage collection costs.\n4. Building blocks for Collections The immutable objects make a great building block for Collections as compare to mutable objects. Let\u0026rsquo;s understand the problem we face with mutable objects in Collections.\nFirst of all, we create a mutable Person class\nclass Person { String name; public String getName() { return name; } public void setName(String name) { this.name = name; } @Override public String toString() { return \u0026#34;Person { name: \u0026#34; + name + \u0026#34; }\u0026#34;; } } Now let\u0026rsquo;s create some person objects to create Set of persons:-\nPerson person1 = new Person(); person1.setName(\u0026#34;Adam\u0026#34;); Person person2 = new Person(); person2.setName(\u0026#34;Ben\u0026#34;); Set\u0026lt;Person\u0026gt; setOfPerson = new HashSet\u0026lt;\u0026gt;(Arrays.asList(person1, person2)); System.out.println(setOfPerson); person1.setName(\u0026#34;Charlie\u0026#34;); System.out.println(setOfPerson); Output [Person { name: Adam }, Person { name: Ben }] [Person { name: Charlie }, Person { name: Ben }] We wanted to create a Set of persons Adam and Ben but next part of the code has mutated the Adam to Charlie which is not intended. We will solve this problem by making an immutable class ImmutablePerson in subsequent part of the article.\nAs we saw that mutable objects can be mutated even if not intended, immutable objects make a great fit to be used as Keys of a Map, in Set, List, and other collections.\nHow to create Immutable Class? In order to create an Immutable Class, you should keep following points in mind:-\n Declare the class as final so that it cannot be extended and subclasses will not be able to override methods. Make all the fields as private so direct access in not allowed Make all the fields as final so that value cannot be modified once initialized Provide no setter methods — setter methods are those methods which modify fields or objects referred to by fields. Initialize all the final fields through a constructor and perform a deep copy for mutable objects. If the class holds a mutable object:  Don\u0026rsquo;t provide any methods that modify the mutable objects. Always return a copy of mutable object from getter method and never return the actual object reference.    Let\u0026rsquo;s apply all the above points and create our immutable class ImmutablePerson\nImmutablePerson.java /** * Immutable class should mark as final so it can not be extended. * Fields should mark as private so direct access is not allowed. * Fields should mark as final so value can not be modified once initialized. **/ public final class ImmutablePerson { // String - immutable  private final String name; // Integer - immutable  private final Integer weight; // Date - mutable  private final Date dateOfBirth; /** * All the final fields are initialized through constructor * Perform a deep copy of immutable objects */ public ImmutablePerson(String name, Integer weight, Date dateOfBirth){ this.name = name; this.weight = weight; this.dateOfBirth = new Date(dateOfBirth.getTime()); } /********************************************** ***********PROVIDE NO SETTER METHODS ********* **********************************************/ /** * String class is immutable so we can return the instance variable as it is **/ public String getName() { return name; } /** * Integer class is immutable so we can return the instance variable as it is **/ public Integer getWeight() { return weight; } /** * Date class is mutable so we need a little care here. * We should not return the reference of original instance variable. * Instead a new Date object, with content copied to it, should be returned. **/ public Date getDateOfBirth() { return new Date(dateOfBirth.getTime()); } @Override public String toString() { return \u0026#34;Person { name: \u0026#34; + name + \u0026#34;, weight: \u0026#34; + weight + \u0026#34;, dateOfBirth: \u0026#34; + new SimpleDateFormat(\u0026#34;dd-MM-yyyy\u0026#34;).format(dateOfBirth) + \u0026#34;}\u0026#34;; } } Now, Let\u0026rsquo;s create immutable person objects to create Set of persons:-\nImmutablePerson person1 = new ImmutablePerson(\u0026#34;Adam\u0026#34;, 55, new SimpleDateFormat(\u0026#34;dd-MM-yyyy\u0026#34;).parse(\u0026#34;01-01-2001\u0026#34;)); ImmutablePerson person2 = new ImmutablePerson(\u0026#34;Ben\u0026#34;, 50, new SimpleDateFormat(\u0026#34;dd-MM-yyyy\u0026#34;).parse(\u0026#34;02-02-2002\u0026#34;)); Set\u0026lt;ImmutablePerson\u0026gt; setOfPerson = new HashSet\u0026lt;\u0026gt;(Arrays.asList(person1, person2)); System.out.println(setOfPerson); /** * ImmutablePerson do not provide setter methods, * no way to mutate name, weight, or date property fields. */ //person1.setName(\u0026#34;Charlie\u0026#34;); //person1.setWeight(90); //person1.setDate(new SimpleDateFormat(\u0026#34;dd-MM-yyyy\u0026#34;).parse(\u0026#34;03-03-2003\u0026#34;));  /** * getDateOfBirth() method returns new instance of date, * setYear() will not change value of person1\u0026#39;s date field. */ Date person1Date = person1.getDateOfBirth(); person1Date.setYear(2020); System.out.println(setOfPerson); Output [Person { name: Adam, weight: 55, dateOfBirth: 01-01-2001}, Person { name: Ben, weight: 50, dateOfBirth: 02-02-2002}] [Person { name: Adam, weight: 55, dateOfBirth: 01-01-2001}, Person { name: Ben, weight: 50, dateOfBirth: 02-02-2002}] We see that we can not mutate the collection of ImmutablePerson once created.\nSummary In this tutorial, we learned about Immutable Class in Java and its benefits. Moreover, Immutable Class is frequently asked interview question to check your understanding on design pattern, immutable \u0026amp; mutable objects and final keyword.\nWhat do you think?  As per Oracle Docs for Immutable Classes, Don\u0026rsquo;t allow subclasses to override methods. The simplest way to do this is to declare the class as final. A more sophisticated approach is to make the constructor private and construct instances in factory methods.\n Please note that we have marked the class as final and constructor as public in our ImmutablePerson class.\nIt is debatable whether we should use private constructor with static factory method to create instances since private constructor. My view is we are restricting the instance creation by using private constructor, which is not a desired scenario for immutability.\nWhat\u0026rsquo;s your thoughts on this? Please comment.\nReferences:  Java Developer Central ","permalink":"https://codingnconcepts.com/java/immutable-class-using-java/","tags":["Java Design Pattern"],"title":"Immutable Class in Java"},{"categories":["Java"],"contents":"Fibonacci series implementation in java is frequently asked question in interview at fresher level. Moreover, it is a very famous example to show how to use recursive function in java.\npublic class Fibonacci { public static void main(String[] args){ fibonacci(15); } /** * This method is used to print fibonacci series * @param n is total number of elements */ private static void fibonacci(int n){ for(int i = 0 ; i \u0026lt; n; i ++){ System.out.print(fib(i)+\u0026#34;, \u0026#34;); } } /** * This method is used recursively to find fibonacci * element at nth index. * @param n is index * @return element */ private static int fib(int n){ if(n \u0026lt; 2) return n; return fib(n-1) + fib(n-2); } } Output 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377 ","permalink":"https://codingnconcepts.com/java/fibonacci-series-using-recursive/","tags":["Java Recursive"],"title":"Fibonacci Series Using Recursive function"},{"categories":["Java"],"contents":"Why it is called bubble sort ? Bubble Sort is nothing but a comparison algorithm where -\n At the end of first iteration, largest element in the array get placed at last index At the end of second iteration, second largest element in the array get placed at second last index and so on\u0026hellip;  This way large elements are moving towards the last indexes and hence small elements are moving towards the starting indexes which is also termed as smaller elements \u0026ldquo;bubble\u0026rdquo; to the top of the list that is why it is called bubble sort.\nStep-by-step example Let us take the array of numbers \u0026ldquo;5 1 4 2 8\u0026rdquo;, and sort the array from lowest number to greatest number using bubble sort. In each step, elements written in bold are being compared. Three passes will be required.\nFirst Pass: ( 5 1 4 2 8 ) \u0026mdash;\u0026mdash; ( 1 5 4 2 8 ), Here, algorithm compares the first two elements, and swaps since 5 \u0026gt; 1.\n( 1 5 4 2 8 ) \u0026mdash;\u0026mdash; ( 1 4 5 2 8 ), Swap since 5 \u0026gt; 4\n( 1 4 5 2 8 ) \u0026mdash;\u0026mdash; ( 1 4 2 5 8 ), Swap since 5 \u0026gt; 2\n( 1 4 2 5 8 ) \u0026mdash;\u0026mdash; ( 1 4 2 5 8 ), Now, since these elements are already in order (8 \u0026gt; 5), algorithm does not swap them.\nSecond Pass: ( 1 4 2 5 8 ) \u0026mdash;\u0026mdash; ( 1 4 2 5 8 )\n( 1 4 2 5 8 ) \u0026mdash;\u0026mdash; ( 1 2 4 5 8 ), Swap since 4 \u0026gt; 2\n( 1 2 4 5 8 ) \u0026mdash;\u0026mdash; ( 1 2 4 5 8 )\n( 1 2 4 5 8 ) \u0026mdash;\u0026mdash; ( 1 2 4 5 8 )\nNow, the array is already sorted, but the algorithm does not know if it is completed. The algorithm needs one whole pass without any swap to know it is sorted.\nThird Pass: ( 1 2 4 5 8 ) \u0026mdash;\u0026mdash; ( 1 2 4 5 8 )\n( 1 2 4 5 8 ) \u0026mdash;\u0026mdash; ( 1 2 4 5 8 )\n( 1 2 4 5 8 ) \u0026mdash;\u0026mdash; ( 1 2 4 5 8 )\n( 1 2 4 5 8 ) \u0026mdash;\u0026mdash; ( 1 2 4 5 8 )\npackage com.abc; public class BubbleSort { public static void main(String[] args){ int[] array = new int[]{5, 1, 12, -5, 16}; BubbleSort.sort(array); } private static void sort(int[] array){ int count = 0; for(int i = array.length ; i \u0026gt; 0 ; i --, count++){ for(int j = 0 ; j \u0026lt; array.length-1 ; j++, count++){ if(array[j] \u0026gt; array[j+1]){ swapNumbers(j, j+1, array); } } } printNumbers(array, count); } private static void swapNumbers(int i, int j, int[] array) { int temp; temp = array[i]; array[i] = array[j]; array[j] = temp; } private static void printNumbers(int[] array, int count) { System.out.print(\u0026#34;Sorted Array : {\u0026#34;); for(int i : array){ System.out.print(i + \u0026#34; \u0026#34;); } System.out.print(\u0026#34;}, n : \u0026#34; + array.length + \u0026#34;, comparisons : \u0026#34; + count); } } Output Sorted Array : {-5 1 5 12 16 }, n : 5, comparisons : 25 Time Complexity for worst case is O(n2). Algorithm can be further improved :\nprivate static void sort(int[] array){ int count = 0; for(int i = array.length ; i \u0026gt; 0 ; i --, count++){ for(int j = 0 ; j \u0026lt; i-1 ; j++, count++){ if(array[j] \u0026gt; array[j+1]){ swapNumbers(j, j+1, array); } } } printNumbers(array, count); } Output Sorted Array : {-5 1 5 12 16 }, n : 5, comparisons : 15 ","permalink":"https://codingnconcepts.com/java/bubble-sort-using-java/","tags":["Java Sort"],"title":"Bubble Sort"},{"categories":["Java"],"contents":"Implementation of Elevator or Lift has been asked in many interviews. I have tried to implement it using muti-threading and TreeSet. TreeSet is used to store incoming request. It is a good choice here as it removes the duplicate requests and implements NavigableSet which provide you methods such as floor and ceiling.\nElevator in this program implements following features -\n If elevator is going up or down, it checks for nearest floor request to process first in that direction. If there is no request to process, it waits at last processed floor. If a new request comes while elevator is processing a request. It process the new request first if it is nearest than the processing floor in same direction.  import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.TreeSet; public class MyLift { public static void main(String[] args) { System.out.println(\u0026#34;Welcome to MyLift\u0026#34;); // RequestListenerThread to read requested floor and add to Set  Thread requestListenerThread = new Thread(new RequestListener(), \u0026#34;RequestListenerThread\u0026#34;); // RequestProcessorThread to read Set and process requested floor  Thread requestProcessorThread = new Thread(new RequestProcessor(), \u0026#34;RequestProcessorThread\u0026#34;); Elevator.getInstance().setRequestProcessorThread(requestProcessorThread); requestListenerThread.start(); requestProcessorThread.start(); } } class Elevator { private static Elevator elevator = null; private TreeSet requestSet = new TreeSet(); private int currentFloor = 0; private Direction direction = Direction.UP; private Elevator() {}; private Thread requestProcessorThread; /** * @return singleton instance */ static Elevator getInstance() { if (elevator == null) { elevator = new Elevator(); } return elevator; } /** * Add request to Set * * @param floor */ public synchronized void addFloor(int f) { requestSet.add(f); if(requestProcessorThread.getState() == Thread.State.WAITING){ // Notify processor thread that a new request has come if it is waiting  notify(); }else{ // Interrupt Processor thread to check if new request should be processed before current request or not.  requestProcessorThread.interrupt(); } } /** * @return next request to process based on elevator current floor and direction */ public synchronized int nextFloor() { Integer floor = null; if (direction == Direction.UP) { if (requestSet.ceiling(currentFloor) != null) { floor = requestSet.ceiling(currentFloor); } else { floor = requestSet.floor(currentFloor); } } else { if (requestSet.floor(currentFloor) != null) { floor = requestSet.floor(currentFloor); } else { floor = requestSet.ceiling(currentFloor); } } if (floor == null) { try { System.out.println(\u0026#34;Waiting at Floor :\u0026#34; + getCurrentFloor()); wait(); } catch (InterruptedException e) { e.printStackTrace(); } } else { // Remove the request from Set as it is the request in Progress.  requestSet.remove(floor); } return (floor == null) ? -1 : floor; } public int getCurrentFloor() { return currentFloor; } /** * Set current floor and direction based on requested floor * * @param currentFloor * @throws InterruptedException */ public void setCurrentFloor(int currentFloor) throws InterruptedException { if (this.currentFloor \u0026gt; currentFloor) { setDirection(Direction.DOWN); } else { setDirection(Direction.UP); } this.currentFloor = currentFloor; System.out.println(\u0026#34;Floor : \u0026#34; + currentFloor); Thread.sleep(3000); } public Direction getDirection() { return direction; } public void setDirection(Direction direction) { this.direction = direction; } public Thread getRequestProcessorThread() { return requestProcessorThread; } public void setRequestProcessorThread(Thread requestProcessorThread) { this.requestProcessorThread = requestProcessorThread; } public TreeSet getRequestSet() { return requestSet; } public void setRequestSet(TreeSet requestSet) { this.requestSet = requestSet; } } class RequestProcessor implements Runnable { @Override public void run() { while (true) { Elevator elevator = Elevator.getInstance(); int floor = elevator.nextFloor(); int currentFloor = elevator.getCurrentFloor(); try{ if (floor \u0026gt;= 0) { if (currentFloor \u0026gt; floor) { while (currentFloor \u0026gt; floor) { elevator.setCurrentFloor(--currentFloor); } } else { while (currentFloor \u0026lt; floor) { elevator.setCurrentFloor(++currentFloor); } } System.out.println(\u0026#34;Welcome to Floor : \u0026#34; + elevator.getCurrentFloor()); } }catch(InterruptedException e){ // If a new request has interrupted a current request processing then check -  // -if the current request is already processed  // -otherwise add it back in request Set  if(elevator.getCurrentFloor() != floor){ elevator.getRequestSet().add(floor); } } } } } class RequestListener implements Runnable { @Override public void run() { while (true) { String floorNumberStr = null; try { // Read input from console  BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in)); floorNumberStr = bufferedReader.readLine(); } catch (IOException e) { e.printStackTrace(); } if (isValidFloorNumber(floorNumberStr)) { System.out.println(\u0026#34;User Pressed : \u0026#34; + floorNumberStr); Elevator elevator = Elevator.getInstance(); elevator.addFloor(Integer.parseInt(floorNumberStr)); } else { System.out.println(\u0026#34;Floor Request Invalid : \u0026#34; + floorNumberStr); } } } /** * This method is used to define maximum floors this elevator can process. * @param s - requested floor * @return true if requested floor is integer and upto two digits. (max floor = 99) */ private boolean isValidFloorNumber(String s) { return (s != null) \u0026amp;\u0026amp; s.matches(\u0026#34;\\\\d{1,2}\u0026#34;); } } enum Direction { UP, DOWN } ","permalink":"https://codingnconcepts.com/java/elevator-implementation-using-java/","tags":["Java Program"],"title":"Design Elevator (Lift) in Java"},{"categories":["Puzzles"],"contents":"This is my favorite weight puzzle which have been asked from me in many interviews over the past few years.\nPuzzle You have 12 balls identical in size and appearance but 1 is an odd weight (could be either light or heavy).\nYou have a weighing scale with no measurements so you can just compare weight of balls against each other. You have only 3 chances to weigh the balls in any combination using the scales. Determine which ball is the odd one and if it’s heavier or lighter than the rest. How do you do it?\nSolution First of all we will give a number to each ball i.e. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, and 12\nThe trick to solve these kind of weight problem is to divide them in groups. We will divide these 12 balls in 3 groups:\n   Group Ball Numbers     group 1 1, 2, 3, 4   group 2 5, 6, 7, 8   group 3 9, 10, 11, 12    Now we keep the group 3 aside and put group 1 balls on one side of scale and group 2 balls on another side of scale [1] with three possible outcomes:-\n1. Scale is balanced That means each ball in group 1 and group 2 are identical in weight and defective one is from group 3.\nWe know that defective one if from group 3 but we don\u0026rsquo;t know that defective one is lighter or heavier as compare to others. To solve this we need to weigh some balls from group 3 against some balls from either group 1 or group 2\nLet\u0026rsquo;s weight group 3 (9, 10, 11) vs group 2 (6, 7, 8) with three possible outcomes:-\n If group 3 (9, 10, 11) and group 2 (6, 7, 8) balances, then 12 is the odd ball. Weigh it against any other ball to determine if heavy or light. If group 3 (9, 10, 11) is heavy then they contain a heavy ball. Weigh 9 vs 10, if balanced then 11 is the odd heavy ball, else the heavier of 9 or 10 is the odd heavy ball. If group 3 (9, 10, 11) is light then they contain a light ball. Weigh 9 vs 10, if balanced then 11 is the odd light ball, else the lighter of 9 or 10 is the odd light ball.  2. group 1 is heavier then group 2 That means either group 1 (heavy ball) or group 2 (light ball) contains the defective ball and group 3 has all good balls.\nLet\u0026rsquo;s weigh 5,6,1 vs 7,2,12 with 3 possible outcomes:-\n If 5,6,1 vs 7,2,12 balances, then either 8 is the odd light ball or 3 or 4 is the odd heavy ball. Weigh 3 vs 4, if they balance then 8 is the odd light ball, or the heaviest of 3 vs 4 is the odd heavy ball. If 7,2,12 is heavy then either 2 is the odd heavy ball or 5 or 6 is the odd light ball. Weigh 5 vs 6, if balanced then 2 is the odd heavy ball, or the lightest of 5 vs 6 is the odd light ball. If 7,2,12 is light then either 7 is light or 1 is heavy. Weigh 7 against any other ball, if balanced then 1 is the odd heavy ball else 7 is the odd light ball.  3. group 2 is heavier then group 1 That means either group 2 (heavy ball) or group 1 (light ball) contains the defective ball and group 3 has all good balls.\nLet\u0026rsquo;s weigh 1,2,5 vs 3,6,12 with 3 possible outcomes:-\n If 1,2,5 vs 3,6,12 balances, then either 4 is the odd light ball or 7 or 8 is the odd heavy ball. Weigh 7 vs 8, if they balance then 4 is the odd light ball, or the heaviest of 7 vs 8 is the odd heavy ball. If 3,6,12 is heavy then either 6 is the odd heavy ball or 1 or 2 is the odd light ball. Weigh 1 vs 2, if balanced then 6 is the odd heavy ball, or the lightest of 1 vs 2 is the odd light ball. If 3,6,12 is light then either 3 is light or 5 is heavy. Weigh 3 against any other ball, if balanced then 5 is the odd heavy ball else 3 is the odd light ball. ","permalink":"https://codingnconcepts.com/puzzle/12-balls-weight-puzzle/","tags":["Interview Puzzle","Weight Puzzle"],"title":"12 Balls Weight Puzzle (Solved)"},{"categories":["Puzzles"],"contents":"This is my favorite weight puzzle which have been asked from me in many interviews over the past few years.\nPuzzle You have 8 balls identical in size and appearance. One of them is defective and weighs heavy than the others. You have a weighing scale with no measurements so you can just compare weight of balls against each other. How would you find the defective ball in 2 weightings?\nSolution First of all we will give a number to each ball i.e. 1, 2, 3, 4, 5, 6, 7, and 8\nThe trick to solve these kind of weight problem is to divide them in groups. We will divide these 8 balls in 3 groups:\n   Group Ball Numbers     group 1 1, 2, 3   group 2 4, 5, 6   group 3 7, 8    Now we keep the group 3 aside and put group 1 balls on one side of scale and group 2 balls on another side of scale [1] with three possible outcomes:-\n1. Scale is balanced That means each ball in group 1 and group 2 are identical in weight and defective one is from group 3.\nLet\u0026rsquo;s put group 3 balls 7 and 8 on each side of scale[2] with two possible outcomes:-\n If 7 is heavy then it is defective one If 8 is heavy then it is defective one  2. group 1 is heavier then group 2 That means defective balls is from group 1 i.e. either 1 or 2 or 3.\nLet\u0026rsquo;s keep number 3 aside and put balls 1 and 2 on each side of scale[2] with three possible outcomes:-\n If 1 and 2 balances, then 3 is defective one If 1 is heavy then it is defective one If 2 is heavy then it is defective one  3. group 2 is heavier then group 1 That means defective balls is from group 2 i.e. either 4 or 5 or 6.\nLet\u0026rsquo;s keep number 6 aside and put balls 4 and 5 on each side of scale[2] with three possible outcomes:-\n If 4 and 5 balances, then 6 is defective one If 4 is heavy then it is defective one If 5 is heavy then it is defective one  Reference:-\n[1] is weighting for the first time\n[2] is weighting for the second time\nConclusion That\u0026rsquo;s it guys. We have found the defective balls out of 8 balls in only 2 weightings.\nIf by now you understood the trick of dividing balls in group and keeping some balls aside then you can solve weight puzzle with any number of balls. Here is the cheat sheet:-\nCheat Sheet    N Balls Weight Puzzle Groups Min Weightings (Best Case) Min Weightings (Worst Case)     N = 2 [1] [2] 1 1   N = 3 [1] [2] [3] 1 1   N = 4 [1] [2] [3,4] 1 2   N = 5 [1,2] [3,4] [5] 1 2   N = 6 [1,2] [3,4] [5,6] 2 2   N = 6 [1,2,3] [4,5,6] [7] 1 2   N = 8 [1,2,3] [4,5,6] [7,8] 2 2   N = 9 [1,2,3] [4,5,6] [7,8,9] 2 2   N = 10 [1,2,3,4] [5,6,7,8] [9,10] 2 3   N = 11 [1,2,3,4] [5,6,7,8] [9,10,11] 2 3   N = 12 [1,2,3,4] [5,6,7,8] [9,10,11,12] 3 3    If you are interested in how to solve 12 balls weight puzzle with a twist that you don\u0026rsquo;t know whether it is light or heavy then check out this post - How to solve 12 balls weight puzzle\n","permalink":"https://codingnconcepts.com/puzzle/8-balls-weight-puzzle/","tags":["Interview Puzzle","Weight Puzzle"],"title":"8 Balls Weight Puzzle (Solved)"},{"categories":["Puzzles"],"contents":"This puzzle is a mix of weight and math puzzle.\nPuzzle What is the minimum number of weights needed for a scale that will be able to weigh objects from the weight of one pound to 100 pounds?\nSolution   If only one side pan of the balance-scale is used,\nWeights are : 2^n \u0026lt;100 i.e. {1,2,4,8,16,32,64} = 7\n  If both side pan of balance-scale is used,\nWeights are : 3^ n \u0026lt;100 i.e. {1,3,9,27,81} = 5\n  Mathematical Explanation For each weight, there are three things you can do:-\nput it on the left pan, the right pan, or not on the balance at all.\nSo, if you have n weights, there are 3n things you can do with them.\nOne of those things is not putting any weights on the scale, which is good if you want to weigh a 0-pound object, so really there are only (3n – 1) arrangements.\nThen, for each arrangement there’s also its mirror image (where all the weights are switched to the opposite pan of the scale), so there are at most (3n – 1)/2 arrangements of n weights.\nThat’s enough to prove that 4 weights can weigh at most 40 different things … 40 is really the upper limit for 4 weights.\nWith a fifth weight, you should be able to get up to (35 – 1)/2 =121 pounds.\n","permalink":"https://codingnconcepts.com/puzzle/minimum-set-of-weights/","tags":["Weight Puzzle","Maths Puzzle"],"title":"Minimum set of weight puzzle"},{"categories":["Puzzles"],"contents":"The Contaminated Pills Puzzle also one of my favorite puzzle which is frequently asked in interviews.\nPuzzle   You have 5 jars of full of pills. Each pill weighs 10 gram, except for contaminated pills contained in one jar, where each pill weighs 9 gm.\nGiven a scale, how could you tell which jar had the contaminated pills in just one measurement?\nSolution  Mark the jars with numbers 1, 2, 3, 4, and 5. Take 1 pill from jar 1, take 2 pills from jar 2, take 3 pills from jar 3, take 4 pills from jar 4 and take 5 pills from jar 5. Put all of them on the scale at once and take the measurement. Now, subtract the measurement from 150 ( 110 + 210 + 310 + 410 + 5*10) The result will give you the jar number which has contaminated pill. ","permalink":"https://codingnconcepts.com/puzzle/contaminated-pills/","tags":["Interview Puzzle","Weight Puzzle"],"title":"Contaminated Pills Puzzle"},{"categories":null,"contents":"नारी क्या है ये \u0026hellip;अबला या बला ?\nअबला है तो प्यार ही पूजा है, बला है तो आज ये तो कल कोई दूजा है\nअबला है तो पति के चरणों में परमेश्वर है, बला है तो परमेश्वर के चरणों में पति है\nअबला है तो सावन ही सावन, बला है तो पतझड़ ही पतझड़\nअबला है तो सत्कार सेवा सम्मान है, बला है तो मुसीबतों की दुकान है\nअबला हो या बला हो वक़्त ने यही बताया है, इसके अंतर्मन को कोई नर समझ न पाया है !\n ~~ आशीष लाहोटी ( १६ जुलाई २०११ ) ~~\n","permalink":"https://codingnconcepts.com/poetry/abla-ya-bala/","tags":null,"title":"अबला या बला ?"},{"categories":null,"contents":"साडे यारां दी यारी है अनमोल\nसाडे यारां दा टशन ही कुछ होर\nअस्सी करदे हां यारां नाल बहारां\nयारां बिन हुन अपना ना गुजारा\nयार ता साडे दिल चे बसदे ने\nयारी चे अस्सी जीन्दे मरदे ने\nये पल दो पल दी रिश्तेदारी नहीं\nऐ फ़र्ज़ ता उमरा तक निभांदे ने\nओ रब्बा मेरी इक अरदास सुन ले\nनसीबां विच यारां दा साथ लिख दे\nविछड़ना गंवारा नहीं अब यारां दा\nभावें दुखड़े होर हज़ार लिख दे\n ~~ Ashish Lahoti ( 07 Aug 2011, Friendship day ) ~~\n","permalink":"https://codingnconcepts.com/poetry/yaar-anmulle/","tags":null,"title":"Yaar Anmulle"},{"categories":null,"contents":"पापा, क्या लिखुँ मैं आपके बारे में,\nजिन हाथों ने इन पैरों को चलना सिखाया,\nजिनकी छांव में खुद को बढ़ता हुआ पाया,\nजिन्हे देख देख जिंदगी का मायना समझ में आया।\nखुद की खुशियों को ताक पे रख,\nहमारे लिए वो जीते मरते है।\nशायद हमारी एक ख़ुशी की झलक देख,\nवो अपने सब दुख भूल जाते है।\nवो इस भाग दौड़ की नौकरी में,\nहमें वक़्त नहीं दे पाते है।\nशायद वो भी कंही कुछ पलों को चुराकर,\nहमारे साथ जिंदगी जीना चाहते है।\nफिर क्यों माँ के प्यार के आगे,\nउनका प्यार फीका पड़ जाता है।\nशायद उनका प्यार जताने का तरीका है अलग,\nजो हमें कभी समझ में नहीं आता है।\n ~~ आशीष लाहोटी ( १९ जून २०११ फादर्स-डे ) ~~\n","permalink":"https://codingnconcepts.com/poetry/papa/","tags":null,"title":"पापा"},{"categories":null,"contents":"English version of poem \u0026ldquo;छोटा था तो अच्छा था !\u0026quot; by Prateek Saxena\nI still remember, the days of my childhood,\nThe innocence and truth,\nThe laughter, the attention, the life of carelessness,\nthose were the days of my youth.\nWhen crying and weeping were my leverages,\nTo get any sweets, any beverages\nWhen I used to fake a headache to miss my school,\nWhen my toys were enough to me to look cool.\nI remember those days, when we used to cry, On mother dearest every small fry,\nWhen she used to pick me up then in a bit,\nThat sense of gratification, the bliss.\nWhen waiting for dad was a pain everyday,\nFor the facade of studying was worth the pay,\nWhen my brother was the best partner in crime,\nWhen we covered our sister dearest everyday in slime.\nThen came the friends, the groups , the games,\nAlong with the fights, the joys, the flames,\nThose days are now gone far behind,\nBut at my heart, I am still a child.\n","permalink":"https://codingnconcepts.com/poetry/i-am-still-a-child/","tags":null,"title":"I'm still a child !!"},{"categories":null,"contents":"जिंदगी क्या है, रिश्तों का जंजाल।\nजितना दूर भागना चाहता हूँ, उतना ही अपने पास पाता हूँ,\nजितना समझने की कोशिश करता हूँ, उतना ही उलझ जाता हूँ।\nजिंदगी क्या है, वक़्त का साया।\nजब चाहता हूँ दूर भाग जाना, वो हर साँस में मेरे साथ रहती है,\nजब चाहता हूँ कुछ और जीना, वो हर रोज उम्र कम कर देती है।\nजिंदगी क्या है, रंगमंच का तमाशा।\nजिसमे हसना है तो रोना भी, रूठना है तो मनाना भी,\nजिसमे प्यार दोस्ती का वादा है तो वहीँ दुश्मनी निभाना भी।\nजिंदगी क्या है, मद का प्याला।\nजितना ज्यादा भरना चाहता हूँ, उतना छलकता जाता है,\nकितना भी पी लूँ, एक जाम तो हमेशा कम पड़ जाता है।\nजिंदगी क्या है, समुंद्र की लहर।\nवो जितना शोर और उफान लेकर आती है, उतने ही धीमे लोट जाती है,\nया फिर रेत,\nजितना मुठी में पकड़ने की कोशिश करता हूँ, उतनी छूटती चली जाती है।\nजिंदगी क्या है, ये हमेशा से एक राज है।\nपता नहीं कभी कोई इसके असली मकसद को समझ पायेगा,\nइसे समझने के लिए तो अगला जनम भी काम पड़ जायेगा।\n ~~ आशीष लाहोटी ( ०१ मई २०११ ) ~~\n","permalink":"https://codingnconcepts.com/poetry/jindagi-kya-hai/","tags":null,"title":"जिंदगी क्या है ?"},{"categories":null,"contents":"जन्दगी के इस मोड़ पे, जब हम उस वक़्त से बहुत दूर निकल गए,\nउन पलों को समेटना चाहता हूँ, जो मैंने कॉलेज (VIT) में बिताये।\nवो हॉस्टल में मम्मी पापा का यूँ छोड़ जाना,\nऔर फिर \u0026lsquo;F ब्लॉक\u0026rsquo; के bunk bed पे सोना,\nतब अनजान लोगों का अपना बन जाना याद आता है।\nवो लाइट जाने पे dustbin का नीचे फेंकना,\nऔर फिर तरह तरह की आवाजें निकलना,\nतब \u0026lsquo;राजेश गोविन्दन\u0026rsquo; का डंडे से पीटना याद आता है।\nवो बस ५ मिनट और सोच के Alarm का बंद कर देना,\nऔर फिर सुबह की पहली क्लास miss कर देना,\nतब दोस्तों का Class में मेरी Proxy लगाना याद आता है।\nवो जीन्स बस बिना धोये पहनते ही जाना,\nऔर फिर डिओ लगा के बिना नहाये क्लास भाग जाना,\nतब महीने में एक बार धोबी घाट लगाना याद आता है।\nवो प्रोफेसर के लेक्चर सुनते ही नींद आ जाना,\nऔर फिर लास्ट बेंच पे बैठ के मजाक करना,\nतब bunk मारके फ़ूड कोर्ट में veg puff खाना याद आता है।\nवो रात रात भर जागकर CS, Dota खेलना,\nऔर फिर FRIENDS, HIMYM, 24 की series ख़तम कर देना\nतब सुबह का breakfast miss कर देना याद आता है।\nवो दिवाली पे हॉस्टल में आधी रात को बम फोड़ना,\nऔर फिर होली पे सोते हुए दोस्तों पे रंग डालना,\nतब \u0026lsquo;Reviera\u0026rsquo; पे चार दिन खूब मस्ती करना याद आता है।\nवो exam में last moment पे course पता करना,\nऔर फिर साथ में मिलके night out करना,\nतब रात में चाय की घंटी बजने का इंतज़ार करना याद आता है।\nवो mess में लम्बी लाइन में लगना,\nऔर फिर बकवास खाना देख के भाग जाना,\nतब \u0026lsquo;Enzo\u0026rsquo; की maggi और सुनील अन्ना का \u0026lsquo;PD\u0026rsquo; याद आता है।\nवो दोस्त के b\u0026rsquo;day पर उसकी खूब धुलाई करना,\nऔर फिर गले लगा के उसे b\u0026rsquo;day wish करना,\nतब उसकी b\u0026rsquo;day treat पे लम्बा चौड़ा बिल आना याद आता है।\nवो interview clear न होने पे tense हो जाना,\nऔर फिर दोस्तों का मेरी काबिलियत पे भरोसा दिलाना,\nतब job मिलने पर उनका मुझसे ज्यादा खुश होना याद आता है।\nवो वक़्त नहीं ठहर पाया हमारे लिए,\nऔर फिर हम आ गए जिंदगी के एक नए मुकाम पे,\nतब आज फिर उसकी कॉलेज लाइफ में वापिस जाने को दिल चाहता है।\n ~~ आशीष लाहोटी ( २३ अप्रैल २०११ ) ~~\n","permalink":"https://codingnconcepts.com/poetry/yaad-aata-hai-vit/","tags":null,"title":"याद आता है - VIT !!!"},{"categories":null,"contents":"कभी मैं भी छोटा बच्चा था, वो पल कितना सच्चा था,\nउमर का थोडा कच्चा था, पर छोटा था तो अच्छा था।\nजब दो आंसु की कीमत पे, जो चाहे वो मिल जाता था,\nतब एक छोटे बहाने से मैं स्कूल से छुट्टी पाता था।\nजब खिलोनों गुड्डे गुड़ियों के चारों और मेरा संसार था,\nतब मिटटी के घरौंदों से मैं अपनी दुनिया सजाता था।\nजब मम्मी की छोटी डांट पे भी मुझे जोर से रोना आता था,\nतब उनकी गोद में सर रखके मैं सारी खुशियाँ पाता था।\nजब पापा के काम से आते ही पढने का नाटक करता था,\nतब उनका सर पे हाथ भी आशीर्वाद बन जाता था।\nजब भाई के साथ में मिल मैं खूब शरारत करता था,\nतब मेरी सारी गलती भी वो अपने सर ले लेता था।\nजब दीदी हर बात पे मेरी खूब खिंचाई करती थी,\nतब अपने हिस्से की चीज़े भी मुझको दे देती थी।\nजब दोस्तों की टोली में मैं खूब धमाल मचाता था,\nतब दोस्ती का वादा भी सच्चे दिल से निभाता था।\nजब छोटा सा संसार था, न कोई जीवन जंजाल था,\nतब मैं बिलकुल नादान था, पर छोटा था तो अच्छा था।\nउन खट्टी मीठी यादों में, मैं आज भी रोता हँसता हूँ,\nवो बचपन फिर न आयेगा, पर आज भी मैं एक बच्चा हूँ।\n ~~ आशीष लाहोटी ( 8-अप्रैल-११ ) ~~\n","permalink":"https://codingnconcepts.com/poetry/chota-tha-to-accha-tha/","tags":null,"title":"छोटा था तो अच्छा था !"},{"categories":null,"contents":" Hey Everyone! I’m Ashish Lahoti. Welcome to my technology blog!\nI created this blog to narrate my coding and concepts learning experiences. I like sharing my experiments and ideas with everyone by writing articles on latest technological trends.\nPrimarily I write about Java, Spring, Kafka, Javascript, CSS and the list goes on\u0026hellip;\nFew pointers about me:-\n Full Stack Certified Kafka and SCJP Developer with 9+ years of extensive experience in Java and JavaScript Technologies. Experience in developing distributed and scalable Web applications and Enterprise applications using Java/J2EE Technologies (Java, Spring Boot, JPA, JMS, XML, XSLT, RESTful API, SOAP and Hibernate). Experience in developing native web-component based application using Polymer, lit-element, vaadin, ES6 and Single Page application using AngularJS, ExtJS. Experience in working with SQL databases like Oracle, MySQL, KAFKA and Big Data Analytics using Elastic (ELK) stack. Expertise working in the Agile methodology environment in Finance and Publishing Domain.  I’d love to hear from you! Have questions or suggestions? Feel free to email me on lahoti.ashish20@gmail.com\nSometimes I do hindi poetry, here is my collection of poems\nThanks for reading!\n","permalink":"https://codingnconcepts.com/about/","tags":null,"title":"About Me"},{"categories":null,"contents":"","permalink":"https://codingnconcepts.com/search/","tags":null,"title":"Search Results"},{"categories":null,"contents":"  .cs { margin-left: 4px; margin-bottom: 5px; border-radius: 8px; border-style: outset; border: 1px solid #000; background-color: #fff; display: inline-block; font-size: 30px; width: 50px; height: 50px; line-height: 50px; text-align: center; vertical-align: middle; overflow: hidden; cursor: pointer; } .cs:hover { background-color: #ccf5ff; border-color: rgb(255, 51, 0); } .get_symbols_instruction { font-size: 22px; font-weight: 700; margin-top: 4px; margin-bottom: 8px; text-align: center; } h1 { margin: 0; text-align: center; background: #2a2a2a; color: white; }    Just click on a symbol to copy. Stars Symbols  ★ ☆ ✡ ✦ ✧ ✩ ✪ ✫ ✬ ✭ ✮ ✯ ✰ ⁂ ⁎ ⁑ ✢ ✣ ✤ ✥ ✱ ✲ ✳ ✴ ✵ ✶ ✷ ✸ ✹ ✺ ✻ ✼ ✽ ✾ ✿ ❀ ❁ ❂ ❃ ❇ ❈ ❉ ❊ ❋ ❄ ❆ ❅ ⋆ ≛  Copyright, Trademark, Office \u0026amp; Law Symbols  © ® ™ ℠ ℡ ℗ ‱ № ℀ ℁ ℅ ℆ ⅍ ☊ ☎ ☏ ⌨ ✁ ✂ ✃ ✄ ✆ ✇ ✈ ✉ ✎ ✏ ✐ ✑ ✒ ‰ § ¶ ✌ ☝ ☞ ☛ ☟ ☜ ☚ ✍  Currency Symbols  ¢ $ € £ ¥ ₮ ৲ ৳ ௹ ฿ ៛ ₠ ₡ ₢ ₣ ₤ ₥ ₦ ₧ ₨ ₩ ₪ ₫ ₭ ₯ ₰ ₱ ₲ ₳ ₴ ₵ ￥ ﷼ ¤ ƒ  Bracket Symbols  〈 〉 《 》 「 」 『 』 【 】 〔 〕 ︵ ︶ ︷ ︸ ︹ ︺ ︻ ︼ ︽ ︾ ︿ ﹀ ﹁ ﹂ ﹃ ﹄ ﹙ ﹚ ﹛ ﹜ ﹝ ﹞ ﹤ ﹥ （ ） ＜ ＞ ｛ ｝ 〖 〗 〘 〙 〚 〛 « » ‹ › 〈 〉 〱  Chess \u0026amp; Card Symbols  ♔ ♕ ♖ ♗ ♘ ♙ ♚ ♛ ♜ ♝ ♞ ♟ ♤ ♠ ♧ ♣ ♡ ♥ ♢ ♦  Musical Notes \u0026amp; Music Symbols  ♩ ♪ ♫ ♬ ♭ ♮ ♯ ° ø ؂ ≠ ≭  Degree, Weather \u0026amp; Unit Symbols  ° ℃ ℉ ϟ ☀ ☁ ☂ ☃ ☉ ☼ ☽ ☾ ♁ ♨ ❄ ❅ ❆ ☇ ☈ ☄ ㎎ ㎏ ㎜ ㎝ ㎞ ㎡ ㏄ ㏎ ㏑ ㏒ ㏕  Arrows Symbols  ↕ ↖ ↗ ↘ ↙ ↚ ↛ ↜ ↝ ↞ ↟ ↠ ↡ ↢ ↣ ↤ ↥ ↦ ↧ ↨ ↩ ↪ ↫ ↬ ↭ ↮ ↯ ↰ ↱ ↲ ↳ ↴ ↶ ↷ ↸ ↹ ↺ ↻ ↼ ↽ ↾ ↿ ⇀ ⇁ ⇂ ⇃ ⇄ ⇅ ⇆ ⇇ ⇈ ⇉ ⇊ ⇋ ⇌ ⇍ ⇎ ⇏ ⇕ ⇖ ⇗ ⇘ ⇙ ⇚ ⇛ ⇜ ⇝ ⇞ ⇟ ⇠ ⇡ ⇢ ⇣ ⇤ ⇥ ⇦ ⇧ ⇨ ⇩ ⇪ ⌅ ⌆ ⌤ ⏎ ▶ ☇ ☈ ☊ ☋ ☌ ☍ ➔ ➘ ➙ ➚ ➛ ➜ ➝ ➞ ➟ ➠ ➡ ➢ ➣ ➤ ➥ ➦ ➧ ➨ ➩ ➪ ➫ ➬ ➭ ➮ ➯ ➱ ➲ ➳ ➴ ➵ ➶ ➷ ➸ ➹ ➺ ➻ ➼ ➽ ➾ ⤴ ⤵ ↵ ↓ ↔ ← → ↑ ⌦ ⌫ ⌧ ⇰ ⇫ ⇬ ⇭ ⇳ ⇮ ⇯ ⇱ ⇲ ⇴ ⇵ ⇷ ⇸ ⇹ ⇺ ⇑ ⇓ ⇽ ⇾ ⇿ ⬳ ⟿ ⤉ ⤈ ⇻ ⇼ ⬴ ⤀ ⬵ ⤁ ⬹ ⤔ ⬺ ⤕ ⬶ ⤅ ⬻ ⤖ ⬷ ⤐ ⬼ ⤗ ⬽ ⤘ ⤝ ⤞ ⤟ ⤠ ⤡ ⤢ ⤣ ⤤ ⤥ ⤦ ⤪ ⤨ ⤧ ⤩ ⤭ ⤮ ⤯ ⤰ ⤱ ⤲ ⤫ ⤬ ⬐ ⬎ ⬑ ⬏ ⤶ ⤷ ⥂ ⥃ ⥄ ⭀ ⥱ ⥶ ⥸ ⭂ ⭈ ⭊ ⥵ ⭁ ⭇ ⭉ ⥲ ⭋ ⭌ ⥳ ⥴ ⥆ ⥅ ⥹ ⥻ ⬰ ⥈ ⬾ ⥇ ⬲ ⟴ ⥷ ⭃ ⥺ ⭄ ⥉ ⥰ ⬿ ⤳ ⥊ ⥋ ⥌ ⥍ ⥎ ⥏ ⥐ ⥑ ⥒ ⥓ ⥔ ⥕ ⥖ ⥗ ⥘ ⥙ ⥚ ⥛ ⥜ ⥝ ⥞ ⥟ ⥠ ⥡ ⥢ ⥤ ⥣ ⥥ ⥦ ⥨ ⥧ ⥩ ⥮ ⥯ ⥪ ⥬ ⥫ ⥭ ⤌ ⤍ ⤎ ⤏ ⬸ ⤑ ⬱ ⟸ ⟹ ⟺ ⤂ ⤃ ⤄ ⤆ ⤇ ⤊ ⤋ ⭅ ⭆ ⟰ ⟱ ⇐ ⇒ ⇔ ⇶ ⟵ ⟶ ⟷ ⬄ ⬀ ⬁ ⬂ ⬃ ⬅ ⬆ ⬇ ⬈ ⬉ ⬊ ⬋ ⬌ ⬍ ⟻ ⟼ ⤒ ⤓ ⤙ ⤚ ⤛ ⤜ ⥼ ⥽ ⥾ ⥿ ⤼ ⤽ ⤾ ⤿ ⤸ ⤺ ⤹ ⤻ ⥀ ⥁ ⟲ ⟳  Astrological \u0026 Zodiac Sign Symbols  ☮ ☸ ♈ ♉ ☪ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ☤ ☥ ☧ ☨ ☩ ☫ ☬ ☭ ☯ ☽ ☾ ✙ ✚ ✛ ✜ ✝ ✞ ✟ † ⊹ ‡ ♁ ♆ ❖ ♅ ✠ ✡ ✢ 卍 卐 〷 ☠ ☢ ☣ ☦  Heart Symbols  ♥ ♡ ❤ ❥ ❣ ❦ ❧ დ ღ ۵ ლ ও ლ ❤️️ 💙 🧡 💚 💛 💜 🖤 💗 💓 💔 💟 💕 💖 ❣️ 💘 💝 💞  Check mark \u0026amp; Tick Symbols  ✓ ✔ ✗ ✘ ☓ ∨ √ ✇ ☐ ☑ ☒ 〤 〥  Male, Female, People \u0026amp; Smiley Symbols  ♀ ♂ ☹ ☺ ☻ ☿ 〠 ヅ ツ ㋡ 웃 유 ü Ü ت シ ッ ㋛ 웃̟͟ ꑇ ꐦ ꐠ ꐡ ꐕ ꌇ ꌈ ꉕ ꈋ ꈌ ꆛ ꆜ ꃼ ☠ ☃ 〲 〴 ϡ ﭢ ⍢ ⍣ ⍤ ⍥ ⍨ ⍩ ὃ ὕ ὣ Ѷ Ӫ ӫ ⚣ ⚤ ⚥ ⚦ ⚧ ⚨ ⚢  Punctuation Symbols  · ‑ ‒ – — ― ‗ ‘ ’ ‚ ‛ “ ” „ ‟ • ‣ ․ ‥ … ‧ ′ ″ ‴ ‵ ‶ ‷ ❛ ❜ ❝ ❞ ʹ ʺ ʻ ʼ ʽ ʾ ʿ ˀ ˁ ˂ ˃ ˄ ˅ ˆ ˇ ˈ ˉ ˊ ˋ ˌ ˍ ˎ ˏ ː ˑ ˒ ˓ ˔ ˕ ˖ ˗ ˘ ˙ ˚ ˛ ˜ ˝ ˞ ˠ ˡ ～ ¿ ﹐ ﹒ ﹔ ﹕ ！ ＃ ＄ ％ ＆ ＊ ， ． ： ； ？ ＠ 、 。 〃 〝 〞 ︰  Maths Symbols  π ∞ Σ √ ∛ ∜ ∫ ∬ ∭ ∮ ∯ ∰ ∱ ∲ ∳ ∀ ∁ ∂ ∃ ∄ ∅ ∆ ∇ ∈ ∉ ∊ ∋ ∌ ∍ ∎ ∏ ∐ ∑ − ∓ ∔ ∕ ∖ ∗ ∘ ∙ ∝ ∟ ∠ ∡ ∢ ∣ ∤ ∥ ∦ ∧ ∨ ∩ ∪ ∴ ∵ ∶ ∷ ∸ ∹ ∺ ∻ ∼ ∽ ∾ ∿ ≀ ≁ ≂ ≃ ≄ ≅ ≆ ≇ ≈ ≉ ≊ ≋ ≌ ≍ ≎ ≏ ≐ ≑ ≒ ≓ ≔ ≕ ≖ ≗ ≘ ≙ ≚ ≛ ≜ ≝ ≞ ≟ ≠ ≡ ≢ ≣ ≤ ≥ ≦ ≧ ≨ ≩ ≪ ≫ ≬ ≭ ≮ ≯ ≰ ≱ ≲ ≳ ≴ ≵ ≶ ≷ ≸ ≹ ≺ ≻ ≼ ≽ ≾ ≿ ⊀ ⊁ ⊂ ⊃ ⊄ ⊅ ⊆ ⊇ ⊈ ⊉ ⊊ ⊋ ⊌ ⊍ ⊎ ⊏ ⊐ ⊑ ⊒ ⊓ ⊔ ⊕ ⊖ ⊗ ⊘ ⊙ ⊚ ⊛ ⊜ ⊝ ⊞ ⊟ ⊠ ⊡ ⊢ ⊣ ⊤ ⊥ ⊦ ⊧ ⊨ ⊩ ⊪ ⊫ ⊬ ⊭ ⊮ ⊯ ⊰ ⊱ ⊲ ⊳ ⊴ ⊵ ⊶ ⊷ ⊸ ⊹ ⊺ ⊻ ⊼ ⊽ ⊾ ⊿ ⋀ ⋁ ⋂ ⋃ ⋄ ⋅ ⋆ ⋇ ⋈ ⋉ ⋊ ⋋ ⋌ ⋍ ⋎ ⋏ ⋐ ⋑ ⋒ ⋓ ⋔ ⋕ ⋖ ⋗ ⋘ ⋙ ⋚ ⋛ ⋜ ⋝ ⋞ ⋟ ⋠ ⋡ ⋢ ⋣ ⋤ ⋥ ⋦ ⋧ ⋨ ⋩ ⋪ ⋫ ⋬ ⋭ ⋮ ⋯ ⋰ ⋱ ⁺ ⁻ ⁼ ⁽ ⁾ ⁿ ₊ ₋ ₌ ₍ ₎ ✖ ﹢ ﹣ ＋ － ／ ＝ ÷ ± ×  Number Symbols  Ⅰ Ⅱ Ⅲ Ⅳ Ⅴ Ⅵ Ⅶ Ⅷ Ⅸ Ⅹ Ⅺ Ⅻ Ⅼ Ⅽ Ⅾ Ⅿ ⅰ ⅱ ⅲ ⅳ ⅴ ⅵ ⅶ ⅷ ⅸ ⅹ ⅺ ⅻ ⅼ ⅽ ⅾ ⅿ ↀ ↁ ↂ ➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈ ➉ ➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒ ➓ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ ⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ₀ ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉ ⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ㈠ ㈡ ㈢ ㈣ ㈤ ㈥ ㈦ ㈧ ㈨ ㈩ ㊀ ㊁ ㊂ ㊃ ㊄ ㊅ ㊆ ㊇ ㊈ ㊉ ０ １ ２ ３ ４ ５ ６ ７ ８ ９ ⁱ ₐ ₑ ₒ ₓ ₔ  Fraction Symbols  ⅟ ½ ⅓ ⅕ ⅙ ⅛ ⅔ ⅖ ⅚ ⅜ ¾ ⅗ ⅝ ⅞ ⅘ ¼ ⅐ ⅑ ⅒ ↉ % ℅ ‰ ‱  Comparison Symbols  ≤ ≥ ≦ ≧ ≨ ≩ ⊰ ⊱ ⋛ ⋚ ≂ ≃ ≄ ≅ ≆ ≇ ≈ ≉ ≊ ≋ ≌ ≍ ≎ ≏ ≐ ≑ ≒ ≓ ≔ ≕ ≖ ≗ ≘ ≙ ≚ ≛ ≜ ≝ ≞ ≟ ≠ ≡ ≢ ≣  Technical Symbols  ⌀ ⌂ ⌃ ⌄ ⌅ ⌆ ⌇ ⌈ ⌉ ⌊ ⌋ ⌌ ⌍ ⌎ ⌏ ⌐ ⌑ ⌒ ⌓ ⌔ ⌕ ⌖ ⌗ ⌘ ⌙ ⌚ ⌛ ⌜ ⌝ ⌞ ⌟ ⌠ ⌡ ⌢ ⌣ ⌤ ⌥ ⌦ ⌧ ⌨ ⌫ ⌬ ⌭ ⌮ ⌯ ⌰ ⌱ ⌲ ⌳ ⌴ ⌵ ⌶ ⌷ ⌸ ⌹ ⌺ ⌻ ⌼ ⌽ ⌾ ⌿ ⍀ ⍁ ⍂ ⍃ ⍄ ⍅ ⍆ ⍇ ⍈ ⍉ ⍊ ⍋ ⍌ ⍍ ⍎ ⍏ ⍐ ⍑ ⍒ ⍓ ⍔ ⍕ ⍖ ⍗ ⍘ ⍙ ⍚ ⍛ ⍜ ⍝ ⍞ ⍟ ⍠ ⍡ ⍢ ⍣ ⍤ ⍥ ⍦ ⍧ ⍨ ⍩ ⍪ ⍫ ⍬ ⍭ ⍮ ⍯ ⍰ ⍱ ⍲ ⍳ ⍴ ⍵ ⍶ ⍷ ⍸ ⍹ ⍺ ﹘ ﹝ ﹞ ﹟ ﹡ 〶 ␛ ␡ ␚ ␟ ␘ ␠ ␤ ␋ ␌ ␍ ␎ ␏ ␐ ␑ ␒ ␓ ␔ ␕ ␖ ␗ ␙ ␜ ␝ ␞ ␀ ␁ ␂ ␃ ␄ ␅ ␆ ␇ ␈ ␉ ␊ ␢ ␣ ⎋  ᴴᴰ  Square \u0026amp; Rectangle Symbols  ❏ ❐ ❑ ❒ ▀ ▁ ▂ ▃ ▄ ▅ ▆ ▇ ▉ ▊ ▋ █ ▌ ▐ ▍ ▎ ▏ ▕ ░ ▒ ▓ ▔ ▬ ▢ ▣ ▤ ▥ ▦ ▧ ▨ ▩ ▪ ▫ ▭ ▮ ▯ ☰ ☲ ☱ ☴ ☵ ☶ ☳ ☷ ▰ ▱ ◧ ◨ ◩ ◪ ◫ ∎ ■ □ ⊞ ⊟ ⊠ ⊡ ❘ ❙ ❚ 〓 ◊ ◈ ◇ ◆ ⎔ ⎚ ☖ ☗  Triangle Symbols  ◄ ▲ ▼ ► ◀ ◣ ◥ ◤ ◢ ▶ ◂ ▴ ▾ ▸ ◁ △ ▽ ▷ ∆ ∇ ⊳ ⊲ ⊴ ⊵ ◅ ▻ ▵ ▿ ◃ ▹ ◭ ◮ ⫷ ⫸ ⋖ ⋗ ⋪ ⋫ ⋬ ⋭ ⊿ ◬ ≜ ⑅  Line Symbols  │ ┃ ╽ ╿ ╏ ║ ╎ ┇ ︱ ┊ ︳ ┋ ┆ ╵ 〡 〢 ╹ ╻ ╷ 〣 ☰ ☱ ☲ ☳ ☴ ☵ ☶ ☷ ≡ ✕ ═ ━ ─ ╍ ┅ ┉ ┄ ┈ ╌ ╴ ╶ ╸ ╺ ╼ ╾ ﹉ ﹍ ﹊ ﹎ ︲ ⑆ ⑇ ⑈ ⑉ ⑊ ⑄ ⑀ ︴ ﹏ ﹌ ﹋ ╳ ╲ ╱ ︶ ︵ 〵 〴 〳 〆 ` ᐟ ‐ ⁃ ⎯ 〄  Corner Symbols  ﹄ ﹃ ﹂ ﹁ ┕ ┓ └ ┐ ┖ ┒ ┗ ┑ ┍ ┙ ┏ ┛ ┎ ┚ ┌ ┘ 「 」 『 』 ˩ ˥ ├ ┝ ┞ ┟ ┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯ ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿ ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╒ ╕ ╓ ╖ ╔ ╗ ╘ ╛ ╙ ╜ ╚ ╝ ╞ ╡ ╟ ╢ ╠ ╣ ╥ ╨ ╧ ╤ ╦ ╩ ╪ ╫ ╬ 〒 ⊢ ⊣ ⊤ ⊥ ╭ ╮ ╯ ╰ ⊦ ⊧ ⊨ ⊩ ⊪ ⊫ ⊬ ⊭ ⊮ ⊯ ⊺ 〦 〧 〨 ˦ ˧ ˨ ⑁ ⑂ ⑃ ∟  Circle Symbols  ◉ ○ ◌ ◍ ◎ ● ◐ ◑ ◒ ◓ ◔ ◕ ◖ ◗ ❂ ☢ ⊗ ⊙ ◘ ◙ ◚ ◛ ◜ ◝ ◞ ◟ ◠ ◡ ◯ 〇 〶 ⚫ ⬤ ◦ ∅ ∘ ⊕ ⊖ ⊘ ⊚ ⊛ ⊜ ⊝ ❍ ⦿  Phonetic Symbols  ʌ ɑ: æ e ə ɜ: ɪ i: ɒ ɔ: ʊ u: aɪ aʊ eɪ oʊ ɔɪ eə ɪə ʊə b d f g h j k l m n ŋ p r s ʃ t tʃ θ ð v w z ʒ dʒ  Greek Symbols  \u0026alpha; \u0026beta; \u0026gamma; \u0026delta; \u0026epsilon; \u0026zeta; \u0026eta; \u0026theta; \u0026iota; \u0026kappa; \u0026lambda; \u0026mu; \u0026nu; \u0026xi; \u0026omicron; \u0026pi; \u0026rho; \u0026sigmaf; \u0026sigma; \u0026tau; \u0026upsilon; \u0026phi; \u0026chi; \u0026psi; \u0026omega; \u0026Alpha; \u0026Beta; \u0026Gamma; \u0026Delta; \u0026Epsilon; \u0026Zeta; \u0026Eta; \u0026Theta; \u0026Iota; \u0026Kappa; \u0026Lambda; \u0026Mu; \u0026Nu; \u0026Xi; \u0026Omicron; \u0026Pi; \u0026Rho; \u0026Sigma; \u0026Tau; \u0026Upsilon; \u0026Phi; \u0026Chi; \u0026Psi; \u0026Omega;  Latin Symbols  ą č Ĥ ħ ĩ Ň Ř Ť Ŵ Ž ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ Ａ Ｂ Ｃ Ｄ Ｅ Ｆ Ｇ Ｈ Ｉ Ｊ Ｋ Ｌ Ｍ Ｎ Ｏ Ｐ Ｑ Ｒ Ｓ Ｔ Ｕ Ｖ Ｗ Ｘ Ｙ Ｚ ａ ｂ ｃ ｄ ｅ ｆ ｇ ｈ ｉ ｊ ｋ ｌ ｍ ｎ ｏ ｐ ｑ ｒ ｓ ｔ ｕ ｖ ｗ ｘ ｙ ｚ á â æ à å ã ä ç é ê è ð ë í î ì ï ñ ó ô ò ø õ ö ß þ ú û ù ü ý ÿ ᴀ ʙ ᴄ ᴅ ᴇ ғ ɢ ʜ ɪ ᴊ ᴋ ʟ ᴍ ɴ ᴏ ᴏ ᴘ ǫ ʀ s ᴛ ᴜ ᴠ ᴡ x ʏ ᴢ 𝓐 𝓑 𝓒 𝓓 𝓔 𝓕 𝓖 𝓗 𝓘 𝓙 𝓚 𝓛 𝓜 𝓝 𝓞 𝓟 𝓠 𝓡 𝓢 𝓣 𝓤 𝓥 𝓦 𝓧 𝓨 𝓩 𝓪 𝓫 𝓬 𝓭 𝓮 𝓯 𝓰 𝓱 𝓲 𝓳 𝓴 𝓵 𝓶 𝓷 𝓸 𝓹 𝓺 𝓻 𝓼 𝓽 𝓾 𝓿 𝔀 𝔁 𝔂 𝔃 𝒜 𝐵 𝒞 𝒟 𝐸 𝐹 𝒢 𝐻 𝐼 𝒥 𝒦 𝐿 𝑀 𝒩 𝒪 𝒫 𝒬 𝑅 𝒮 𝒯 𝒰 𝒱 𝒲 𝒳 𝒴 𝒵 𝒶 𝒷 𝒸 𝒹 𝑒 𝒻 𝑔 𝒽 𝒾 𝒿 𝓀 𝓁 𝓂 𝓃 𝑜 𝓅 𝓆 𝓇 𝓈 𝓉 𝓊 𝓋 𝓌 𝓍 𝓎 𝓏 𝐀 𝐁 𝐂 𝐃 𝐄 𝐅 𝐆 𝐇 𝐈 𝐉 𝐊 𝐋 𝐌 𝐍 𝐎 𝐏 𝐐 𝐑 𝐒 𝐓 𝐔 𝐕 𝐖 𝐗 𝐘 𝐙 𝐚 𝐛 𝐜 𝐝 𝐞 𝐟 𝐠 𝐡 𝐢 𝐣 𝐤 𝐥 𝐦 𝐧 𝐨 𝐩 𝐪 𝐫 𝐬 𝐭 𝐮 𝐯 𝐰 𝐱 𝐲 𝐳 𝔸 𝔹 ℂ 𝔻 𝔼 𝔽 𝔾 ℍ 𝕀 𝕁 𝕂 𝕃 𝕄 ℕ 𝕆 ℙ ℚ ℝ 𝕊 𝕋 𝕌 𝕍 𝕎 𝕏 𝕐 ℤ 𝕒 𝕓 𝕔 𝕕 𝕖 𝕗 𝕘 𝕙 𝕚 𝕛 𝕜 𝕝 𝕞 𝕟 𝕠 𝕡 𝕢 𝕣 𝕤 𝕥 𝕦 𝕧 𝕨 𝕩 𝕪 𝕫 ᴭ ᴮ ᴯ ᴰ ᴱ ᴲ ᴳ ᴴ ᴵ ᴶ ᴷ ᴸ ᴹ ᴺ ᴻ ᴼ ᴽ ᴾ ᴿ ᵀ ᵁ ᵂ ᵃ ᵄ ᵆ ᵇ ᵈ ᵉ ᵊ ᵋ ᵌ ᵍ ʱ ʰ ᵢ ᵎ ʲ ᵏ ᵐ ᵑ ᵒ ᵓ ᵔ ᵕ ᵖ ʳ ʴ ᵗ ʵ ᵘ ᵙ ᵛ ᵚ ᵜ ᵝ ᵞ ᵟ ᵠ ᵡ ᶛ ᶜ ᶝ ᶞ ᶟ ᶠ ᶡ ᶢ ᶣ ᶤ ᶥ ᶦ ᶧ ᶨ ᶩ ᶪ ᶫ ᗩ ℊ ℎ ℓ ℘ ℮ ℄ ℇ ℈ ℏ ℔ ℞ ℟ ℣ ℥ Ω ℧ ℩ K Å Ⅎ ℵ ℶ ℷ ℸ ♃ ♄ ☡ ♇ ❡ 🅰 🅱 🅾 🅿 𝕬 𝕭 𝕮 𝕯 𝕰 𝕱 𝕲 𝕳 𝕴 𝕵 𝕶 𝕷 𝕸 𝕹 𝕺 𝕻 𝕼 𝕽 𝕾 𝕿 𝖀 𝖁 𝖂 𝖃 𝖄 𝖅 𝖆 𝖇 𝖈 𝖉 𝖊 𝖋 𝖌 𝖍 𝖎 𝖏 𝖐 𝖑 𝖒 𝖓 𝖔 𝖕 𝖖 𝖗 𝖘 𝖙 𝖚 𝖛 𝖜 𝖝 𝖞 𝖟 𝔄 𝔅 ℭ 𝔇 𝔈 𝔉 𝔊 ℌ ℑ 𝔍 𝔎 𝔏 𝔐 𝔑 𝔒 𝔓 𝔔 ℜ 𝔖 𝔗 𝔘 𝔙 𝔚 𝔛 𝔜 ℨ 𝔞 𝔟 𝔠 𝔡 𝔢 𝔣 𝔤 𝔥 𝔦 𝔧 𝔨 𝔩 𝔪 𝔫 𝔬 𝔭 𝔮 𝔯 𝔰 𝔱 𝔲 𝔳 𝔴 𝔵 𝔶 𝔷 𝘈 𝘉 𝘊 𝘋 𝘌 𝘍 𝘎 𝘏 𝘐 𝘑 𝘒 𝘓 𝘔 𝘕 𝘖 𝘗 𝘘 𝘙 𝘚 𝘛 𝘜 𝘝 𝘞 𝘟 𝘠 𝘡 𝘢 𝘣 𝘤 𝘥 𝘦 𝘧 𝘨 𝘩 𝘪 𝘫 𝘬 𝘭 𝘮 𝘯 𝘰 𝘱 𝘲 𝘳 𝘴 𝘵 𝘶 𝘷 𝘸 𝘹 𝘺 𝘻 𝘼 𝘽 𝘾 𝘿 𝙀 𝙁 𝙂 𝙃 𝙄 𝙅 𝙆 𝙇 𝙈 𝙉 𝙊 𝙋 𝙌 𝙍 𝙎 𝙏 𝙐 𝙑 𝙒 𝙓 𝙔 𝙕 𝙖 𝙗 𝙘 𝙙 𝙚 𝙛 𝙜 𝙝 𝙞 𝙟 𝙠 𝙡 𝙢 𝙣 𝙤 𝙥 𝙦 𝙧 𝙨 𝙩 𝙪 𝙫 𝙬 𝙭 𝙮 𝙯  Chinese Symbols  ㊊ ㊋ ㊌ ㊍ ㊎ ㊏ ㊐ ㊑ ㊒ ㊓ ㊔ ㊕ ㊖ ㊗ ㊘ ㊙ ㊚ ㊛ ㊜ ㊝ ㊞ ㊟ ㊠ ㊡ ㊢ ㊣ ㊤ ㊥ ㊦ ㊧ ㊨ ㊩ ㊪ ㊫ ㊬ ㊭ ㊮ ㊯ ㊰  Japanese Symbols  ぁ あ ぃ い ぅ う ぇ え ぉ お か が き ぎ く ぐ け げ こ ご さ ざ し じ す ず せ ぜ そ ぞ た だ ち ぢ っ つ づ て で と ど な に ぬ ね の は ば ぱ ひ び ぴ ふ ぶ ぷ へ べ ぺ ほ ぼ ぽ ま み む め も ゃ や ゅ ゆ ょ よ ら り る れ ろ ゎ わ ゐ ゑ を ん ゔ ゕ ゖ ゚ ゛ ゜ ゝ ゞ ゟ ゠ ァ ア ィ イ ゥ ウ ェ エ ォ オ カ ガ キ ギ ク グ ケ ゲ コ ゴ サ ザ シ ジ ス ズ セ ゼ ソ ゾ タ ダ チ ヂ ッ ツ ヅ テ デ ト ド ナ ニ ヌ ネ ノ ハ バ パ ヒ ビ ピ フ ブ プ ヘ ベ ペ ホ ボ ポ マ ミ ム メ モ ャ ヤ ュ ユ ョ ヨ ラ リ ル レ ロ ヮ ワ ヰ ヱ ヲ ン ヴ ヵ ヶ ヷ ヸ ヹ ヺ ・ ー ヽ ヾ ヿ ㍐ ㍿  Korean Symbols  ㄱ ㄲ ㄳ ㄴ ㄵ ㄶ ㄷ ㄸ ㄹ ㄺ ㄻ ㄼ ㄽ ㄾ ㄿ ㅀ ㅁ ㅂ ㅃ ㅄ ㅅ ㅆ ㅇ ㅈ ㅉ ㅊ ㅋ ㅌ ㅍ ㅎ ㅏ ㅐ ㅑ ㅒ ㅓ ㅔ ㅕ ㅖ ㅗ ㅘ ㅙ ㅚ ㅛ ㅜ ㅝ ㅞ ㅟ ㅠ ㅡ ㅢ ㅥ ㅦ ㅧ ㅨ ㅩ ㅪ ㅫ ㅬ ㅭ ㅮ ㅯ ㅰ ㅱ ㅲ ㅳ ㅴ ㅵ ㅶ ㅷ ㅸ ㅹ ㅺ ㅻ ㅼ ㅽ ㅾ ㅿ ㆀ ㆁ ㆂ ㆃ ㆄ ㆅ ㆆ ㆇ ㆈ ㆉ ㆊ  Popular Facebook Symbols  ♡ ♥ ღ ❥ ℳ Ⓐ ℒ ۵ ❁ ❀ ℰ ⋆ ℬ Ⓔ ❦ ℯ ↬ ℛ ℐ ➳ ✰ ℱ ℴ ❝ » ᴬ Ⓘ Ⓛ ✧ ✞ † Ⓢ ❞ ༄ ↳ Ⓡ ™ 【 Ⓝ ℋ ♛ ☾ ✿ ⚘ ★ 】 ¹ ᵅ → ➵ ❤️ 😍 🖤 ⚔️ 😂 💕 🎧 🌹 📌 🏳️‍🌈 👑 💙 💎 😎 ✨ 💻 ✔️ 🌙 🤣 🎤 💜 🎮 🎼 💛 😊 🧡 📞 🔊 ❣️ 💫 💖 🤩 💞 ☕️ 💔 ⚜️ 🌸 🔪 ⚠️ 😭     new ClipboardJS('.cs');   ","permalink":"https://codingnconcepts.com/tools/unicode-characters/","tags":null,"title":"Unicode Characters"}]