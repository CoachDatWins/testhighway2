<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript Interview on Coding N Concepts</title><link>https://codingnconcepts.com/tags/javascript-interview/</link><description>Recent content in Javascript Interview on Coding N Concepts</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://codingnconcepts.com/tags/javascript-interview/index.xml" rel="self" type="application/rss+xml"/><item><title>Async/Await in JavaScript</title><link>https://codingnconcepts.com/javascript/async-await-in-javascript/</link><pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/javascript/async-await-in-javascript/</guid><description>&lt;p>Async functions and Await keyword are latest additions in JavaScript as part of ECMAScript 2017 release which introduced a new way of writing asynchronous functions. In this post we will talk about why we should use async/wait, its syntax and practical usage with example.&lt;/p></description></item><item><title>Promises in JavaScript</title><link>https://codingnconcepts.com/javascript/promises-in-javascript/</link><pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/javascript/promises-in-javascript/</guid><description>&lt;p>Promises are introduced natively in ES6. They are very similar to our promises. As we keep or break our promises, Javascript promises are also either resolve or reject. In this post we will talk about why we should use promises, promise syntax, promise states and its practical usage with examples using fetch API.&lt;/p></description></item><item><title>Difference in == and === comparison operators in JavaScript</title><link>https://codingnconcepts.com/javascript/comparison-operators-in-javascript/</link><pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/javascript/comparison-operators-in-javascript/</guid><description>&lt;p>This is frequently asked question in JavaScript interview. We can compare primitive types, array and object using two comparison operators &lt;code>==&lt;/code> and &lt;code>===&lt;/code> available in JavaScript. This post describes the difference between these two with many examples.&lt;/p></description></item><item><title>Understand all about this keyword in JavaScript</title><link>https://codingnconcepts.com/javascript/this-keyword-in-javascript/</link><pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/javascript/this-keyword-in-javascript/</guid><description>&lt;p>The &lt;code>this&lt;/code> keyword in JavaScript is very important concept but at the same time very confusing to understand.&lt;/p></description></item><item><title>Classes in JavaScript</title><link>https://codingnconcepts.com/javascript/classes-in-javascript/</link><pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/javascript/classes-in-javascript/</guid><description>Let&amp;rsquo;s first look at example of each:
// ES5 Function Constructor function Person(name) { this.name = name; } // ES6 Class class Person { constructor(name) { this.name = name; } } For simple constructors, they look pretty similar.
The main difference in the constructor comes when using inheritance. If we want to create a Student class that subclasses Person and add a studentId field, this is what we have to do in addition to the above.</description></item><item><title>Understand call, bind and apply methods in JavaScript</title><link>https://codingnconcepts.com/javascript/call-vs-bind-vs-apply/</link><pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/javascript/call-vs-bind-vs-apply/</guid><description>&lt;p>This is frequently asked question in JavaScript interview. This post describes the Function prototype methods &lt;code>call()&lt;/code>, &lt;code>apply()&lt;/code> and &lt;code>bind()&lt;/code> with their syntax, usage and practical examples.&lt;/p></description></item><item><title>Lexical Scope, Closures and Currying in JavaScript</title><link>https://codingnconcepts.com/javascript/lexical-scope-closures-and-currying/</link><pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/javascript/lexical-scope-closures-and-currying/</guid><description>&lt;p>This post describes the &lt;a href="#lexical-scope">Lexical Scope&lt;/a>, &lt;a href="#closures">Closures&lt;/a> and &lt;a href="#currying">Currying Function&lt;/a> in JavaScript and their relations with examples.&lt;/p></description></item><item><title>Difference in const and Object.freeze() in JavaScript</title><link>https://codingnconcepts.com/javascript/const-vs-object-freeze/</link><pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/javascript/const-vs-object-freeze/</guid><description>&lt;p>This post describes the best practices to define constants and configuration values in JavaScript using &lt;code>const&lt;/code> and &lt;code>Object.freeze()&lt;/code> and the difference between them.&lt;/p></description></item><item><title>Object methods in JavaScript</title><link>https://codingnconcepts.com/javascript/object-methods-in-javascript/</link><pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/javascript/object-methods-in-javascript/</guid><description>&lt;p>This post describes the usage of various Object methods like &lt;code>Object.create()&lt;/code>, &lt;code>Object.assign()&lt;/code>, &lt;code>Object.freeze()&lt;/code>, &lt;code>Object.seal()&lt;/code> and many more available in JavaScript with examples.&lt;/p></description></item><item><title>Difference between var, let and const</title><link>https://codingnconcepts.com/javascript/difference-between-var-let-and-const/</link><pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/javascript/difference-between-var-let-and-const/</guid><description>&lt;p>A nice feature addition in ES2015 (ES6) was the introduction of &lt;code>let&lt;/code> and &lt;code>const&lt;/code> keywords for variable declaration. You can use &lt;code>var&lt;/code>, &lt;code>let&lt;/code> and &lt;code>const&lt;/code> keyword interchangeably for variable declaration though it makes a difference in terms of their scope, usage and hoisting. If you are not aware of these differences then please continue to read&amp;hellip;&lt;/p></description></item><item><title>Virtual Dom vs Shadow Dom</title><link>https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/</link><pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/</guid><description>&lt;p>This post explains the DOM, Virtual DOM and Shadow DOM concepts and their differences&amp;hellip;&lt;/p></description></item></channel></rss>