<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring Boot REST on Coding N Concepts</title><link>https://codingnconcepts.com/tags/spring-boot-rest/</link><description>Recent content in Spring Boot REST on Coding N Concepts</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 15 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://codingnconcepts.com/tags/spring-boot-rest/index.xml" rel="self" type="application/rss+xml"/><item><title>Build GraphQL API with Spring Boot</title><link>https://codingnconcepts.com/spring-boot/build-graphql-api-with-spring-boot/</link><pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/spring-boot/build-graphql-api-with-spring-boot/</guid><description>&lt;p>In this article, we&amp;rsquo;ll learn step by step, how to build GraphQL API with Spring Boot.&lt;/p></description></item><item><title>Jackson JSON Request and Response Mapping in Spring Boot</title><link>https://codingnconcepts.com/spring-boot/jackson-json-request-response-mapping/</link><pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/spring-boot/jackson-json-request-response-mapping/</guid><description>&lt;p>In this tutorial, we&amp;rsquo;ll learn how to map Jackson JSON request and response in Spring Boot Application with various Jackson configurations.&lt;/p></description></item><item><title>Spring @Controller and @RestController</title><link>https://codingnconcepts.com/spring-boot/spring-controller-vs-restcontroller/</link><pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/spring-boot/spring-controller-vs-restcontroller/</guid><description>&lt;p>In this quick article, we&amp;rsquo;ll see &lt;em>@Controller&lt;/em> and &lt;em>@RestController&lt;/em> annotations and their difference in Spring MVC.&lt;/p></description></item><item><title>Configure Feign Client in Spring Boot</title><link>https://codingnconcepts.com/spring-boot/configure-feign-rest-client/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/spring-boot/configure-feign-rest-client/</guid><description>&lt;p>In this article, we&amp;rsquo;ll learn how to configure a &lt;em>FeignClient&lt;/em> in your Spring Boot project to consume RESTFul APIs from other services.&lt;/p></description></item><item><title>Build RESTFul API with Spring Boot</title><link>https://codingnconcepts.com/spring-boot/build-restful-api-with-spring-boot/</link><pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/spring-boot/build-restful-api-with-spring-boot/</guid><description>&lt;p>In this article, we&amp;rsquo;ll learn step by step, how to build RESTFul API with Spring Boot. We&amp;rsquo;ll also learn the RestController, HTTP response codes and best practices along the way.&lt;/p></description></item><item><title>Custom API Request &amp; Response Logging in spring boot.</title><link>https://codingnconcepts.com/spring-boot/custom-api-request-response-logging/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/spring-boot/custom-api-request-response-logging/</guid><description>&lt;p>When we create RESTFul APIs in spring boot application in microservices environment. It becomes essential to log incoming API request and response and push it to centralized logging system such as Splunk or ELK for debugging. Also all the logs related to one request should have some common id to relate them. In this post we are going to solve these problems.&lt;/p></description></item><item><title>info and health endpoints in spring boot</title><link>https://codingnconcepts.com/spring-boot/configure-info-and-health-endpoints/</link><pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/spring-boot/configure-info-and-health-endpoints/</guid><description>&lt;p>In spring boot microservices based application, where microservices talks to each other using RESTFul APIs. We can expose some important information about microservice such as name, version, description over some endpoints say &lt;em>/info&lt;/em> and also realtime status or health over some endpoint say &lt;em>/health&lt;/em> to create application dashboards, realtime alerts, track microservice updates and so on&amp;hellip;&lt;/p></description></item><item><title>How to configure Swagger in spring boot</title><link>https://codingnconcepts.com/spring-boot/how-to-configure-swagger/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate><guid>https://codingnconcepts.com/spring-boot/how-to-configure-swagger/</guid><description>&lt;p>Swagger library is useful if you are creating REST services in spring boot web application. Swagger user interface allows you to view REST services and execute &lt;em>GET, POST, PUT, DELETE&lt;/em> HTTP endpoints. This is helpful since you do not need to use Postman or some other tool to test REST Apis.&lt;/p>
&lt;p>Follow these steps to configure swagger in your spring boot application:-&lt;/p></description></item></channel></rss>